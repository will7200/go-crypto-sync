/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type MarketDataApi interface {

	/*
			 * ApiV3AggTradesGet Compressed/Aggregate Trades List
			 * Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.

		Weight 1
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3AggTradesGetRequest
	*/
	ApiV3AggTradesGet(ctx _context.Context) ApiApiV3AggTradesGetRequest

	/*
	 * ApiV3AggTradesGetExecute executes the request
	 * @return []AggTrade
	 */
	ApiV3AggTradesGetExecute(r ApiApiV3AggTradesGetRequest) ([]AggTrade, *_nethttp.Response, error)

	/*
			 * ApiV3AvgPriceGet Current Average Price
			 * Current average price for a symbol.

		Weight 1
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3AvgPriceGetRequest
	*/
	ApiV3AvgPriceGet(ctx _context.Context) ApiApiV3AvgPriceGetRequest

	/*
	 * ApiV3AvgPriceGetExecute executes the request
	 * @return InlineResponse2003
	 */
	ApiV3AvgPriceGetExecute(r ApiApiV3AvgPriceGetRequest) (InlineResponse2003, *_nethttp.Response, error)

	/*
			 * ApiV3DepthGet Order Book
			 *
		| Limit               | Weight  |
		| -------------       |---------|
		| 5, 10, 20, 50, 100  | 1       |
		| 500                 | 5       |
		| 1000                | 10      |
		| 5000                | 50      |
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3DepthGetRequest
	*/
	ApiV3DepthGet(ctx _context.Context) ApiApiV3DepthGetRequest

	/*
	 * ApiV3DepthGetExecute executes the request
	 * @return InlineResponse2002
	 */
	ApiV3DepthGetExecute(r ApiApiV3DepthGetRequest) (InlineResponse2002, *_nethttp.Response, error)

	/*
			 * ApiV3ExchangeInfoGet Exchange Information
			 * Current exchange trading rules and symbol information

		Weight 1
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3ExchangeInfoGetRequest
	*/
	ApiV3ExchangeInfoGet(ctx _context.Context) ApiApiV3ExchangeInfoGetRequest

	/*
	 * ApiV3ExchangeInfoGetExecute executes the request
	 * @return InlineResponse2001
	 */
	ApiV3ExchangeInfoGetExecute(r ApiApiV3ExchangeInfoGetRequest) (InlineResponse2001, *_nethttp.Response, error)

	/*
			 * ApiV3HistoricalTradesGet Old Trade Lookup
			 * Get older market trades.

		`X-MBX-APIKEY` required in header

		Weight 5
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3HistoricalTradesGetRequest
	*/
	ApiV3HistoricalTradesGet(ctx _context.Context) ApiApiV3HistoricalTradesGetRequest

	/*
	 * ApiV3HistoricalTradesGetExecute executes the request
	 * @return []Trade
	 */
	ApiV3HistoricalTradesGetExecute(r ApiApiV3HistoricalTradesGetRequest) ([]Trade, *_nethttp.Response, error)

	/*
			 * ApiV3KlinesGet Kline/Candlestick Data
			 * Kline/candlestick bars for a symbol.\
		Klines are uniquely identified by their open time.

		Weight 1
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3KlinesGetRequest
	*/
	ApiV3KlinesGet(ctx _context.Context) ApiApiV3KlinesGetRequest

	/*
	 * ApiV3KlinesGetExecute executes the request
	 * @return []map[string]interface{}
	 */
	ApiV3KlinesGetExecute(r ApiApiV3KlinesGetRequest) ([]map[string]interface{}, *_nethttp.Response, error)

	/*
			 * ApiV3PingGet Test Connectivity
			 * Test connectivity to the Rest API.

		Weight 1
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3PingGetRequest
	*/
	ApiV3PingGet(ctx _context.Context) ApiApiV3PingGetRequest

	/*
	 * ApiV3PingGetExecute executes the request
	 */
	ApiV3PingGetExecute(r ApiApiV3PingGetRequest) (*_nethttp.Response, error)

	/*
			 * ApiV3Ticker24hrGet 24hr Ticker Price Change Statistics
			 * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.

		Weight:\
		`1` for a single symbol;\
		`40` when the symbol parameter is omitted
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3Ticker24hrGetRequest
	*/
	ApiV3Ticker24hrGet(ctx _context.Context) ApiApiV3Ticker24hrGetRequest

	/*
	 * ApiV3Ticker24hrGetExecute executes the request
	 * @return Ticker24HourResponse
	 */
	ApiV3Ticker24hrGetExecute(r ApiApiV3Ticker24hrGetRequest) (Ticker24HourResponse, *_nethttp.Response, error)

	/*
			 * ApiV3TickerBookTickerGet Symbol Order Book Ticker
			 * Best price/qty on the order book for a symbol or symbols.

		Weight:\
		1 for a single symbol;\
		40 when the symbol parameter is omitted
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3TickerBookTickerGetRequest
	*/
	ApiV3TickerBookTickerGet(ctx _context.Context) ApiApiV3TickerBookTickerGetRequest

	/*
	 * ApiV3TickerBookTickerGetExecute executes the request
	 * @return BookTickerResponse
	 */
	ApiV3TickerBookTickerGetExecute(r ApiApiV3TickerBookTickerGetRequest) (BookTickerResponse, *_nethttp.Response, error)

	/*
			 * ApiV3TickerPriceGet Symbol Price Ticker
			 * Latest price for a symbol or symbols.

		Weight:\
		`1` for a single symbol;\
		`2` when the symbol parameter is omitted
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3TickerPriceGetRequest
	*/
	ApiV3TickerPriceGet(ctx _context.Context) ApiApiV3TickerPriceGetRequest

	/*
	 * ApiV3TickerPriceGetExecute executes the request
	 * @return PriceTickerResponse
	 */
	ApiV3TickerPriceGetExecute(r ApiApiV3TickerPriceGetRequest) (PriceTickerResponse, *_nethttp.Response, error)

	/*
			 * ApiV3TimeGet Check Server Time
			 * Test connectivity to the Rest API and get the current server time.

		Weight 1
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3TimeGetRequest
	*/
	ApiV3TimeGet(ctx _context.Context) ApiApiV3TimeGetRequest

	/*
	 * ApiV3TimeGetExecute executes the request
	 * @return InlineResponse200
	 */
	ApiV3TimeGetExecute(r ApiApiV3TimeGetRequest) (InlineResponse200, *_nethttp.Response, error)

	/*
			 * ApiV3TradesGet Recent Trades List
			 * Get recent trades (up to last 500).

		Weight 1
			 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			 * @return ApiApiV3TradesGetRequest
	*/
	ApiV3TradesGet(ctx _context.Context) ApiApiV3TradesGetRequest

	/*
	 * ApiV3TradesGetExecute executes the request
	 * @return []Trade
	 */
	ApiV3TradesGetExecute(r ApiApiV3TradesGetRequest) ([]Trade, *_nethttp.Response, error)
}

// MarketDataApiService MarketDataApi service
type MarketDataApiService service

type ApiApiV3AggTradesGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
	fromId     *int32
	startTime  *int32
	endTime    *int32
	limit      *int32
}

func (r ApiApiV3AggTradesGetRequest) Symbol(symbol string) ApiApiV3AggTradesGetRequest {
	r.symbol = &symbol
	return r
}
func (r ApiApiV3AggTradesGetRequest) FromId(fromId int32) ApiApiV3AggTradesGetRequest {
	r.fromId = &fromId
	return r
}
func (r ApiApiV3AggTradesGetRequest) StartTime(startTime int32) ApiApiV3AggTradesGetRequest {
	r.startTime = &startTime
	return r
}
func (r ApiApiV3AggTradesGetRequest) EndTime(endTime int32) ApiApiV3AggTradesGetRequest {
	r.endTime = &endTime
	return r
}
func (r ApiApiV3AggTradesGetRequest) Limit(limit int32) ApiApiV3AggTradesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiApiV3AggTradesGetRequest) Execute() ([]AggTrade, *_nethttp.Response, error) {
	return r.ApiService.ApiV3AggTradesGetExecute(r)
}

/*
 * ApiV3AggTradesGet Compressed/Aggregate Trades List
 * Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.

Weight 1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3AggTradesGetRequest
*/
func (a *MarketDataApiService) ApiV3AggTradesGet(ctx _context.Context) ApiApiV3AggTradesGetRequest {
	return ApiApiV3AggTradesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []AggTrade
 */
func (a *MarketDataApiService) ApiV3AggTradesGetExecute(r ApiApiV3AggTradesGetRequest) ([]AggTrade, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AggTrade
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3AggTradesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/aggTrades"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}

	localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	if r.fromId != nil {
		localVarQueryParams.Add("fromId", parameterToString(*r.fromId, ""))
	}
	if r.startTime != nil {
		localVarQueryParams.Add("startTime", parameterToString(*r.startTime, ""))
	}
	if r.endTime != nil {
		localVarQueryParams.Add("endTime", parameterToString(*r.endTime, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3AvgPriceGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
}

func (r ApiApiV3AvgPriceGetRequest) Symbol(symbol string) ApiApiV3AvgPriceGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiApiV3AvgPriceGetRequest) Execute() (InlineResponse2003, *_nethttp.Response, error) {
	return r.ApiService.ApiV3AvgPriceGetExecute(r)
}

/*
 * ApiV3AvgPriceGet Current Average Price
 * Current average price for a symbol.

Weight 1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3AvgPriceGetRequest
*/
func (a *MarketDataApiService) ApiV3AvgPriceGet(ctx _context.Context) ApiApiV3AvgPriceGetRequest {
	return ApiApiV3AvgPriceGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2003
 */
func (a *MarketDataApiService) ApiV3AvgPriceGetExecute(r ApiApiV3AvgPriceGetRequest) (InlineResponse2003, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2003
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3AvgPriceGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/avgPrice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}

	localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3DepthGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
	limit      *int32
}

func (r ApiApiV3DepthGetRequest) Symbol(symbol string) ApiApiV3DepthGetRequest {
	r.symbol = &symbol
	return r
}
func (r ApiApiV3DepthGetRequest) Limit(limit int32) ApiApiV3DepthGetRequest {
	r.limit = &limit
	return r
}

func (r ApiApiV3DepthGetRequest) Execute() (InlineResponse2002, *_nethttp.Response, error) {
	return r.ApiService.ApiV3DepthGetExecute(r)
}

/*
 * ApiV3DepthGet Order Book
 *
| Limit               | Weight  |
| -------------       |---------|
| 5, 10, 20, 50, 100  | 1       |
| 500                 | 5       |
| 1000                | 10      |
| 5000                | 50      |
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3DepthGetRequest
*/
func (a *MarketDataApiService) ApiV3DepthGet(ctx _context.Context) ApiApiV3DepthGetRequest {
	return ApiApiV3DepthGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2002
 */
func (a *MarketDataApiService) ApiV3DepthGetExecute(r ApiApiV3DepthGetRequest) (InlineResponse2002, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2002
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3DepthGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/depth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}

	localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3ExchangeInfoGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
}

func (r ApiApiV3ExchangeInfoGetRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.ApiV3ExchangeInfoGetExecute(r)
}

/*
 * ApiV3ExchangeInfoGet Exchange Information
 * Current exchange trading rules and symbol information

Weight 1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3ExchangeInfoGetRequest
*/
func (a *MarketDataApiService) ApiV3ExchangeInfoGet(ctx _context.Context) ApiApiV3ExchangeInfoGetRequest {
	return ApiApiV3ExchangeInfoGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2001
 */
func (a *MarketDataApiService) ApiV3ExchangeInfoGetExecute(r ApiApiV3ExchangeInfoGetRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3ExchangeInfoGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/exchangeInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3HistoricalTradesGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
	limit      *int32
	fromId     *int32
}

func (r ApiApiV3HistoricalTradesGetRequest) Symbol(symbol string) ApiApiV3HistoricalTradesGetRequest {
	r.symbol = &symbol
	return r
}
func (r ApiApiV3HistoricalTradesGetRequest) Limit(limit int32) ApiApiV3HistoricalTradesGetRequest {
	r.limit = &limit
	return r
}
func (r ApiApiV3HistoricalTradesGetRequest) FromId(fromId int32) ApiApiV3HistoricalTradesGetRequest {
	r.fromId = &fromId
	return r
}

func (r ApiApiV3HistoricalTradesGetRequest) Execute() ([]Trade, *_nethttp.Response, error) {
	return r.ApiService.ApiV3HistoricalTradesGetExecute(r)
}

/*
 * ApiV3HistoricalTradesGet Old Trade Lookup
 * Get older market trades.

`X-MBX-APIKEY` required in header

Weight 5
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3HistoricalTradesGetRequest
*/
func (a *MarketDataApiService) ApiV3HistoricalTradesGet(ctx _context.Context) ApiApiV3HistoricalTradesGetRequest {
	return ApiApiV3HistoricalTradesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []Trade
 */
func (a *MarketDataApiService) ApiV3HistoricalTradesGetExecute(r ApiApiV3HistoricalTradesGetRequest) ([]Trade, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Trade
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3HistoricalTradesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/historicalTrades"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}

	localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.fromId != nil {
		localVarQueryParams.Add("fromId", parameterToString(*r.fromId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-MBX-APIKEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3KlinesGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
	interval   *string
	startTime  *int32
	endTime    *int32
	limit      *int32
}

func (r ApiApiV3KlinesGetRequest) Symbol(symbol string) ApiApiV3KlinesGetRequest {
	r.symbol = &symbol
	return r
}
func (r ApiApiV3KlinesGetRequest) Interval(interval string) ApiApiV3KlinesGetRequest {
	r.interval = &interval
	return r
}
func (r ApiApiV3KlinesGetRequest) StartTime(startTime int32) ApiApiV3KlinesGetRequest {
	r.startTime = &startTime
	return r
}
func (r ApiApiV3KlinesGetRequest) EndTime(endTime int32) ApiApiV3KlinesGetRequest {
	r.endTime = &endTime
	return r
}
func (r ApiApiV3KlinesGetRequest) Limit(limit int32) ApiApiV3KlinesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiApiV3KlinesGetRequest) Execute() ([]map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.ApiV3KlinesGetExecute(r)
}

/*
 * ApiV3KlinesGet Kline/Candlestick Data
 * Kline/candlestick bars for a symbol.\
Klines are uniquely identified by their open time.

Weight 1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3KlinesGetRequest
*/
func (a *MarketDataApiService) ApiV3KlinesGet(ctx _context.Context) ApiApiV3KlinesGetRequest {
	return ApiApiV3KlinesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []map[string]interface{}
 */
func (a *MarketDataApiService) ApiV3KlinesGetExecute(r ApiApiV3KlinesGetRequest) ([]map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3KlinesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/klines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.interval == nil {
		return localVarReturnValue, nil, reportError("interval is required and must be specified")
	}

	localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	localVarQueryParams.Add("interval", parameterToString(*r.interval, ""))
	if r.startTime != nil {
		localVarQueryParams.Add("startTime", parameterToString(*r.startTime, ""))
	}
	if r.endTime != nil {
		localVarQueryParams.Add("endTime", parameterToString(*r.endTime, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3PingGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
}

func (r ApiApiV3PingGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ApiV3PingGetExecute(r)
}

/*
 * ApiV3PingGet Test Connectivity
 * Test connectivity to the Rest API.

Weight 1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3PingGetRequest
*/
func (a *MarketDataApiService) ApiV3PingGet(ctx _context.Context) ApiApiV3PingGetRequest {
	return ApiApiV3PingGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *MarketDataApiService) ApiV3PingGetExecute(r ApiApiV3PingGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3PingGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/ping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV3Ticker24hrGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
}

func (r ApiApiV3Ticker24hrGetRequest) Symbol(symbol string) ApiApiV3Ticker24hrGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiApiV3Ticker24hrGetRequest) Execute() (Ticker24HourResponse, *_nethttp.Response, error) {
	return r.ApiService.ApiV3Ticker24hrGetExecute(r)
}

/*
 * ApiV3Ticker24hrGet 24hr Ticker Price Change Statistics
 * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.

Weight:\
`1` for a single symbol;\
`40` when the symbol parameter is omitted
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3Ticker24hrGetRequest
*/
func (a *MarketDataApiService) ApiV3Ticker24hrGet(ctx _context.Context) ApiApiV3Ticker24hrGetRequest {
	return ApiApiV3Ticker24hrGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return Ticker24HourResponse
 */
func (a *MarketDataApiService) ApiV3Ticker24hrGetExecute(r ApiApiV3Ticker24hrGetRequest) (Ticker24HourResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Ticker24HourResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3Ticker24hrGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/ticker/24hr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.symbol != nil {
		localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3TickerBookTickerGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
}

func (r ApiApiV3TickerBookTickerGetRequest) Symbol(symbol string) ApiApiV3TickerBookTickerGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiApiV3TickerBookTickerGetRequest) Execute() (BookTickerResponse, *_nethttp.Response, error) {
	return r.ApiService.ApiV3TickerBookTickerGetExecute(r)
}

/*
 * ApiV3TickerBookTickerGet Symbol Order Book Ticker
 * Best price/qty on the order book for a symbol or symbols.

Weight:\
1 for a single symbol;\
40 when the symbol parameter is omitted
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3TickerBookTickerGetRequest
*/
func (a *MarketDataApiService) ApiV3TickerBookTickerGet(ctx _context.Context) ApiApiV3TickerBookTickerGetRequest {
	return ApiApiV3TickerBookTickerGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return BookTickerResponse
 */
func (a *MarketDataApiService) ApiV3TickerBookTickerGetExecute(r ApiApiV3TickerBookTickerGetRequest) (BookTickerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BookTickerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3TickerBookTickerGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/ticker/bookTicker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.symbol != nil {
		localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3TickerPriceGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
}

func (r ApiApiV3TickerPriceGetRequest) Symbol(symbol string) ApiApiV3TickerPriceGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiApiV3TickerPriceGetRequest) Execute() (PriceTickerResponse, *_nethttp.Response, error) {
	return r.ApiService.ApiV3TickerPriceGetExecute(r)
}

/*
 * ApiV3TickerPriceGet Symbol Price Ticker
 * Latest price for a symbol or symbols.

Weight:\
`1` for a single symbol;\
`2` when the symbol parameter is omitted
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3TickerPriceGetRequest
*/
func (a *MarketDataApiService) ApiV3TickerPriceGet(ctx _context.Context) ApiApiV3TickerPriceGetRequest {
	return ApiApiV3TickerPriceGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return PriceTickerResponse
 */
func (a *MarketDataApiService) ApiV3TickerPriceGetExecute(r ApiApiV3TickerPriceGetRequest) (PriceTickerResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PriceTickerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3TickerPriceGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/ticker/price"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.symbol != nil {
		localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3TimeGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
}

func (r ApiApiV3TimeGetRequest) Execute() (InlineResponse200, *_nethttp.Response, error) {
	return r.ApiService.ApiV3TimeGetExecute(r)
}

/*
 * ApiV3TimeGet Check Server Time
 * Test connectivity to the Rest API and get the current server time.

Weight 1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3TimeGetRequest
*/
func (a *MarketDataApiService) ApiV3TimeGet(ctx _context.Context) ApiApiV3TimeGetRequest {
	return ApiApiV3TimeGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse200
 */
func (a *MarketDataApiService) ApiV3TimeGetExecute(r ApiApiV3TimeGetRequest) (InlineResponse200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3TimeGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/time"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV3TradesGetRequest struct {
	ctx        _context.Context
	ApiService MarketDataApi
	symbol     *string
	limit      *int32
}

func (r ApiApiV3TradesGetRequest) Symbol(symbol string) ApiApiV3TradesGetRequest {
	r.symbol = &symbol
	return r
}
func (r ApiApiV3TradesGetRequest) Limit(limit int32) ApiApiV3TradesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiApiV3TradesGetRequest) Execute() ([]Trade, *_nethttp.Response, error) {
	return r.ApiService.ApiV3TradesGetExecute(r)
}

/*
 * ApiV3TradesGet Recent Trades List
 * Get recent trades (up to last 500).

Weight 1
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiV3TradesGetRequest
*/
func (a *MarketDataApiService) ApiV3TradesGet(ctx _context.Context) ApiApiV3TradesGetRequest {
	return ApiApiV3TradesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []Trade
 */
func (a *MarketDataApiService) ApiV3TradesGetExecute(r ApiApiV3TradesGetRequest) ([]Trade, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Trade
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketDataApiService.ApiV3TradesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/trades"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}

	localVarQueryParams.Add("symbol", parameterToString(*r.symbol, ""))
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
