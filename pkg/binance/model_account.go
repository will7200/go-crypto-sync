/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// Account struct for Account
type Account struct {
	MakerCommission  *int32             `json:"makerCommission,omitempty"`
	TakerCommission  *int32             `json:"takerCommission,omitempty"`
	BuyerCommission  *int32             `json:"buyerCommission,omitempty"`
	SellerCommission *int32             `json:"sellerCommission,omitempty"`
	CanTrade         *bool              `json:"canTrade,omitempty"`
	CanWithdraw      *bool              `json:"canWithdraw,omitempty"`
	CanDeposit       *bool              `json:"canDeposit,omitempty"`
	UpdateTime       *int64             `json:"updateTime,omitempty"`
	AccountType      *string            `json:"accountType,omitempty"`
	Balances         *[]AccountBalances `json:"balances,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount() *Account {
	this := Account{}
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetMakerCommission returns the MakerCommission field value if set, zero value otherwise.
func (o *Account) GetMakerCommission() int32 {
	if o == nil || o.MakerCommission == nil {
		var ret int32
		return ret
	}
	return *o.MakerCommission
}

// GetMakerCommissionOk returns a tuple with the MakerCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMakerCommissionOk() (*int32, bool) {
	if o == nil || o.MakerCommission == nil {
		return nil, false
	}
	return o.MakerCommission, true
}

// HasMakerCommission returns a boolean if a field has been set.
func (o *Account) HasMakerCommission() bool {
	if o != nil && o.MakerCommission != nil {
		return true
	}

	return false
}

// SetMakerCommission gets a reference to the given int32 and assigns it to the MakerCommission field.
func (o *Account) SetMakerCommission(v int32) {
	o.MakerCommission = &v
}

// GetTakerCommission returns the TakerCommission field value if set, zero value otherwise.
func (o *Account) GetTakerCommission() int32 {
	if o == nil || o.TakerCommission == nil {
		var ret int32
		return ret
	}
	return *o.TakerCommission
}

// GetTakerCommissionOk returns a tuple with the TakerCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetTakerCommissionOk() (*int32, bool) {
	if o == nil || o.TakerCommission == nil {
		return nil, false
	}
	return o.TakerCommission, true
}

// HasTakerCommission returns a boolean if a field has been set.
func (o *Account) HasTakerCommission() bool {
	if o != nil && o.TakerCommission != nil {
		return true
	}

	return false
}

// SetTakerCommission gets a reference to the given int32 and assigns it to the TakerCommission field.
func (o *Account) SetTakerCommission(v int32) {
	o.TakerCommission = &v
}

// GetBuyerCommission returns the BuyerCommission field value if set, zero value otherwise.
func (o *Account) GetBuyerCommission() int32 {
	if o == nil || o.BuyerCommission == nil {
		var ret int32
		return ret
	}
	return *o.BuyerCommission
}

// GetBuyerCommissionOk returns a tuple with the BuyerCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetBuyerCommissionOk() (*int32, bool) {
	if o == nil || o.BuyerCommission == nil {
		return nil, false
	}
	return o.BuyerCommission, true
}

// HasBuyerCommission returns a boolean if a field has been set.
func (o *Account) HasBuyerCommission() bool {
	if o != nil && o.BuyerCommission != nil {
		return true
	}

	return false
}

// SetBuyerCommission gets a reference to the given int32 and assigns it to the BuyerCommission field.
func (o *Account) SetBuyerCommission(v int32) {
	o.BuyerCommission = &v
}

// GetSellerCommission returns the SellerCommission field value if set, zero value otherwise.
func (o *Account) GetSellerCommission() int32 {
	if o == nil || o.SellerCommission == nil {
		var ret int32
		return ret
	}
	return *o.SellerCommission
}

// GetSellerCommissionOk returns a tuple with the SellerCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetSellerCommissionOk() (*int32, bool) {
	if o == nil || o.SellerCommission == nil {
		return nil, false
	}
	return o.SellerCommission, true
}

// HasSellerCommission returns a boolean if a field has been set.
func (o *Account) HasSellerCommission() bool {
	if o != nil && o.SellerCommission != nil {
		return true
	}

	return false
}

// SetSellerCommission gets a reference to the given int32 and assigns it to the SellerCommission field.
func (o *Account) SetSellerCommission(v int32) {
	o.SellerCommission = &v
}

// GetCanTrade returns the CanTrade field value if set, zero value otherwise.
func (o *Account) GetCanTrade() bool {
	if o == nil || o.CanTrade == nil {
		var ret bool
		return ret
	}
	return *o.CanTrade
}

// GetCanTradeOk returns a tuple with the CanTrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCanTradeOk() (*bool, bool) {
	if o == nil || o.CanTrade == nil {
		return nil, false
	}
	return o.CanTrade, true
}

// HasCanTrade returns a boolean if a field has been set.
func (o *Account) HasCanTrade() bool {
	if o != nil && o.CanTrade != nil {
		return true
	}

	return false
}

// SetCanTrade gets a reference to the given bool and assigns it to the CanTrade field.
func (o *Account) SetCanTrade(v bool) {
	o.CanTrade = &v
}

// GetCanWithdraw returns the CanWithdraw field value if set, zero value otherwise.
func (o *Account) GetCanWithdraw() bool {
	if o == nil || o.CanWithdraw == nil {
		var ret bool
		return ret
	}
	return *o.CanWithdraw
}

// GetCanWithdrawOk returns a tuple with the CanWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCanWithdrawOk() (*bool, bool) {
	if o == nil || o.CanWithdraw == nil {
		return nil, false
	}
	return o.CanWithdraw, true
}

// HasCanWithdraw returns a boolean if a field has been set.
func (o *Account) HasCanWithdraw() bool {
	if o != nil && o.CanWithdraw != nil {
		return true
	}

	return false
}

// SetCanWithdraw gets a reference to the given bool and assigns it to the CanWithdraw field.
func (o *Account) SetCanWithdraw(v bool) {
	o.CanWithdraw = &v
}

// GetCanDeposit returns the CanDeposit field value if set, zero value otherwise.
func (o *Account) GetCanDeposit() bool {
	if o == nil || o.CanDeposit == nil {
		var ret bool
		return ret
	}
	return *o.CanDeposit
}

// GetCanDepositOk returns a tuple with the CanDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCanDepositOk() (*bool, bool) {
	if o == nil || o.CanDeposit == nil {
		return nil, false
	}
	return o.CanDeposit, true
}

// HasCanDeposit returns a boolean if a field has been set.
func (o *Account) HasCanDeposit() bool {
	if o != nil && o.CanDeposit != nil {
		return true
	}

	return false
}

// SetCanDeposit gets a reference to the given bool and assigns it to the CanDeposit field.
func (o *Account) SetCanDeposit(v bool) {
	o.CanDeposit = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Account) GetUpdateTime() int64 {
	if o == nil || o.UpdateTime == nil {
		var ret int64
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetUpdateTimeOk() (*int64, bool) {
	if o == nil || o.UpdateTime == nil {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Account) HasUpdateTime() bool {
	if o != nil && o.UpdateTime != nil {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given int64 and assigns it to the UpdateTime field.
func (o *Account) SetUpdateTime(v int64) {
	o.UpdateTime = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *Account) GetAccountType() string {
	if o == nil || o.AccountType == nil {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountTypeOk() (*string, bool) {
	if o == nil || o.AccountType == nil {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *Account) HasAccountType() bool {
	if o != nil && o.AccountType != nil {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *Account) SetAccountType(v string) {
	o.AccountType = &v
}

// GetBalances returns the Balances field value if set, zero value otherwise.
func (o *Account) GetBalances() []AccountBalances {
	if o == nil || o.Balances == nil {
		var ret []AccountBalances
		return ret
	}
	return *o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetBalancesOk() (*[]AccountBalances, bool) {
	if o == nil || o.Balances == nil {
		return nil, false
	}
	return o.Balances, true
}

// HasBalances returns a boolean if a field has been set.
func (o *Account) HasBalances() bool {
	if o != nil && o.Balances != nil {
		return true
	}

	return false
}

// SetBalances gets a reference to the given []AccountBalances and assigns it to the Balances field.
func (o *Account) SetBalances(v []AccountBalances) {
	o.Balances = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MakerCommission != nil {
		toSerialize["makerCommission"] = o.MakerCommission
	}
	if o.TakerCommission != nil {
		toSerialize["takerCommission"] = o.TakerCommission
	}
	if o.BuyerCommission != nil {
		toSerialize["buyerCommission"] = o.BuyerCommission
	}
	if o.SellerCommission != nil {
		toSerialize["sellerCommission"] = o.SellerCommission
	}
	if o.CanTrade != nil {
		toSerialize["canTrade"] = o.CanTrade
	}
	if o.CanWithdraw != nil {
		toSerialize["canWithdraw"] = o.CanWithdraw
	}
	if o.CanDeposit != nil {
		toSerialize["canDeposit"] = o.CanDeposit
	}
	if o.UpdateTime != nil {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if o.AccountType != nil {
		toSerialize["accountType"] = o.AccountType
	}
	if o.Balances != nil {
		toSerialize["balances"] = o.Balances
	}
	return json.Marshal(toSerialize)
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
