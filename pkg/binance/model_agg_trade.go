/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// AggTrade struct for AggTrade
type AggTrade struct {
	// trade id
	A *int32 `json:"a,omitempty"`
	// price
	P *string `json:"p,omitempty"`
	// amount of base asset
	Q *string `json:"q,omitempty"`
	// First tradeId
	F *int32 `json:"f,omitempty"`
	// Last tradeId
	L *int32 `json:"l,omitempty"`
	// Timestamp
	T *bool `json:"T,omitempty"`
	// Was the buyer the maker?
	BuyerMaker *bool `json:"m,omitempty"`
	// Was the trade the best price match?
	BestPriceMatch *bool `json:"M,omitempty"`
}

// NewAggTrade instantiates a new AggTrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggTrade() *AggTrade {
	this := AggTrade{}
	return &this
}

// NewAggTradeWithDefaults instantiates a new AggTrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggTradeWithDefaults() *AggTrade {
	this := AggTrade{}
	return &this
}

// GetA returns the A field value if set, zero value otherwise.
func (o *AggTrade) GetA() int32 {
	if o == nil || o.A == nil {
		var ret int32
		return ret
	}
	return *o.A
}

// GetAOk returns a tuple with the A field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggTrade) GetAOk() (*int32, bool) {
	if o == nil || o.A == nil {
		return nil, false
	}
	return o.A, true
}

// HasA returns a boolean if a field has been set.
func (o *AggTrade) HasA() bool {
	if o != nil && o.A != nil {
		return true
	}

	return false
}

// SetA gets a reference to the given int32 and assigns it to the A field.
func (o *AggTrade) SetA(v int32) {
	o.A = &v
}

// GetP returns the P field value if set, zero value otherwise.
func (o *AggTrade) GetP() string {
	if o == nil || o.P == nil {
		var ret string
		return ret
	}
	return *o.P
}

// GetPOk returns a tuple with the P field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggTrade) GetPOk() (*string, bool) {
	if o == nil || o.P == nil {
		return nil, false
	}
	return o.P, true
}

// HasP returns a boolean if a field has been set.
func (o *AggTrade) HasP() bool {
	if o != nil && o.P != nil {
		return true
	}

	return false
}

// SetP gets a reference to the given string and assigns it to the P field.
func (o *AggTrade) SetP(v string) {
	o.P = &v
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *AggTrade) GetQ() string {
	if o == nil || o.Q == nil {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggTrade) GetQOk() (*string, bool) {
	if o == nil || o.Q == nil {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *AggTrade) HasQ() bool {
	if o != nil && o.Q != nil {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *AggTrade) SetQ(v string) {
	o.Q = &v
}

// GetF returns the F field value if set, zero value otherwise.
func (o *AggTrade) GetF() int32 {
	if o == nil || o.F == nil {
		var ret int32
		return ret
	}
	return *o.F
}

// GetFOk returns a tuple with the F field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggTrade) GetFOk() (*int32, bool) {
	if o == nil || o.F == nil {
		return nil, false
	}
	return o.F, true
}

// HasF returns a boolean if a field has been set.
func (o *AggTrade) HasF() bool {
	if o != nil && o.F != nil {
		return true
	}

	return false
}

// SetF gets a reference to the given int32 and assigns it to the F field.
func (o *AggTrade) SetF(v int32) {
	o.F = &v
}

// GetL returns the L field value if set, zero value otherwise.
func (o *AggTrade) GetL() int32 {
	if o == nil || o.L == nil {
		var ret int32
		return ret
	}
	return *o.L
}

// GetLOk returns a tuple with the L field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggTrade) GetLOk() (*int32, bool) {
	if o == nil || o.L == nil {
		return nil, false
	}
	return o.L, true
}

// HasL returns a boolean if a field has been set.
func (o *AggTrade) HasL() bool {
	if o != nil && o.L != nil {
		return true
	}

	return false
}

// SetL gets a reference to the given int32 and assigns it to the L field.
func (o *AggTrade) SetL(v int32) {
	o.L = &v
}

// GetT returns the T field value if set, zero value otherwise.
func (o *AggTrade) GetT() bool {
	if o == nil || o.T == nil {
		var ret bool
		return ret
	}
	return *o.T
}

// GetTOk returns a tuple with the T field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggTrade) GetTOk() (*bool, bool) {
	if o == nil || o.T == nil {
		return nil, false
	}
	return o.T, true
}

// HasT returns a boolean if a field has been set.
func (o *AggTrade) HasT() bool {
	if o != nil && o.T != nil {
		return true
	}

	return false
}

// SetT gets a reference to the given bool and assigns it to the T field.
func (o *AggTrade) SetT(v bool) {
	o.T = &v
}

// GetBuyerMaker returns the BuyerMaker field value if set, zero value otherwise.
func (o *AggTrade) GetBuyerMaker() bool {
	if o == nil || o.BuyerMaker == nil {
		var ret bool
		return ret
	}
	return *o.BuyerMaker
}

// GetBuyerMakerOk returns a tuple with the BuyerMaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggTrade) GetBuyerMakerOk() (*bool, bool) {
	if o == nil || o.BuyerMaker == nil {
		return nil, false
	}
	return o.BuyerMaker, true
}

// HasBuyerMaker returns a boolean if a field has been set.
func (o *AggTrade) HasBuyerMaker() bool {
	if o != nil && o.BuyerMaker != nil {
		return true
	}

	return false
}

// SetBuyerMaker gets a reference to the given bool and assigns it to the BuyerMaker field.
func (o *AggTrade) SetBuyerMaker(v bool) {
	o.BuyerMaker = &v
}

// GetBestPriceMatch returns the BestPriceMatch field value if set, zero value otherwise.
func (o *AggTrade) GetBestPriceMatch() bool {
	if o == nil || o.BestPriceMatch == nil {
		var ret bool
		return ret
	}
	return *o.BestPriceMatch
}

// GetBestPriceMatchOk returns a tuple with the BestPriceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggTrade) GetBestPriceMatchOk() (*bool, bool) {
	if o == nil || o.BestPriceMatch == nil {
		return nil, false
	}
	return o.BestPriceMatch, true
}

// HasBestPriceMatch returns a boolean if a field has been set.
func (o *AggTrade) HasBestPriceMatch() bool {
	if o != nil && o.BestPriceMatch != nil {
		return true
	}

	return false
}

// SetBestPriceMatch gets a reference to the given bool and assigns it to the BestPriceMatch field.
func (o *AggTrade) SetBestPriceMatch(v bool) {
	o.BestPriceMatch = &v
}

func (o AggTrade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.A != nil {
		toSerialize["a"] = o.A
	}
	if o.P != nil {
		toSerialize["p"] = o.P
	}
	if o.Q != nil {
		toSerialize["q"] = o.Q
	}
	if o.F != nil {
		toSerialize["f"] = o.F
	}
	if o.L != nil {
		toSerialize["l"] = o.L
	}
	if o.T != nil {
		toSerialize["T"] = o.T
	}
	if o.BuyerMaker != nil {
		toSerialize["m"] = o.BuyerMaker
	}
	if o.BestPriceMatch != nil {
		toSerialize["M"] = o.BestPriceMatch
	}
	return json.Marshal(toSerialize)
}

type NullableAggTrade struct {
	value *AggTrade
	isSet bool
}

func (v NullableAggTrade) Get() *AggTrade {
	return v.value
}

func (v *NullableAggTrade) Set(val *AggTrade) {
	v.value = val
	v.isSet = true
}

func (v NullableAggTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableAggTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggTrade(val *AggTrade) *NullableAggTrade {
	return &NullableAggTrade{value: val, isSet: true}
}

func (v NullableAggTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
