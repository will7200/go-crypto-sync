/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// BookTickerList struct for BookTickerList
type BookTickerList struct {
	Items []BookTicker
}

// NewBookTickerList instantiates a new BookTickerList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookTickerList() *BookTickerList {
	this := BookTickerList{}
	return &this
}

// NewBookTickerListWithDefaults instantiates a new BookTickerList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookTickerListWithDefaults() *BookTickerList {
	this := BookTickerList{}
	return &this
}

func (o BookTickerList) MarshalJSON() ([]byte, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return json.Marshal(toSerialize)
}

func (o *BookTickerList) UnmarshalJSON(bytes []byte) (err error) {
	return json.Unmarshal(bytes, &o.Items)
}

type NullableBookTickerList struct {
	value *BookTickerList
	isSet bool
}

func (v NullableBookTickerList) Get() *BookTickerList {
	return v.value
}

func (v *NullableBookTickerList) Set(val *BookTickerList) {
	v.value = val
	v.isSet = true
}

func (v NullableBookTickerList) IsSet() bool {
	return v.isSet
}

func (v *NullableBookTickerList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookTickerList(val *BookTickerList) *NullableBookTickerList {
	return &NullableBookTickerList{value: val, isSet: true}
}

func (v NullableBookTickerList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookTickerList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
