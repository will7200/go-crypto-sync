/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// InlineResponse20015 struct for InlineResponse20015
type InlineResponse20015 struct {
	Id *string `json:"id,omitempty"`
}

// NewInlineResponse20015 instantiates a new InlineResponse20015 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20015() *InlineResponse20015 {
	this := InlineResponse20015{}
	return &this
}

// NewInlineResponse20015WithDefaults instantiates a new InlineResponse20015 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20015WithDefaults() *InlineResponse20015 {
	this := InlineResponse20015{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse20015) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse20015) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineResponse20015) SetId(v string) {
	o.Id = &v
}

func (o InlineResponse20015) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20015 struct {
	value *InlineResponse20015
	isSet bool
}

func (v NullableInlineResponse20015) Get() *InlineResponse20015 {
	return v.value
}

func (v *NullableInlineResponse20015) Set(val *InlineResponse20015) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20015) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20015) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20015(val *InlineResponse20015) *NullableInlineResponse20015 {
	return &NullableInlineResponse20015{value: val, isSet: true}
}

func (v NullableInlineResponse20015) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20015) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
