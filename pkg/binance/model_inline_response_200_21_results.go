/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// InlineResponse20021Results struct for InlineResponse20021Results
type InlineResponse20021Results struct {
	Total *int32                            `json:"total,omitempty"`
	Rows  *[]InlineResponse20021ResultsRows `json:"rows,omitempty"`
}

// NewInlineResponse20021Results instantiates a new InlineResponse20021Results object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20021Results() *InlineResponse20021Results {
	this := InlineResponse20021Results{}
	return &this
}

// NewInlineResponse20021ResultsWithDefaults instantiates a new InlineResponse20021Results object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20021ResultsWithDefaults() *InlineResponse20021Results {
	this := InlineResponse20021Results{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *InlineResponse20021Results) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021Results) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *InlineResponse20021Results) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *InlineResponse20021Results) SetTotal(v int32) {
	o.Total = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *InlineResponse20021Results) GetRows() []InlineResponse20021ResultsRows {
	if o == nil || o.Rows == nil {
		var ret []InlineResponse20021ResultsRows
		return ret
	}
	return *o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021Results) GetRowsOk() (*[]InlineResponse20021ResultsRows, bool) {
	if o == nil || o.Rows == nil {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *InlineResponse20021Results) HasRows() bool {
	if o != nil && o.Rows != nil {
		return true
	}

	return false
}

// SetRows gets a reference to the given []InlineResponse20021ResultsRows and assigns it to the Rows field.
func (o *InlineResponse20021Results) SetRows(v []InlineResponse20021ResultsRows) {
	o.Rows = &v
}

func (o InlineResponse20021Results) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Rows != nil {
		toSerialize["rows"] = o.Rows
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20021Results struct {
	value *InlineResponse20021Results
	isSet bool
}

func (v NullableInlineResponse20021Results) Get() *InlineResponse20021Results {
	return v.value
}

func (v *NullableInlineResponse20021Results) Set(val *InlineResponse20021Results) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20021Results) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20021Results) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20021Results(val *InlineResponse20021Results) *NullableInlineResponse20021Results {
	return &NullableInlineResponse20021Results{value: val, isSet: true}
}

func (v NullableInlineResponse20021Results) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20021Results) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
