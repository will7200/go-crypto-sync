/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// InlineResponse20025 struct for InlineResponse20025
type InlineResponse20025 struct {
	Success  *bool                          `json:"success,omitempty"`
	TradeFee *[]InlineResponse20025TradeFee `json:"tradeFee,omitempty"`
}

// NewInlineResponse20025 instantiates a new InlineResponse20025 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20025() *InlineResponse20025 {
	this := InlineResponse20025{}
	return &this
}

// NewInlineResponse20025WithDefaults instantiates a new InlineResponse20025 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20025WithDefaults() *InlineResponse20025 {
	this := InlineResponse20025{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *InlineResponse20025) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20025) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *InlineResponse20025) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *InlineResponse20025) SetSuccess(v bool) {
	o.Success = &v
}

// GetTradeFee returns the TradeFee field value if set, zero value otherwise.
func (o *InlineResponse20025) GetTradeFee() []InlineResponse20025TradeFee {
	if o == nil || o.TradeFee == nil {
		var ret []InlineResponse20025TradeFee
		return ret
	}
	return *o.TradeFee
}

// GetTradeFeeOk returns a tuple with the TradeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20025) GetTradeFeeOk() (*[]InlineResponse20025TradeFee, bool) {
	if o == nil || o.TradeFee == nil {
		return nil, false
	}
	return o.TradeFee, true
}

// HasTradeFee returns a boolean if a field has been set.
func (o *InlineResponse20025) HasTradeFee() bool {
	if o != nil && o.TradeFee != nil {
		return true
	}

	return false
}

// SetTradeFee gets a reference to the given []InlineResponse20025TradeFee and assigns it to the TradeFee field.
func (o *InlineResponse20025) SetTradeFee(v []InlineResponse20025TradeFee) {
	o.TradeFee = &v
}

func (o InlineResponse20025) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.TradeFee != nil {
		toSerialize["tradeFee"] = o.TradeFee
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20025 struct {
	value *InlineResponse20025
	isSet bool
}

func (v NullableInlineResponse20025) Get() *InlineResponse20025 {
	return v.value
}

func (v *NullableInlineResponse20025) Set(val *InlineResponse20025) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20025) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20025) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20025(val *InlineResponse20025) *NullableInlineResponse20025 {
	return &NullableInlineResponse20025{value: val, isSet: true}
}

func (v NullableInlineResponse20025) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20025) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
