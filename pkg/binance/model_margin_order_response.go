/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
	"fmt"
)

//
// MarginOrderResponse - struct for MarginOrderResponse
type MarginOrderResponse struct {
	MarginOrderResponseAck    *MarginOrderResponseAck
	MarginOrderResponseFull   *MarginOrderResponseFull
	MarginOrderResponseResult *MarginOrderResponseResult
}

// MarginOrderResponseAckAsMarginOrderResponse is a convenience function that returns MarginOrderResponseAck wrapped in MarginOrderResponse
func MarginOrderResponseAckAsMarginOrderResponse(v *MarginOrderResponseAck) MarginOrderResponse {
	return MarginOrderResponse{MarginOrderResponseAck: v}
}

// MarginOrderResponseFullAsMarginOrderResponse is a convenience function that returns MarginOrderResponseFull wrapped in MarginOrderResponse
func MarginOrderResponseFullAsMarginOrderResponse(v *MarginOrderResponseFull) MarginOrderResponse {
	return MarginOrderResponse{MarginOrderResponseFull: v}
}

// MarginOrderResponseResultAsMarginOrderResponse is a convenience function that returns MarginOrderResponseResult wrapped in MarginOrderResponse
func MarginOrderResponseResultAsMarginOrderResponse(v *MarginOrderResponseResult) MarginOrderResponse {
	return MarginOrderResponse{MarginOrderResponseResult: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MarginOrderResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MarginOrderResponseAck
	err = json.Unmarshal(data, &dst.MarginOrderResponseAck)
	if err == nil {
		jsonMarginOrderResponseAck, _ := json.Marshal(dst.MarginOrderResponseAck)
		if string(jsonMarginOrderResponseAck) == "{}" { // empty struct
			dst.MarginOrderResponseAck = nil
		} else {
			match++
		}
	} else {
		dst.MarginOrderResponseAck = nil
	}

	// try to unmarshal data into MarginOrderResponseFull
	err = json.Unmarshal(data, &dst.MarginOrderResponseFull)
	if err == nil {
		jsonMarginOrderResponseFull, _ := json.Marshal(dst.MarginOrderResponseFull)
		if string(jsonMarginOrderResponseFull) == "{}" { // empty struct
			dst.MarginOrderResponseFull = nil
		} else {
			match++
		}
	} else {
		dst.MarginOrderResponseFull = nil
	}

	// try to unmarshal data into MarginOrderResponseResult
	err = json.Unmarshal(data, &dst.MarginOrderResponseResult)
	if err == nil {
		jsonMarginOrderResponseResult, _ := json.Marshal(dst.MarginOrderResponseResult)
		if string(jsonMarginOrderResponseResult) == "{}" { // empty struct
			dst.MarginOrderResponseResult = nil
		} else {
			match++
		}
	} else {
		dst.MarginOrderResponseResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MarginOrderResponseAck = nil
		dst.MarginOrderResponseFull = nil
		dst.MarginOrderResponseResult = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(MarginOrderResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(MarginOrderResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MarginOrderResponse) MarshalJSON() ([]byte, error) {
	if src.MarginOrderResponseAck != nil {
		return json.Marshal(&src.MarginOrderResponseAck)
	}

	if src.MarginOrderResponseFull != nil {
		return json.Marshal(&src.MarginOrderResponseFull)
	}

	if src.MarginOrderResponseResult != nil {
		return json.Marshal(&src.MarginOrderResponseResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MarginOrderResponse) GetActualInstance() interface{} {
	if obj.MarginOrderResponseAck != nil {
		return obj.MarginOrderResponseAck
	}

	if obj.MarginOrderResponseFull != nil {
		return obj.MarginOrderResponseFull
	}

	if obj.MarginOrderResponseResult != nil {
		return obj.MarginOrderResponseResult
	}

	// all schemas are nil
	return nil
}

type NullableMarginOrderResponse struct {
	value *MarginOrderResponse
	isSet bool
}

func (v NullableMarginOrderResponse) Get() *MarginOrderResponse {
	return v.value
}

func (v *NullableMarginOrderResponse) Set(val *MarginOrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMarginOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMarginOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarginOrderResponse(val *MarginOrderResponse) *NullableMarginOrderResponse {
	return &NullableMarginOrderResponse{value: val, isSet: true}
}

func (v NullableMarginOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarginOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
