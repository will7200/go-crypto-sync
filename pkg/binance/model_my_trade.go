/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// MyTrade struct for MyTrade
type MyTrade struct {
	Symbol *string `json:"symbol,omitempty"`
	// trade id
	Id          *int32 `json:"id,omitempty"`
	OrderId     *int32 `json:"orderId,omitempty"`
	OrderListId *int32 `json:"orderListId,omitempty"`
	// price
	Price *string `json:"price,omitempty"`
	// amount of base asset
	Qty *string `json:"qty,omitempty"`
	// amount of quote asset
	QuoteQty        *string `json:"quoteQty,omitempty"`
	Commission      *string `json:"commission,omitempty"`
	CommissionAsset *string `json:"commissionAsset,omitempty"`
	// trade timestamp
	Time        *int32 `json:"time,omitempty"`
	IsBuyer     *bool  `json:"isBuyer,omitempty"`
	IsMaker     *bool  `json:"isMaker,omitempty"`
	IsBestMatch *bool  `json:"isBestMatch,omitempty"`
}

// NewMyTrade instantiates a new MyTrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMyTrade() *MyTrade {
	this := MyTrade{}
	return &this
}

// NewMyTradeWithDefaults instantiates a new MyTrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMyTradeWithDefaults() *MyTrade {
	this := MyTrade{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *MyTrade) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *MyTrade) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *MyTrade) SetSymbol(v string) {
	o.Symbol = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MyTrade) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MyTrade) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MyTrade) SetId(v int32) {
	o.Id = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *MyTrade) GetOrderId() int32 {
	if o == nil || o.OrderId == nil {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetOrderIdOk() (*int32, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *MyTrade) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *MyTrade) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetOrderListId returns the OrderListId field value if set, zero value otherwise.
func (o *MyTrade) GetOrderListId() int32 {
	if o == nil || o.OrderListId == nil {
		var ret int32
		return ret
	}
	return *o.OrderListId
}

// GetOrderListIdOk returns a tuple with the OrderListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetOrderListIdOk() (*int32, bool) {
	if o == nil || o.OrderListId == nil {
		return nil, false
	}
	return o.OrderListId, true
}

// HasOrderListId returns a boolean if a field has been set.
func (o *MyTrade) HasOrderListId() bool {
	if o != nil && o.OrderListId != nil {
		return true
	}

	return false
}

// SetOrderListId gets a reference to the given int32 and assigns it to the OrderListId field.
func (o *MyTrade) SetOrderListId(v int32) {
	o.OrderListId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *MyTrade) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *MyTrade) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *MyTrade) SetPrice(v string) {
	o.Price = &v
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *MyTrade) GetQty() string {
	if o == nil || o.Qty == nil {
		var ret string
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetQtyOk() (*string, bool) {
	if o == nil || o.Qty == nil {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *MyTrade) HasQty() bool {
	if o != nil && o.Qty != nil {
		return true
	}

	return false
}

// SetQty gets a reference to the given string and assigns it to the Qty field.
func (o *MyTrade) SetQty(v string) {
	o.Qty = &v
}

// GetQuoteQty returns the QuoteQty field value if set, zero value otherwise.
func (o *MyTrade) GetQuoteQty() string {
	if o == nil || o.QuoteQty == nil {
		var ret string
		return ret
	}
	return *o.QuoteQty
}

// GetQuoteQtyOk returns a tuple with the QuoteQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetQuoteQtyOk() (*string, bool) {
	if o == nil || o.QuoteQty == nil {
		return nil, false
	}
	return o.QuoteQty, true
}

// HasQuoteQty returns a boolean if a field has been set.
func (o *MyTrade) HasQuoteQty() bool {
	if o != nil && o.QuoteQty != nil {
		return true
	}

	return false
}

// SetQuoteQty gets a reference to the given string and assigns it to the QuoteQty field.
func (o *MyTrade) SetQuoteQty(v string) {
	o.QuoteQty = &v
}

// GetCommission returns the Commission field value if set, zero value otherwise.
func (o *MyTrade) GetCommission() string {
	if o == nil || o.Commission == nil {
		var ret string
		return ret
	}
	return *o.Commission
}

// GetCommissionOk returns a tuple with the Commission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetCommissionOk() (*string, bool) {
	if o == nil || o.Commission == nil {
		return nil, false
	}
	return o.Commission, true
}

// HasCommission returns a boolean if a field has been set.
func (o *MyTrade) HasCommission() bool {
	if o != nil && o.Commission != nil {
		return true
	}

	return false
}

// SetCommission gets a reference to the given string and assigns it to the Commission field.
func (o *MyTrade) SetCommission(v string) {
	o.Commission = &v
}

// GetCommissionAsset returns the CommissionAsset field value if set, zero value otherwise.
func (o *MyTrade) GetCommissionAsset() string {
	if o == nil || o.CommissionAsset == nil {
		var ret string
		return ret
	}
	return *o.CommissionAsset
}

// GetCommissionAssetOk returns a tuple with the CommissionAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetCommissionAssetOk() (*string, bool) {
	if o == nil || o.CommissionAsset == nil {
		return nil, false
	}
	return o.CommissionAsset, true
}

// HasCommissionAsset returns a boolean if a field has been set.
func (o *MyTrade) HasCommissionAsset() bool {
	if o != nil && o.CommissionAsset != nil {
		return true
	}

	return false
}

// SetCommissionAsset gets a reference to the given string and assigns it to the CommissionAsset field.
func (o *MyTrade) SetCommissionAsset(v string) {
	o.CommissionAsset = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *MyTrade) GetTime() int32 {
	if o == nil || o.Time == nil {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetTimeOk() (*int32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *MyTrade) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *MyTrade) SetTime(v int32) {
	o.Time = &v
}

// GetIsBuyer returns the IsBuyer field value if set, zero value otherwise.
func (o *MyTrade) GetIsBuyer() bool {
	if o == nil || o.IsBuyer == nil {
		var ret bool
		return ret
	}
	return *o.IsBuyer
}

// GetIsBuyerOk returns a tuple with the IsBuyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetIsBuyerOk() (*bool, bool) {
	if o == nil || o.IsBuyer == nil {
		return nil, false
	}
	return o.IsBuyer, true
}

// HasIsBuyer returns a boolean if a field has been set.
func (o *MyTrade) HasIsBuyer() bool {
	if o != nil && o.IsBuyer != nil {
		return true
	}

	return false
}

// SetIsBuyer gets a reference to the given bool and assigns it to the IsBuyer field.
func (o *MyTrade) SetIsBuyer(v bool) {
	o.IsBuyer = &v
}

// GetIsMaker returns the IsMaker field value if set, zero value otherwise.
func (o *MyTrade) GetIsMaker() bool {
	if o == nil || o.IsMaker == nil {
		var ret bool
		return ret
	}
	return *o.IsMaker
}

// GetIsMakerOk returns a tuple with the IsMaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetIsMakerOk() (*bool, bool) {
	if o == nil || o.IsMaker == nil {
		return nil, false
	}
	return o.IsMaker, true
}

// HasIsMaker returns a boolean if a field has been set.
func (o *MyTrade) HasIsMaker() bool {
	if o != nil && o.IsMaker != nil {
		return true
	}

	return false
}

// SetIsMaker gets a reference to the given bool and assigns it to the IsMaker field.
func (o *MyTrade) SetIsMaker(v bool) {
	o.IsMaker = &v
}

// GetIsBestMatch returns the IsBestMatch field value if set, zero value otherwise.
func (o *MyTrade) GetIsBestMatch() bool {
	if o == nil || o.IsBestMatch == nil {
		var ret bool
		return ret
	}
	return *o.IsBestMatch
}

// GetIsBestMatchOk returns a tuple with the IsBestMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTrade) GetIsBestMatchOk() (*bool, bool) {
	if o == nil || o.IsBestMatch == nil {
		return nil, false
	}
	return o.IsBestMatch, true
}

// HasIsBestMatch returns a boolean if a field has been set.
func (o *MyTrade) HasIsBestMatch() bool {
	if o != nil && o.IsBestMatch != nil {
		return true
	}

	return false
}

// SetIsBestMatch gets a reference to the given bool and assigns it to the IsBestMatch field.
func (o *MyTrade) SetIsBestMatch(v bool) {
	o.IsBestMatch = &v
}

func (o MyTrade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.OrderId != nil {
		toSerialize["orderId"] = o.OrderId
	}
	if o.OrderListId != nil {
		toSerialize["orderListId"] = o.OrderListId
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Qty != nil {
		toSerialize["qty"] = o.Qty
	}
	if o.QuoteQty != nil {
		toSerialize["quoteQty"] = o.QuoteQty
	}
	if o.Commission != nil {
		toSerialize["commission"] = o.Commission
	}
	if o.CommissionAsset != nil {
		toSerialize["commissionAsset"] = o.CommissionAsset
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.IsBuyer != nil {
		toSerialize["isBuyer"] = o.IsBuyer
	}
	if o.IsMaker != nil {
		toSerialize["isMaker"] = o.IsMaker
	}
	if o.IsBestMatch != nil {
		toSerialize["isBestMatch"] = o.IsBestMatch
	}
	return json.Marshal(toSerialize)
}

type NullableMyTrade struct {
	value *MyTrade
	isSet bool
}

func (v NullableMyTrade) Get() *MyTrade {
	return v.value
}

func (v *NullableMyTrade) Set(val *MyTrade) {
	v.value = val
	v.isSet = true
}

func (v NullableMyTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableMyTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMyTrade(val *MyTrade) *NullableMyTrade {
	return &NullableMyTrade{value: val, isSet: true}
}

func (v NullableMyTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMyTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
