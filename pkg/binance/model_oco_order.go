/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// OCOOrder struct for OCOOrder
type OCOOrder struct {
	OrderListId       *int32                    `json:"orderListId,omitempty"`
	ContingencyType   *string                   `json:"contingencyType,omitempty"`
	ListStatusType    *string                   `json:"listStatusType,omitempty"`
	ListOrderStatus   *string                   `json:"listOrderStatus,omitempty"`
	ListClientOrderId *string                   `json:"listClientOrderId,omitempty"`
	TransactionTime   *int32                    `json:"transactionTime,omitempty"`
	Symbol            *string                   `json:"symbol,omitempty"`
	Orders            *[]map[string]interface{} `json:"orders,omitempty"`
}

// NewOCOOrder instantiates a new OCOOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOCOOrder() *OCOOrder {
	this := OCOOrder{}
	return &this
}

// NewOCOOrderWithDefaults instantiates a new OCOOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOCOOrderWithDefaults() *OCOOrder {
	this := OCOOrder{}
	return &this
}

// GetOrderListId returns the OrderListId field value if set, zero value otherwise.
func (o *OCOOrder) GetOrderListId() int32 {
	if o == nil || o.OrderListId == nil {
		var ret int32
		return ret
	}
	return *o.OrderListId
}

// GetOrderListIdOk returns a tuple with the OrderListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCOOrder) GetOrderListIdOk() (*int32, bool) {
	if o == nil || o.OrderListId == nil {
		return nil, false
	}
	return o.OrderListId, true
}

// HasOrderListId returns a boolean if a field has been set.
func (o *OCOOrder) HasOrderListId() bool {
	if o != nil && o.OrderListId != nil {
		return true
	}

	return false
}

// SetOrderListId gets a reference to the given int32 and assigns it to the OrderListId field.
func (o *OCOOrder) SetOrderListId(v int32) {
	o.OrderListId = &v
}

// GetContingencyType returns the ContingencyType field value if set, zero value otherwise.
func (o *OCOOrder) GetContingencyType() string {
	if o == nil || o.ContingencyType == nil {
		var ret string
		return ret
	}
	return *o.ContingencyType
}

// GetContingencyTypeOk returns a tuple with the ContingencyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCOOrder) GetContingencyTypeOk() (*string, bool) {
	if o == nil || o.ContingencyType == nil {
		return nil, false
	}
	return o.ContingencyType, true
}

// HasContingencyType returns a boolean if a field has been set.
func (o *OCOOrder) HasContingencyType() bool {
	if o != nil && o.ContingencyType != nil {
		return true
	}

	return false
}

// SetContingencyType gets a reference to the given string and assigns it to the ContingencyType field.
func (o *OCOOrder) SetContingencyType(v string) {
	o.ContingencyType = &v
}

// GetListStatusType returns the ListStatusType field value if set, zero value otherwise.
func (o *OCOOrder) GetListStatusType() string {
	if o == nil || o.ListStatusType == nil {
		var ret string
		return ret
	}
	return *o.ListStatusType
}

// GetListStatusTypeOk returns a tuple with the ListStatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCOOrder) GetListStatusTypeOk() (*string, bool) {
	if o == nil || o.ListStatusType == nil {
		return nil, false
	}
	return o.ListStatusType, true
}

// HasListStatusType returns a boolean if a field has been set.
func (o *OCOOrder) HasListStatusType() bool {
	if o != nil && o.ListStatusType != nil {
		return true
	}

	return false
}

// SetListStatusType gets a reference to the given string and assigns it to the ListStatusType field.
func (o *OCOOrder) SetListStatusType(v string) {
	o.ListStatusType = &v
}

// GetListOrderStatus returns the ListOrderStatus field value if set, zero value otherwise.
func (o *OCOOrder) GetListOrderStatus() string {
	if o == nil || o.ListOrderStatus == nil {
		var ret string
		return ret
	}
	return *o.ListOrderStatus
}

// GetListOrderStatusOk returns a tuple with the ListOrderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCOOrder) GetListOrderStatusOk() (*string, bool) {
	if o == nil || o.ListOrderStatus == nil {
		return nil, false
	}
	return o.ListOrderStatus, true
}

// HasListOrderStatus returns a boolean if a field has been set.
func (o *OCOOrder) HasListOrderStatus() bool {
	if o != nil && o.ListOrderStatus != nil {
		return true
	}

	return false
}

// SetListOrderStatus gets a reference to the given string and assigns it to the ListOrderStatus field.
func (o *OCOOrder) SetListOrderStatus(v string) {
	o.ListOrderStatus = &v
}

// GetListClientOrderId returns the ListClientOrderId field value if set, zero value otherwise.
func (o *OCOOrder) GetListClientOrderId() string {
	if o == nil || o.ListClientOrderId == nil {
		var ret string
		return ret
	}
	return *o.ListClientOrderId
}

// GetListClientOrderIdOk returns a tuple with the ListClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCOOrder) GetListClientOrderIdOk() (*string, bool) {
	if o == nil || o.ListClientOrderId == nil {
		return nil, false
	}
	return o.ListClientOrderId, true
}

// HasListClientOrderId returns a boolean if a field has been set.
func (o *OCOOrder) HasListClientOrderId() bool {
	if o != nil && o.ListClientOrderId != nil {
		return true
	}

	return false
}

// SetListClientOrderId gets a reference to the given string and assigns it to the ListClientOrderId field.
func (o *OCOOrder) SetListClientOrderId(v string) {
	o.ListClientOrderId = &v
}

// GetTransactionTime returns the TransactionTime field value if set, zero value otherwise.
func (o *OCOOrder) GetTransactionTime() int32 {
	if o == nil || o.TransactionTime == nil {
		var ret int32
		return ret
	}
	return *o.TransactionTime
}

// GetTransactionTimeOk returns a tuple with the TransactionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCOOrder) GetTransactionTimeOk() (*int32, bool) {
	if o == nil || o.TransactionTime == nil {
		return nil, false
	}
	return o.TransactionTime, true
}

// HasTransactionTime returns a boolean if a field has been set.
func (o *OCOOrder) HasTransactionTime() bool {
	if o != nil && o.TransactionTime != nil {
		return true
	}

	return false
}

// SetTransactionTime gets a reference to the given int32 and assigns it to the TransactionTime field.
func (o *OCOOrder) SetTransactionTime(v int32) {
	o.TransactionTime = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OCOOrder) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCOOrder) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OCOOrder) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OCOOrder) SetSymbol(v string) {
	o.Symbol = &v
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *OCOOrder) GetOrders() []map[string]interface{} {
	if o == nil || o.Orders == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCOOrder) GetOrdersOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Orders == nil {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *OCOOrder) HasOrders() bool {
	if o != nil && o.Orders != nil {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []map[string]interface{} and assigns it to the Orders field.
func (o *OCOOrder) SetOrders(v []map[string]interface{}) {
	o.Orders = &v
}

func (o OCOOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OrderListId != nil {
		toSerialize["orderListId"] = o.OrderListId
	}
	if o.ContingencyType != nil {
		toSerialize["contingencyType"] = o.ContingencyType
	}
	if o.ListStatusType != nil {
		toSerialize["listStatusType"] = o.ListStatusType
	}
	if o.ListOrderStatus != nil {
		toSerialize["listOrderStatus"] = o.ListOrderStatus
	}
	if o.ListClientOrderId != nil {
		toSerialize["listClientOrderId"] = o.ListClientOrderId
	}
	if o.TransactionTime != nil {
		toSerialize["transactionTime"] = o.TransactionTime
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Orders != nil {
		toSerialize["orders"] = o.Orders
	}
	return json.Marshal(toSerialize)
}

type NullableOCOOrder struct {
	value *OCOOrder
	isSet bool
}

func (v NullableOCOOrder) Get() *OCOOrder {
	return v.value
}

func (v *NullableOCOOrder) Set(val *OCOOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableOCOOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOCOOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOCOOrder(val *OCOOrder) *NullableOCOOrder {
	return &NullableOCOOrder{value: val, isSet: true}
}

func (v NullableOCOOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOCOOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
