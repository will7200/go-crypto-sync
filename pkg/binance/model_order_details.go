/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// OrderDetails struct for OrderDetails
type OrderDetails struct {
	Symbol            *string `json:"symbol,omitempty"`
	OrigClientOrderId *string `json:"origClientOrderId,omitempty"`
	OrderId           *int32  `json:"orderId,omitempty"`
	// Unless OCO, value will be -1
	OrderListId         *int32   `json:"orderListId,omitempty"`
	Price               *float32 `json:"price,omitempty"`
	OrigQty             *float32 `json:"origQty,omitempty"`
	ExecutedQty         *float32 `json:"executedQty,omitempty"`
	CummulativeQuoteQty *float32 `json:"cummulativeQuoteQty,omitempty"`
	Status              *string  `json:"status,omitempty"`
	TimeInForce         *string  `json:"timeInForce,omitempty"`
	Type                *string  `json:"type,omitempty"`
	Side                *string  `json:"side,omitempty"`
	StopPrice           *float32 `json:"stopPrice,omitempty"`
	IcebergQty          *float32 `json:"icebergQty,omitempty"`
	Time                *int32   `json:"time,omitempty"`
	UpdateTime          *int32   `json:"updateTime,omitempty"`
	IsWorking           *bool    `json:"isWorking,omitempty"`
	OrigQuoteOrderQty   *float32 `json:"origQuoteOrderQty,omitempty"`
}

// NewOrderDetails instantiates a new OrderDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDetails() *OrderDetails {
	this := OrderDetails{}
	return &this
}

// NewOrderDetailsWithDefaults instantiates a new OrderDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDetailsWithDefaults() *OrderDetails {
	this := OrderDetails{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OrderDetails) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OrderDetails) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OrderDetails) SetSymbol(v string) {
	o.Symbol = &v
}

// GetOrigClientOrderId returns the OrigClientOrderId field value if set, zero value otherwise.
func (o *OrderDetails) GetOrigClientOrderId() string {
	if o == nil || o.OrigClientOrderId == nil {
		var ret string
		return ret
	}
	return *o.OrigClientOrderId
}

// GetOrigClientOrderIdOk returns a tuple with the OrigClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetOrigClientOrderIdOk() (*string, bool) {
	if o == nil || o.OrigClientOrderId == nil {
		return nil, false
	}
	return o.OrigClientOrderId, true
}

// HasOrigClientOrderId returns a boolean if a field has been set.
func (o *OrderDetails) HasOrigClientOrderId() bool {
	if o != nil && o.OrigClientOrderId != nil {
		return true
	}

	return false
}

// SetOrigClientOrderId gets a reference to the given string and assigns it to the OrigClientOrderId field.
func (o *OrderDetails) SetOrigClientOrderId(v string) {
	o.OrigClientOrderId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *OrderDetails) GetOrderId() int32 {
	if o == nil || o.OrderId == nil {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetOrderIdOk() (*int32, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *OrderDetails) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *OrderDetails) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetOrderListId returns the OrderListId field value if set, zero value otherwise.
func (o *OrderDetails) GetOrderListId() int32 {
	if o == nil || o.OrderListId == nil {
		var ret int32
		return ret
	}
	return *o.OrderListId
}

// GetOrderListIdOk returns a tuple with the OrderListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetOrderListIdOk() (*int32, bool) {
	if o == nil || o.OrderListId == nil {
		return nil, false
	}
	return o.OrderListId, true
}

// HasOrderListId returns a boolean if a field has been set.
func (o *OrderDetails) HasOrderListId() bool {
	if o != nil && o.OrderListId != nil {
		return true
	}

	return false
}

// SetOrderListId gets a reference to the given int32 and assigns it to the OrderListId field.
func (o *OrderDetails) SetOrderListId(v int32) {
	o.OrderListId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderDetails) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderDetails) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OrderDetails) SetPrice(v float32) {
	o.Price = &v
}

// GetOrigQty returns the OrigQty field value if set, zero value otherwise.
func (o *OrderDetails) GetOrigQty() float32 {
	if o == nil || o.OrigQty == nil {
		var ret float32
		return ret
	}
	return *o.OrigQty
}

// GetOrigQtyOk returns a tuple with the OrigQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetOrigQtyOk() (*float32, bool) {
	if o == nil || o.OrigQty == nil {
		return nil, false
	}
	return o.OrigQty, true
}

// HasOrigQty returns a boolean if a field has been set.
func (o *OrderDetails) HasOrigQty() bool {
	if o != nil && o.OrigQty != nil {
		return true
	}

	return false
}

// SetOrigQty gets a reference to the given float32 and assigns it to the OrigQty field.
func (o *OrderDetails) SetOrigQty(v float32) {
	o.OrigQty = &v
}

// GetExecutedQty returns the ExecutedQty field value if set, zero value otherwise.
func (o *OrderDetails) GetExecutedQty() float32 {
	if o == nil || o.ExecutedQty == nil {
		var ret float32
		return ret
	}
	return *o.ExecutedQty
}

// GetExecutedQtyOk returns a tuple with the ExecutedQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetExecutedQtyOk() (*float32, bool) {
	if o == nil || o.ExecutedQty == nil {
		return nil, false
	}
	return o.ExecutedQty, true
}

// HasExecutedQty returns a boolean if a field has been set.
func (o *OrderDetails) HasExecutedQty() bool {
	if o != nil && o.ExecutedQty != nil {
		return true
	}

	return false
}

// SetExecutedQty gets a reference to the given float32 and assigns it to the ExecutedQty field.
func (o *OrderDetails) SetExecutedQty(v float32) {
	o.ExecutedQty = &v
}

// GetCummulativeQuoteQty returns the CummulativeQuoteQty field value if set, zero value otherwise.
func (o *OrderDetails) GetCummulativeQuoteQty() float32 {
	if o == nil || o.CummulativeQuoteQty == nil {
		var ret float32
		return ret
	}
	return *o.CummulativeQuoteQty
}

// GetCummulativeQuoteQtyOk returns a tuple with the CummulativeQuoteQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetCummulativeQuoteQtyOk() (*float32, bool) {
	if o == nil || o.CummulativeQuoteQty == nil {
		return nil, false
	}
	return o.CummulativeQuoteQty, true
}

// HasCummulativeQuoteQty returns a boolean if a field has been set.
func (o *OrderDetails) HasCummulativeQuoteQty() bool {
	if o != nil && o.CummulativeQuoteQty != nil {
		return true
	}

	return false
}

// SetCummulativeQuoteQty gets a reference to the given float32 and assigns it to the CummulativeQuoteQty field.
func (o *OrderDetails) SetCummulativeQuoteQty(v float32) {
	o.CummulativeQuoteQty = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrderDetails) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrderDetails) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OrderDetails) SetStatus(v string) {
	o.Status = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *OrderDetails) GetTimeInForce() string {
	if o == nil || o.TimeInForce == nil {
		var ret string
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetTimeInForceOk() (*string, bool) {
	if o == nil || o.TimeInForce == nil {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *OrderDetails) HasTimeInForce() bool {
	if o != nil && o.TimeInForce != nil {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given string and assigns it to the TimeInForce field.
func (o *OrderDetails) SetTimeInForce(v string) {
	o.TimeInForce = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrderDetails) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrderDetails) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OrderDetails) SetType(v string) {
	o.Type = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *OrderDetails) GetSide() string {
	if o == nil || o.Side == nil {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetSideOk() (*string, bool) {
	if o == nil || o.Side == nil {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *OrderDetails) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *OrderDetails) SetSide(v string) {
	o.Side = &v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *OrderDetails) GetStopPrice() float32 {
	if o == nil || o.StopPrice == nil {
		var ret float32
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetStopPriceOk() (*float32, bool) {
	if o == nil || o.StopPrice == nil {
		return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *OrderDetails) HasStopPrice() bool {
	if o != nil && o.StopPrice != nil {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given float32 and assigns it to the StopPrice field.
func (o *OrderDetails) SetStopPrice(v float32) {
	o.StopPrice = &v
}

// GetIcebergQty returns the IcebergQty field value if set, zero value otherwise.
func (o *OrderDetails) GetIcebergQty() float32 {
	if o == nil || o.IcebergQty == nil {
		var ret float32
		return ret
	}
	return *o.IcebergQty
}

// GetIcebergQtyOk returns a tuple with the IcebergQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetIcebergQtyOk() (*float32, bool) {
	if o == nil || o.IcebergQty == nil {
		return nil, false
	}
	return o.IcebergQty, true
}

// HasIcebergQty returns a boolean if a field has been set.
func (o *OrderDetails) HasIcebergQty() bool {
	if o != nil && o.IcebergQty != nil {
		return true
	}

	return false
}

// SetIcebergQty gets a reference to the given float32 and assigns it to the IcebergQty field.
func (o *OrderDetails) SetIcebergQty(v float32) {
	o.IcebergQty = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *OrderDetails) GetTime() int32 {
	if o == nil || o.Time == nil {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetTimeOk() (*int32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *OrderDetails) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *OrderDetails) SetTime(v int32) {
	o.Time = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *OrderDetails) GetUpdateTime() int32 {
	if o == nil || o.UpdateTime == nil {
		var ret int32
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetUpdateTimeOk() (*int32, bool) {
	if o == nil || o.UpdateTime == nil {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *OrderDetails) HasUpdateTime() bool {
	if o != nil && o.UpdateTime != nil {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given int32 and assigns it to the UpdateTime field.
func (o *OrderDetails) SetUpdateTime(v int32) {
	o.UpdateTime = &v
}

// GetIsWorking returns the IsWorking field value if set, zero value otherwise.
func (o *OrderDetails) GetIsWorking() bool {
	if o == nil || o.IsWorking == nil {
		var ret bool
		return ret
	}
	return *o.IsWorking
}

// GetIsWorkingOk returns a tuple with the IsWorking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetIsWorkingOk() (*bool, bool) {
	if o == nil || o.IsWorking == nil {
		return nil, false
	}
	return o.IsWorking, true
}

// HasIsWorking returns a boolean if a field has been set.
func (o *OrderDetails) HasIsWorking() bool {
	if o != nil && o.IsWorking != nil {
		return true
	}

	return false
}

// SetIsWorking gets a reference to the given bool and assigns it to the IsWorking field.
func (o *OrderDetails) SetIsWorking(v bool) {
	o.IsWorking = &v
}

// GetOrigQuoteOrderQty returns the OrigQuoteOrderQty field value if set, zero value otherwise.
func (o *OrderDetails) GetOrigQuoteOrderQty() float32 {
	if o == nil || o.OrigQuoteOrderQty == nil {
		var ret float32
		return ret
	}
	return *o.OrigQuoteOrderQty
}

// GetOrigQuoteOrderQtyOk returns a tuple with the OrigQuoteOrderQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDetails) GetOrigQuoteOrderQtyOk() (*float32, bool) {
	if o == nil || o.OrigQuoteOrderQty == nil {
		return nil, false
	}
	return o.OrigQuoteOrderQty, true
}

// HasOrigQuoteOrderQty returns a boolean if a field has been set.
func (o *OrderDetails) HasOrigQuoteOrderQty() bool {
	if o != nil && o.OrigQuoteOrderQty != nil {
		return true
	}

	return false
}

// SetOrigQuoteOrderQty gets a reference to the given float32 and assigns it to the OrigQuoteOrderQty field.
func (o *OrderDetails) SetOrigQuoteOrderQty(v float32) {
	o.OrigQuoteOrderQty = &v
}

func (o OrderDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.OrigClientOrderId != nil {
		toSerialize["origClientOrderId"] = o.OrigClientOrderId
	}
	if o.OrderId != nil {
		toSerialize["orderId"] = o.OrderId
	}
	if o.OrderListId != nil {
		toSerialize["orderListId"] = o.OrderListId
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.OrigQty != nil {
		toSerialize["origQty"] = o.OrigQty
	}
	if o.ExecutedQty != nil {
		toSerialize["executedQty"] = o.ExecutedQty
	}
	if o.CummulativeQuoteQty != nil {
		toSerialize["cummulativeQuoteQty"] = o.CummulativeQuoteQty
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TimeInForce != nil {
		toSerialize["timeInForce"] = o.TimeInForce
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Side != nil {
		toSerialize["side"] = o.Side
	}
	if o.StopPrice != nil {
		toSerialize["stopPrice"] = o.StopPrice
	}
	if o.IcebergQty != nil {
		toSerialize["icebergQty"] = o.IcebergQty
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.UpdateTime != nil {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if o.IsWorking != nil {
		toSerialize["isWorking"] = o.IsWorking
	}
	if o.OrigQuoteOrderQty != nil {
		toSerialize["origQuoteOrderQty"] = o.OrigQuoteOrderQty
	}
	return json.Marshal(toSerialize)
}

type NullableOrderDetails struct {
	value *OrderDetails
	isSet bool
}

func (v NullableOrderDetails) Get() *OrderDetails {
	return v.value
}

func (v *NullableOrderDetails) Set(val *OrderDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDetails(val *OrderDetails) *NullableOrderDetails {
	return &NullableOrderDetails{value: val, isSet: true}
}

func (v NullableOrderDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
