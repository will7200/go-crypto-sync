/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
	"fmt"
)

//
// OrderResponse - struct for OrderResponse
type OrderResponse struct {
	OrderResponseAck    *OrderResponseAck
	OrderResponseFull   *OrderResponseFull
	OrderResponseResult *OrderResponseResult
}

// OrderResponseAckAsOrderResponse is a convenience function that returns OrderResponseAck wrapped in OrderResponse
func OrderResponseAckAsOrderResponse(v *OrderResponseAck) OrderResponse {
	return OrderResponse{OrderResponseAck: v}
}

// OrderResponseFullAsOrderResponse is a convenience function that returns OrderResponseFull wrapped in OrderResponse
func OrderResponseFullAsOrderResponse(v *OrderResponseFull) OrderResponse {
	return OrderResponse{OrderResponseFull: v}
}

// OrderResponseResultAsOrderResponse is a convenience function that returns OrderResponseResult wrapped in OrderResponse
func OrderResponseResultAsOrderResponse(v *OrderResponseResult) OrderResponse {
	return OrderResponse{OrderResponseResult: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *OrderResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OrderResponseAck
	err = json.Unmarshal(data, &dst.OrderResponseAck)
	if err == nil {
		jsonOrderResponseAck, _ := json.Marshal(dst.OrderResponseAck)
		if string(jsonOrderResponseAck) == "{}" { // empty struct
			dst.OrderResponseAck = nil
		} else {
			match++
		}
	} else {
		dst.OrderResponseAck = nil
	}

	// try to unmarshal data into OrderResponseFull
	err = json.Unmarshal(data, &dst.OrderResponseFull)
	if err == nil {
		jsonOrderResponseFull, _ := json.Marshal(dst.OrderResponseFull)
		if string(jsonOrderResponseFull) == "{}" { // empty struct
			dst.OrderResponseFull = nil
		} else {
			match++
		}
	} else {
		dst.OrderResponseFull = nil
	}

	// try to unmarshal data into OrderResponseResult
	err = json.Unmarshal(data, &dst.OrderResponseResult)
	if err == nil {
		jsonOrderResponseResult, _ := json.Marshal(dst.OrderResponseResult)
		if string(jsonOrderResponseResult) == "{}" { // empty struct
			dst.OrderResponseResult = nil
		} else {
			match++
		}
	} else {
		dst.OrderResponseResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OrderResponseAck = nil
		dst.OrderResponseFull = nil
		dst.OrderResponseResult = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(OrderResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(OrderResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OrderResponse) MarshalJSON() ([]byte, error) {
	if src.OrderResponseAck != nil {
		return json.Marshal(&src.OrderResponseAck)
	}

	if src.OrderResponseFull != nil {
		return json.Marshal(&src.OrderResponseFull)
	}

	if src.OrderResponseResult != nil {
		return json.Marshal(&src.OrderResponseResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OrderResponse) GetActualInstance() interface{} {
	if obj.OrderResponseAck != nil {
		return obj.OrderResponseAck
	}

	if obj.OrderResponseFull != nil {
		return obj.OrderResponseFull
	}

	if obj.OrderResponseResult != nil {
		return obj.OrderResponseResult
	}

	// all schemas are nil
	return nil
}

type NullableOrderResponse struct {
	value *OrderResponse
	isSet bool
}

func (v NullableOrderResponse) Get() *OrderResponse {
	return v.value
}

func (v *NullableOrderResponse) Set(val *OrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderResponse(val *OrderResponse) *NullableOrderResponse {
	return &NullableOrderResponse{value: val, isSet: true}
}

func (v NullableOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
