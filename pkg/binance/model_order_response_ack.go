/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// OrderResponseAck struct for OrderResponseAck
type OrderResponseAck struct {
	Symbol  *string `json:"symbol,omitempty"`
	OrderId *int32  `json:"orderId,omitempty"`
	// Unless OCO, value will be -1
	OrderListId   *int32  `json:"orderListId,omitempty"`
	ClientOrderId *string `json:"clientOrderId,omitempty"`
	TransactTime  *int32  `json:"transactTime,omitempty"`
}

// NewOrderResponseAck instantiates a new OrderResponseAck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderResponseAck() *OrderResponseAck {
	this := OrderResponseAck{}
	return &this
}

// NewOrderResponseAckWithDefaults instantiates a new OrderResponseAck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderResponseAckWithDefaults() *OrderResponseAck {
	this := OrderResponseAck{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OrderResponseAck) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponseAck) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OrderResponseAck) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OrderResponseAck) SetSymbol(v string) {
	o.Symbol = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *OrderResponseAck) GetOrderId() int32 {
	if o == nil || o.OrderId == nil {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponseAck) GetOrderIdOk() (*int32, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *OrderResponseAck) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *OrderResponseAck) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetOrderListId returns the OrderListId field value if set, zero value otherwise.
func (o *OrderResponseAck) GetOrderListId() int32 {
	if o == nil || o.OrderListId == nil {
		var ret int32
		return ret
	}
	return *o.OrderListId
}

// GetOrderListIdOk returns a tuple with the OrderListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponseAck) GetOrderListIdOk() (*int32, bool) {
	if o == nil || o.OrderListId == nil {
		return nil, false
	}
	return o.OrderListId, true
}

// HasOrderListId returns a boolean if a field has been set.
func (o *OrderResponseAck) HasOrderListId() bool {
	if o != nil && o.OrderListId != nil {
		return true
	}

	return false
}

// SetOrderListId gets a reference to the given int32 and assigns it to the OrderListId field.
func (o *OrderResponseAck) SetOrderListId(v int32) {
	o.OrderListId = &v
}

// GetClientOrderId returns the ClientOrderId field value if set, zero value otherwise.
func (o *OrderResponseAck) GetClientOrderId() string {
	if o == nil || o.ClientOrderId == nil {
		var ret string
		return ret
	}
	return *o.ClientOrderId
}

// GetClientOrderIdOk returns a tuple with the ClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponseAck) GetClientOrderIdOk() (*string, bool) {
	if o == nil || o.ClientOrderId == nil {
		return nil, false
	}
	return o.ClientOrderId, true
}

// HasClientOrderId returns a boolean if a field has been set.
func (o *OrderResponseAck) HasClientOrderId() bool {
	if o != nil && o.ClientOrderId != nil {
		return true
	}

	return false
}

// SetClientOrderId gets a reference to the given string and assigns it to the ClientOrderId field.
func (o *OrderResponseAck) SetClientOrderId(v string) {
	o.ClientOrderId = &v
}

// GetTransactTime returns the TransactTime field value if set, zero value otherwise.
func (o *OrderResponseAck) GetTransactTime() int32 {
	if o == nil || o.TransactTime == nil {
		var ret int32
		return ret
	}
	return *o.TransactTime
}

// GetTransactTimeOk returns a tuple with the TransactTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponseAck) GetTransactTimeOk() (*int32, bool) {
	if o == nil || o.TransactTime == nil {
		return nil, false
	}
	return o.TransactTime, true
}

// HasTransactTime returns a boolean if a field has been set.
func (o *OrderResponseAck) HasTransactTime() bool {
	if o != nil && o.TransactTime != nil {
		return true
	}

	return false
}

// SetTransactTime gets a reference to the given int32 and assigns it to the TransactTime field.
func (o *OrderResponseAck) SetTransactTime(v int32) {
	o.TransactTime = &v
}

func (o OrderResponseAck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.OrderId != nil {
		toSerialize["orderId"] = o.OrderId
	}
	if o.OrderListId != nil {
		toSerialize["orderListId"] = o.OrderListId
	}
	if o.ClientOrderId != nil {
		toSerialize["clientOrderId"] = o.ClientOrderId
	}
	if o.TransactTime != nil {
		toSerialize["transactTime"] = o.TransactTime
	}
	return json.Marshal(toSerialize)
}

type NullableOrderResponseAck struct {
	value *OrderResponseAck
	isSet bool
}

func (v NullableOrderResponseAck) Get() *OrderResponseAck {
	return v.value
}

func (v *NullableOrderResponseAck) Set(val *OrderResponseAck) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderResponseAck) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderResponseAck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderResponseAck(val *OrderResponseAck) *NullableOrderResponseAck {
	return &NullableOrderResponseAck{value: val, isSet: true}
}

func (v NullableOrderResponseAck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderResponseAck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
