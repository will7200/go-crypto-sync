/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
)

//
// PriceTicker struct for PriceTicker
type PriceTicker struct {
	Symbol *string `json:"symbol,omitempty"`
	Price  *string `json:"price,omitempty"`
}

// NewPriceTicker instantiates a new PriceTicker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceTicker() *PriceTicker {
	this := PriceTicker{}
	return &this
}

// NewPriceTickerWithDefaults instantiates a new PriceTicker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceTickerWithDefaults() *PriceTicker {
	this := PriceTicker{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *PriceTicker) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceTicker) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *PriceTicker) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *PriceTicker) SetSymbol(v string) {
	o.Symbol = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PriceTicker) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceTicker) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PriceTicker) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *PriceTicker) SetPrice(v string) {
	o.Price = &v
}

func (o PriceTicker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullablePriceTicker struct {
	value *PriceTicker
	isSet bool
}

func (v NullablePriceTicker) Get() *PriceTicker {
	return v.value
}

func (v *NullablePriceTicker) Set(val *PriceTicker) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceTicker) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceTicker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceTicker(val *PriceTicker) *NullablePriceTicker {
	return &NullablePriceTicker{value: val, isSet: true}
}

func (v NullablePriceTicker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceTicker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
