/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
	"fmt"
)

//
// PriceTickerResponse - struct for PriceTickerResponse
type PriceTickerResponse struct {
	PriceTicker     *PriceTicker
	PriceTickerList *PriceTickerList
}

// PriceTickerAsPriceTickerResponse is a convenience function that returns PriceTicker wrapped in PriceTickerResponse
func PriceTickerAsPriceTickerResponse(v *PriceTicker) PriceTickerResponse {
	return PriceTickerResponse{PriceTicker: v}
}

// PriceTickerListAsPriceTickerResponse is a convenience function that returns PriceTickerList wrapped in PriceTickerResponse
func PriceTickerListAsPriceTickerResponse(v *PriceTickerList) PriceTickerResponse {
	return PriceTickerResponse{PriceTickerList: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PriceTickerResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PriceTicker
	err = json.Unmarshal(data, &dst.PriceTicker)
	if err == nil {
		jsonPriceTicker, _ := json.Marshal(dst.PriceTicker)
		if string(jsonPriceTicker) == "{}" { // empty struct
			dst.PriceTicker = nil
		} else {
			match++
		}
	} else {
		dst.PriceTicker = nil
	}

	// try to unmarshal data into PriceTickerList
	err = json.Unmarshal(data, &dst.PriceTickerList)
	if err == nil {
		jsonPriceTickerList, _ := json.Marshal(dst.PriceTickerList)
		if string(jsonPriceTickerList) == "{}" { // empty struct
			dst.PriceTickerList = nil
		} else {
			match++
		}
	} else {
		dst.PriceTickerList = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PriceTicker = nil
		dst.PriceTickerList = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PriceTickerResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PriceTickerResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PriceTickerResponse) MarshalJSON() ([]byte, error) {
	if src.PriceTicker != nil {
		return json.Marshal(&src.PriceTicker)
	}

	if src.PriceTickerList != nil {
		return json.Marshal(&src.PriceTickerList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PriceTickerResponse) GetActualInstance() interface{} {
	if obj.PriceTicker != nil {
		return obj.PriceTicker
	}

	if obj.PriceTickerList != nil {
		return obj.PriceTickerList
	}

	// all schemas are nil
	return nil
}

type NullablePriceTickerResponse struct {
	value *PriceTickerResponse
	isSet bool
}

func (v NullablePriceTickerResponse) Get() *PriceTickerResponse {
	return v.value
}

func (v *NullablePriceTickerResponse) Set(val *PriceTickerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceTickerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceTickerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceTickerResponse(val *PriceTickerResponse) *NullablePriceTickerResponse {
	return &NullablePriceTickerResponse{value: val, isSet: true}
}

func (v NullablePriceTickerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceTickerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
