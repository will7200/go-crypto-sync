/*
 * Binance SPOT Public API
 *
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binance

import (
	"encoding/json"
	"fmt"
)

//
// Ticker24HourResponse - struct for Ticker24HourResponse
type Ticker24HourResponse struct {
	Ticker     *Ticker
	TickerList *TickerList
}

// TickerAsTicker24HourResponse is a convenience function that returns Ticker wrapped in Ticker24HourResponse
func TickerAsTicker24HourResponse(v *Ticker) Ticker24HourResponse {
	return Ticker24HourResponse{Ticker: v}
}

// TickerListAsTicker24HourResponse is a convenience function that returns TickerList wrapped in Ticker24HourResponse
func TickerListAsTicker24HourResponse(v *TickerList) Ticker24HourResponse {
	return Ticker24HourResponse{TickerList: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Ticker24HourResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Ticker
	err = json.Unmarshal(data, &dst.Ticker)
	if err == nil {
		jsonTicker, _ := json.Marshal(dst.Ticker)
		if string(jsonTicker) == "{}" { // empty struct
			dst.Ticker = nil
		} else {
			match++
		}
	} else {
		dst.Ticker = nil
	}

	// try to unmarshal data into TickerList
	err = json.Unmarshal(data, &dst.TickerList)
	if err == nil {
		jsonTickerList, _ := json.Marshal(dst.TickerList)
		if string(jsonTickerList) == "{}" { // empty struct
			dst.TickerList = nil
		} else {
			match++
		}
	} else {
		dst.TickerList = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Ticker = nil
		dst.TickerList = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Ticker24HourResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Ticker24HourResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Ticker24HourResponse) MarshalJSON() ([]byte, error) {
	if src.Ticker != nil {
		return json.Marshal(&src.Ticker)
	}

	if src.TickerList != nil {
		return json.Marshal(&src.TickerList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Ticker24HourResponse) GetActualInstance() interface{} {
	if obj.Ticker != nil {
		return obj.Ticker
	}

	if obj.TickerList != nil {
		return obj.TickerList
	}

	// all schemas are nil
	return nil
}

type NullableTicker24HourResponse struct {
	value *Ticker24HourResponse
	isSet bool
}

func (v NullableTicker24HourResponse) Get() *Ticker24HourResponse {
	return v.value
}

func (v *NullableTicker24HourResponse) Set(val *Ticker24HourResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTicker24HourResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTicker24HourResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicker24HourResponse(val *Ticker24HourResponse) *NullableTicker24HourResponse {
	return &NullableTicker24HourResponse{value: val, isSet: true}
}

func (v NullableTicker24HourResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicker24HourResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
