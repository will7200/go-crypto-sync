/*
 * CoinBase API
 *
 * Coinbase provides a simple and powerful REST API to integrate bitcoin, bitcoin cash, litecoin and ethereum payments into your business or application.  This API reference provides information on available endpoints and how to interact with it. To read more about the API, visit our API documentation.
 *
 * API version: 2019-11-15
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinbase

import (
	"encoding/json"
	"time"
)

// Account struct for Account
type Account struct {
	Id               string         `json:"id"`
	Name             string         `json:"name"`
	Primary          bool           `json:"primary"`
	Type             string         `json:"type"`
	Currency         Currency       `json:"currency"`
	Balance          AccountBalance `json:"balance"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
	Resource         string         `json:"resource"`
	ResourcePath     string         `json:"resource_path"`
	Ready            bool           `json:"ready"`
	AllowDeposits    *bool          `json:"allow_deposits,omitempty"`
	AllowWithdrawals *bool          `json:"allow_withdrawals,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(id string, name string, primary bool, type_ string, currency Currency, balance AccountBalance, createdAt time.Time, updatedAt time.Time, resource string, resourcePath string, ready bool) *Account {
	this := Account{}
	this.Id = id
	this.Name = name
	this.Primary = primary
	this.Type = type_
	this.Currency = currency
	this.Balance = balance
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Resource = resource
	this.ResourcePath = resourcePath
	this.Ready = ready
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetId returns the Id field value
func (o *Account) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Account) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Account) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Account) SetName(v string) {
	o.Name = v
}

// GetPrimary returns the Primary field value
func (o *Account) GetPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *Account) GetPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *Account) SetPrimary(v bool) {
	o.Primary = v
}

// GetType returns the Type field value
func (o *Account) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Account) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Account) SetType(v string) {
	o.Type = v
}

// GetCurrency returns the Currency field value
func (o *Account) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Account) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Account) SetCurrency(v Currency) {
	o.Currency = v
}

// GetBalance returns the Balance field value
func (o *Account) GetBalance() AccountBalance {
	if o == nil {
		var ret AccountBalance
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *Account) GetBalanceOk() (*AccountBalance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *Account) SetBalance(v AccountBalance) {
	o.Balance = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Account) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Account) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Account) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Account) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Account) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Account) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetResource returns the Resource field value
func (o *Account) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *Account) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *Account) SetResource(v string) {
	o.Resource = v
}

// GetResourcePath returns the ResourcePath field value
func (o *Account) GetResourcePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourcePath
}

// GetResourcePathOk returns a tuple with the ResourcePath field value
// and a boolean to check if the value has been set.
func (o *Account) GetResourcePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourcePath, true
}

// SetResourcePath sets field value
func (o *Account) SetResourcePath(v string) {
	o.ResourcePath = v
}

// GetReady returns the Ready field value
func (o *Account) GetReady() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ready
}

// GetReadyOk returns a tuple with the Ready field value
// and a boolean to check if the value has been set.
func (o *Account) GetReadyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ready, true
}

// SetReady sets field value
func (o *Account) SetReady(v bool) {
	o.Ready = v
}

// GetAllowDeposits returns the AllowDeposits field value if set, zero value otherwise.
func (o *Account) GetAllowDeposits() bool {
	if o == nil || o.AllowDeposits == nil {
		var ret bool
		return ret
	}
	return *o.AllowDeposits
}

// GetAllowDepositsOk returns a tuple with the AllowDeposits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAllowDepositsOk() (*bool, bool) {
	if o == nil || o.AllowDeposits == nil {
		return nil, false
	}
	return o.AllowDeposits, true
}

// HasAllowDeposits returns a boolean if a field has been set.
func (o *Account) HasAllowDeposits() bool {
	if o != nil && o.AllowDeposits != nil {
		return true
	}

	return false
}

// SetAllowDeposits gets a reference to the given bool and assigns it to the AllowDeposits field.
func (o *Account) SetAllowDeposits(v bool) {
	o.AllowDeposits = &v
}

// GetAllowWithdrawals returns the AllowWithdrawals field value if set, zero value otherwise.
func (o *Account) GetAllowWithdrawals() bool {
	if o == nil || o.AllowWithdrawals == nil {
		var ret bool
		return ret
	}
	return *o.AllowWithdrawals
}

// GetAllowWithdrawalsOk returns a tuple with the AllowWithdrawals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAllowWithdrawalsOk() (*bool, bool) {
	if o == nil || o.AllowWithdrawals == nil {
		return nil, false
	}
	return o.AllowWithdrawals, true
}

// HasAllowWithdrawals returns a boolean if a field has been set.
func (o *Account) HasAllowWithdrawals() bool {
	if o != nil && o.AllowWithdrawals != nil {
		return true
	}

	return false
}

// SetAllowWithdrawals gets a reference to the given bool and assigns it to the AllowWithdrawals field.
func (o *Account) SetAllowWithdrawals(v bool) {
	o.AllowWithdrawals = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["primary"] = o.Primary
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["balance"] = o.Balance
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["resource"] = o.Resource
	}
	if true {
		toSerialize["resource_path"] = o.ResourcePath
	}
	if true {
		toSerialize["ready"] = o.Ready
	}
	if o.AllowDeposits != nil {
		toSerialize["allow_deposits"] = o.AllowDeposits
	}
	if o.AllowWithdrawals != nil {
		toSerialize["allow_withdrawals"] = o.AllowWithdrawals
	}
	return json.Marshal(toSerialize)
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
