/*
 * CoinBase API
 *
 * Coinbase provides a simple and powerful REST API to integrate bitcoin, bitcoin cash, litecoin and ethereum payments into your business or application.  This API reference provides information on available endpoints and how to interact with it. To read more about the API, visit our API documentation.
 *
 * API version: 2019-11-15
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinbase

import (
	"encoding/json"
)

// Currency struct for Currency
type Currency struct {
	Code         string  `json:"code"`
	Name         string  `json:"name"`
	Color        string  `json:"color"`
	SortIndex    float32 `json:"sort_index"`
	Exponent     float32 `json:"exponent"`
	Type         string  `json:"type"`
	AddressRegex *string `json:"address_regex,omitempty"`
	AssetId      string  `json:"asset_id"`
	Slug         string  `json:"slug"`
}

// NewCurrency instantiates a new Currency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrency(code string, name string, color string, sortIndex float32, exponent float32, type_ string, assetId string, slug string) *Currency {
	this := Currency{}
	this.Code = code
	this.Name = name
	this.Color = color
	this.SortIndex = sortIndex
	this.Exponent = exponent
	this.Type = type_
	this.AssetId = assetId
	this.Slug = slug
	return &this
}

// NewCurrencyWithDefaults instantiates a new Currency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyWithDefaults() *Currency {
	this := Currency{}
	return &this
}

// GetCode returns the Code field value
func (o *Currency) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Currency) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Currency) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *Currency) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Currency) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Currency) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value
func (o *Currency) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *Currency) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *Currency) SetColor(v string) {
	o.Color = v
}

// GetSortIndex returns the SortIndex field value
func (o *Currency) GetSortIndex() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SortIndex
}

// GetSortIndexOk returns a tuple with the SortIndex field value
// and a boolean to check if the value has been set.
func (o *Currency) GetSortIndexOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortIndex, true
}

// SetSortIndex sets field value
func (o *Currency) SetSortIndex(v float32) {
	o.SortIndex = v
}

// GetExponent returns the Exponent field value
func (o *Currency) GetExponent() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Exponent
}

// GetExponentOk returns a tuple with the Exponent field value
// and a boolean to check if the value has been set.
func (o *Currency) GetExponentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exponent, true
}

// SetExponent sets field value
func (o *Currency) SetExponent(v float32) {
	o.Exponent = v
}

// GetType returns the Type field value
func (o *Currency) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Currency) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Currency) SetType(v string) {
	o.Type = v
}

// GetAddressRegex returns the AddressRegex field value if set, zero value otherwise.
func (o *Currency) GetAddressRegex() string {
	if o == nil || o.AddressRegex == nil {
		var ret string
		return ret
	}
	return *o.AddressRegex
}

// GetAddressRegexOk returns a tuple with the AddressRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetAddressRegexOk() (*string, bool) {
	if o == nil || o.AddressRegex == nil {
		return nil, false
	}
	return o.AddressRegex, true
}

// HasAddressRegex returns a boolean if a field has been set.
func (o *Currency) HasAddressRegex() bool {
	if o != nil && o.AddressRegex != nil {
		return true
	}

	return false
}

// SetAddressRegex gets a reference to the given string and assigns it to the AddressRegex field.
func (o *Currency) SetAddressRegex(v string) {
	o.AddressRegex = &v
}

// GetAssetId returns the AssetId field value
func (o *Currency) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *Currency) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *Currency) SetAssetId(v string) {
	o.AssetId = v
}

// GetSlug returns the Slug field value
func (o *Currency) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *Currency) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *Currency) SetSlug(v string) {
	o.Slug = v
}

func (o Currency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["color"] = o.Color
	}
	if true {
		toSerialize["sort_index"] = o.SortIndex
	}
	if true {
		toSerialize["exponent"] = o.Exponent
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.AddressRegex != nil {
		toSerialize["address_regex"] = o.AddressRegex
	}
	if true {
		toSerialize["asset_id"] = o.AssetId
	}
	if true {
		toSerialize["slug"] = o.Slug
	}
	return json.Marshal(toSerialize)
}

type NullableCurrency struct {
	value *Currency
	isSet bool
}

func (v NullableCurrency) Get() *Currency {
	return v.value
}

func (v *NullableCurrency) Set(val *Currency) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrency(val *Currency) *NullableCurrency {
	return &NullableCurrency{value: val, isSet: true}
}

func (v NullableCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
