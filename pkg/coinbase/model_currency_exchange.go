/*
 * CoinBase API
 *
 * Coinbase provides a simple and powerful REST API to integrate bitcoin, bitcoin cash, litecoin and ethereum payments into your business or application.  This API reference provides information on available endpoints and how to interact with it. To read more about the API, visit our API documentation.
 *
 * API version: 2019-11-15
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinbase

import (
	"encoding/json"
)

// CurrencyExchange struct for CurrencyExchange
type CurrencyExchange struct {
	Amount   string `json:"amount"`
	Currency string `json:"currency"`
	Base     string `json:"base"`
}

// NewCurrencyExchange instantiates a new CurrencyExchange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyExchange(amount string, currency string, base string) *CurrencyExchange {
	this := CurrencyExchange{}
	this.Amount = amount
	this.Currency = currency
	this.Base = base
	return &this
}

// NewCurrencyExchangeWithDefaults instantiates a new CurrencyExchange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyExchangeWithDefaults() *CurrencyExchange {
	this := CurrencyExchange{}
	return &this
}

// GetAmount returns the Amount field value
func (o *CurrencyExchange) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CurrencyExchange) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CurrencyExchange) SetAmount(v string) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *CurrencyExchange) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CurrencyExchange) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CurrencyExchange) SetCurrency(v string) {
	o.Currency = v
}

// GetBase returns the Base field value
func (o *CurrencyExchange) GetBase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *CurrencyExchange) GetBaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Base, true
}

// SetBase sets field value
func (o *CurrencyExchange) SetBase(v string) {
	o.Base = v
}

func (o CurrencyExchange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["base"] = o.Base
	}
	return json.Marshal(toSerialize)
}

type NullableCurrencyExchange struct {
	value *CurrencyExchange
	isSet bool
}

func (v NullableCurrencyExchange) Get() *CurrencyExchange {
	return v.value
}

func (v *NullableCurrencyExchange) Set(val *CurrencyExchange) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyExchange(val *CurrencyExchange) *NullableCurrencyExchange {
	return &NullableCurrencyExchange{value: val, isSet: true}
}

func (v NullableCurrencyExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
