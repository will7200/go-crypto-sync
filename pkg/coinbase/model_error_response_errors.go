/*
 * CoinBase API
 *
 * Coinbase provides a simple and powerful REST API to integrate bitcoin, bitcoin cash, litecoin and ethereum payments into your business or application.  This API reference provides information on available endpoints and how to interact with it. To read more about the API, visit our API documentation.
 *
 * API version: 2019-11-15
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinbase

import (
	"encoding/json"
)

// ErrorResponseErrors struct for ErrorResponseErrors
type ErrorResponseErrors struct {
	Id      string `json:"id"`
	Message string `json:"message"`
}

// NewErrorResponseErrors instantiates a new ErrorResponseErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseErrors(id string, message string) *ErrorResponseErrors {
	this := ErrorResponseErrors{}
	this.Id = id
	this.Message = message
	return &this
}

// NewErrorResponseErrorsWithDefaults instantiates a new ErrorResponseErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseErrorsWithDefaults() *ErrorResponseErrors {
	this := ErrorResponseErrors{}
	return &this
}

// GetId returns the Id field value
func (o *ErrorResponseErrors) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseErrors) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ErrorResponseErrors) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *ErrorResponseErrors) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseErrors) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorResponseErrors) SetMessage(v string) {
	o.Message = v
}

func (o ErrorResponseErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableErrorResponseErrors struct {
	value *ErrorResponseErrors
	isSet bool
}

func (v NullableErrorResponseErrors) Get() *ErrorResponseErrors {
	return v.value
}

func (v *NullableErrorResponseErrors) Set(val *ErrorResponseErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseErrors(val *ErrorResponseErrors) *NullableErrorResponseErrors {
	return &NullableErrorResponseErrors{value: val, isSet: true}
}

func (v NullableErrorResponseErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
