/*
 * CoinBase API
 *
 * Coinbase provides a simple and powerful REST API to integrate bitcoin, bitcoin cash, litecoin and ethereum payments into your business or application.  This API reference provides information on available endpoints and how to interact with it. To read more about the API, visit our API documentation.
 *
 * API version: 2019-11-15
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinbase

import (
	"encoding/json"
)

// ExchangeRates struct for ExchangeRates
type ExchangeRates struct {
	Currency string            `json:"currency"`
	Rates    map[string]string `json:"rates"`
}

// NewExchangeRates instantiates a new ExchangeRates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRates(currency string, rates map[string]string) *ExchangeRates {
	this := ExchangeRates{}
	this.Currency = currency
	this.Rates = rates
	return &this
}

// NewExchangeRatesWithDefaults instantiates a new ExchangeRates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRatesWithDefaults() *ExchangeRates {
	this := ExchangeRates{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *ExchangeRates) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ExchangeRates) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ExchangeRates) SetCurrency(v string) {
	o.Currency = v
}

// GetRates returns the Rates field value
func (o *ExchangeRates) GetRates() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Rates
}

// GetRatesOk returns a tuple with the Rates field value
// and a boolean to check if the value has been set.
func (o *ExchangeRates) GetRatesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rates, true
}

// SetRates sets field value
func (o *ExchangeRates) SetRates(v map[string]string) {
	o.Rates = v
}

func (o ExchangeRates) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["rates"] = o.Rates
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeRates struct {
	value *ExchangeRates
	isSet bool
}

func (v NullableExchangeRates) Get() *ExchangeRates {
	return v.value
}

func (v *NullableExchangeRates) Set(val *ExchangeRates) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRates) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRates(val *ExchangeRates) *NullableExchangeRates {
	return &NullableExchangeRates{value: val, isSet: true}
}

func (v NullableExchangeRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
