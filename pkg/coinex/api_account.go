/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// AccountApiService AccountApi service
type AccountApiService service

type ApiCancelWithdrawalRequest struct {
	ctx            _context.Context
	ApiService     *AccountApiService
	authorization  *string
	accessId       *string
	tonce          *int64
	coinWithdrawId *int64
}

func (r ApiCancelWithdrawalRequest) Authorization(authorization string) ApiCancelWithdrawalRequest {
	r.authorization = &authorization
	return r
}
func (r ApiCancelWithdrawalRequest) AccessId(accessId string) ApiCancelWithdrawalRequest {
	r.accessId = &accessId
	return r
}
func (r ApiCancelWithdrawalRequest) Tonce(tonce int64) ApiCancelWithdrawalRequest {
	r.tonce = &tonce
	return r
}
func (r ApiCancelWithdrawalRequest) CoinWithdrawId(coinWithdrawId int64) ApiCancelWithdrawalRequest {
	r.coinWithdrawId = &coinWithdrawId
	return r
}

func (r ApiCancelWithdrawalRequest) Execute() (InlineResponse20013, *_nethttp.Response, error) {
	return r.ApiService.CancelWithdrawalExecute(r)
}

/*
 * CancelWithdrawal Cancel Withdrawal
 * Cancel withdrawal
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCancelWithdrawalRequest
 */
func (a *AccountApiService) CancelWithdrawal(ctx _context.Context) ApiCancelWithdrawalRequest {
	return ApiCancelWithdrawalRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20013
 */
func (a *AccountApiService) CancelWithdrawalExecute(r ApiCancelWithdrawalRequest) (InlineResponse20013, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20013
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountApiService.CancelWithdrawal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance/coin/withdraw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}
	if r.coinWithdrawId == nil {
		return localVarReturnValue, nil, reportError("coinWithdrawId is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	localVarQueryParams.Add("coin_withdraw_id", parameterToString(*r.coinWithdrawId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInquireAccountInfoRequest struct {
	ctx           _context.Context
	ApiService    *AccountApiService
	authorization *string
	accessId      *string
	tonce         *int64
}

func (r ApiInquireAccountInfoRequest) Authorization(authorization string) ApiInquireAccountInfoRequest {
	r.authorization = &authorization
	return r
}
func (r ApiInquireAccountInfoRequest) AccessId(accessId string) ApiInquireAccountInfoRequest {
	r.accessId = &accessId
	return r
}
func (r ApiInquireAccountInfoRequest) Tonce(tonce int64) ApiInquireAccountInfoRequest {
	r.tonce = &tonce
	return r
}

func (r ApiInquireAccountInfoRequest) Execute() (InlineResponse20020, *_nethttp.Response, error) {
	return r.ApiService.InquireAccountInfoExecute(r)
}

/*
 * InquireAccountInfo Inquire Account Info
 * Inquire account asset constructure.
    **When the total assets (available + frozen) of a coin are 0, no coin data return
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiInquireAccountInfoRequest
*/
func (a *AccountApiService) InquireAccountInfo(ctx _context.Context) ApiInquireAccountInfoRequest {
	return ApiInquireAccountInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20020
 */
func (a *AccountApiService) InquireAccountInfoExecute(r ApiInquireAccountInfoRequest) (InlineResponse20020, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20020
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountApiService.InquireAccountInfo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInquireDepositListRequest struct {
	ctx           _context.Context
	ApiService    *AccountApiService
	authorization *string
	accessId      *string
	tonce         *int64
	coinType      *string
}

func (r ApiInquireDepositListRequest) Authorization(authorization string) ApiInquireDepositListRequest {
	r.authorization = &authorization
	return r
}
func (r ApiInquireDepositListRequest) AccessId(accessId string) ApiInquireDepositListRequest {
	r.accessId = &accessId
	return r
}
func (r ApiInquireDepositListRequest) Tonce(tonce int64) ApiInquireDepositListRequest {
	r.tonce = &tonce
	return r
}
func (r ApiInquireDepositListRequest) CoinType(coinType string) ApiInquireDepositListRequest {
	r.coinType = &coinType
	return r
}

func (r ApiInquireDepositListRequest) Execute() (InlineResponse20023, *_nethttp.Response, error) {
	return r.ApiService.InquireDepositListExecute(r)
}

/*
 * InquireDepositList Inquire Deposit List
 * Inquire deposit history
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiInquireDepositListRequest
 */
func (a *AccountApiService) InquireDepositList(ctx _context.Context) ApiInquireDepositListRequest {
	return ApiInquireDepositListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20023
 */
func (a *AccountApiService) InquireDepositListExecute(r ApiInquireDepositListRequest) (InlineResponse20023, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20023
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountApiService.InquireDepositList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance/coin/deposit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	if r.coinType != nil {
		localVarQueryParams.Add("coin_type", parameterToString(*r.coinType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInquireMarginAccountMarketInfoRequest struct {
	ctx        _context.Context
	ApiService *AccountApiService
}

func (r ApiInquireMarginAccountMarketInfoRequest) Execute() (InlineResponse20013, *_nethttp.Response, error) {
	return r.ApiService.InquireMarginAccountMarketInfoExecute(r)
}

/*
 * InquireMarginAccountMarketInfo Inquire Margin Account Market Info
 * Inquire margin market ID map info
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiInquireMarginAccountMarketInfoRequest
 */
func (a *AccountApiService) InquireMarginAccountMarketInfo(ctx _context.Context) ApiInquireMarginAccountMarketInfoRequest {
	return ApiInquireMarginAccountMarketInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20013
 */
func (a *AccountApiService) InquireMarginAccountMarketInfoExecute(r ApiInquireMarginAccountMarketInfoRequest) (InlineResponse20013, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20013
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountApiService.InquireMarginAccountMarketInfo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/margin/market"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInquireWithdrawalListRequest struct {
	ctx           _context.Context
	ApiService    *AccountApiService
	authorization *string
	accessId      *string
	tonce         *int64
	coinType      *string
}

func (r ApiInquireWithdrawalListRequest) Authorization(authorization string) ApiInquireWithdrawalListRequest {
	r.authorization = &authorization
	return r
}
func (r ApiInquireWithdrawalListRequest) AccessId(accessId string) ApiInquireWithdrawalListRequest {
	r.accessId = &accessId
	return r
}
func (r ApiInquireWithdrawalListRequest) Tonce(tonce int64) ApiInquireWithdrawalListRequest {
	r.tonce = &tonce
	return r
}
func (r ApiInquireWithdrawalListRequest) CoinType(coinType string) ApiInquireWithdrawalListRequest {
	r.coinType = &coinType
	return r
}

func (r ApiInquireWithdrawalListRequest) Execute() (InlineResponse20021, *_nethttp.Response, error) {
	return r.ApiService.InquireWithdrawalListExecute(r)
}

/*
 * InquireWithdrawalList Inquire Withdrawal List
 * Inquire withdrawal list
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiInquireWithdrawalListRequest
 */
func (a *AccountApiService) InquireWithdrawalList(ctx _context.Context) ApiInquireWithdrawalListRequest {
	return ApiInquireWithdrawalListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20021
 */
func (a *AccountApiService) InquireWithdrawalListExecute(r ApiInquireWithdrawalListRequest) (InlineResponse20021, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20021
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountApiService.InquireWithdrawalList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance/coin/withdraw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	if r.coinType != nil {
		localVarQueryParams.Add("coin_type", parameterToString(*r.coinType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubmitWithdrawalOrderRequest struct {
	ctx               _context.Context
	ApiService        *AccountApiService
	authorization     *string
	accessId          *string
	tonce             *int64
	coinType          *string
	smartContractName *string
}

func (r ApiSubmitWithdrawalOrderRequest) Authorization(authorization string) ApiSubmitWithdrawalOrderRequest {
	r.authorization = &authorization
	return r
}
func (r ApiSubmitWithdrawalOrderRequest) AccessId(accessId string) ApiSubmitWithdrawalOrderRequest {
	r.accessId = &accessId
	return r
}
func (r ApiSubmitWithdrawalOrderRequest) Tonce(tonce int64) ApiSubmitWithdrawalOrderRequest {
	r.tonce = &tonce
	return r
}
func (r ApiSubmitWithdrawalOrderRequest) CoinType(coinType string) ApiSubmitWithdrawalOrderRequest {
	r.coinType = &coinType
	return r
}
func (r ApiSubmitWithdrawalOrderRequest) SmartContractName(smartContractName string) ApiSubmitWithdrawalOrderRequest {
	r.smartContractName = &smartContractName
	return r
}

func (r ApiSubmitWithdrawalOrderRequest) Execute() (InlineResponse20022, *_nethttp.Response, error) {
	return r.ApiService.SubmitWithdrawalOrderExecute(r)
}

/*
 * SubmitWithdrawalOrder Submit Withdrawal Order
 * Submit a withdrawal order
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSubmitWithdrawalOrderRequest
 */
func (a *AccountApiService) SubmitWithdrawalOrder(ctx _context.Context) ApiSubmitWithdrawalOrderRequest {
	return ApiSubmitWithdrawalOrderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20022
 */
func (a *AccountApiService) SubmitWithdrawalOrderExecute(r ApiSubmitWithdrawalOrderRequest) (InlineResponse20022, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20022
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountApiService.SubmitWithdrawalOrder")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance/coin/withdraw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}
	if r.coinType == nil {
		return localVarReturnValue, nil, reportError("coinType is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	localVarQueryParams.Add("coin_type", parameterToString(*r.coinType, ""))
	if r.smartContractName != nil {
		localVarQueryParams.Add("smart_contract_name", parameterToString(*r.smartContractName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTransferBetweenMainAccountAndMarginAccountRequest struct {
	ctx         _context.Context
	ApiService  *AccountApiService
	fromAccount *int64
}

func (r ApiTransferBetweenMainAccountAndMarginAccountRequest) FromAccount(fromAccount int64) ApiTransferBetweenMainAccountAndMarginAccountRequest {
	r.fromAccount = &fromAccount
	return r
}

func (r ApiTransferBetweenMainAccountAndMarginAccountRequest) Execute() (InlineResponse20013, *_nethttp.Response, error) {
	return r.ApiService.TransferBetweenMainAccountAndMarginAccountExecute(r)
}

/*
 * TransferBetweenMainAccountAndMarginAccount Transfer between main account and margin account
 * transfer between main account and margin account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTransferBetweenMainAccountAndMarginAccountRequest
 */
func (a *AccountApiService) TransferBetweenMainAccountAndMarginAccount(ctx _context.Context) ApiTransferBetweenMainAccountAndMarginAccountRequest {
	return ApiTransferBetweenMainAccountAndMarginAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20013
 */
func (a *AccountApiService) TransferBetweenMainAccountAndMarginAccountExecute(r ApiTransferBetweenMainAccountAndMarginAccountRequest) (InlineResponse20013, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20013
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountApiService.TransferBetweenMainAccountAndMarginAccount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/margin/transfer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.fromAccount == nil {
		return localVarReturnValue, nil, reportError("fromAccount is required and must be specified")
	}

	localVarQueryParams.Add("from_account", parameterToString(*r.fromAccount, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTransferBetweenMainAccountAndSubAccountRequest struct {
	ctx             _context.Context
	ApiService      *AccountApiService
	accessId        *string
	tonce           *int64
	transferAccount *string
	transferSide    *string
}

func (r ApiTransferBetweenMainAccountAndSubAccountRequest) AccessId(accessId string) ApiTransferBetweenMainAccountAndSubAccountRequest {
	r.accessId = &accessId
	return r
}
func (r ApiTransferBetweenMainAccountAndSubAccountRequest) Tonce(tonce int64) ApiTransferBetweenMainAccountAndSubAccountRequest {
	r.tonce = &tonce
	return r
}
func (r ApiTransferBetweenMainAccountAndSubAccountRequest) TransferAccount(transferAccount string) ApiTransferBetweenMainAccountAndSubAccountRequest {
	r.transferAccount = &transferAccount
	return r
}
func (r ApiTransferBetweenMainAccountAndSubAccountRequest) TransferSide(transferSide string) ApiTransferBetweenMainAccountAndSubAccountRequest {
	r.transferSide = &transferSide
	return r
}

func (r ApiTransferBetweenMainAccountAndSubAccountRequest) Execute() (InlineResponse20013, *_nethttp.Response, error) {
	return r.ApiService.TransferBetweenMainAccountAndSubAccountExecute(r)
}

/*
 * TransferBetweenMainAccountAndSubAccount Transfer between main account and sub account
 * transfer between main account and sub account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTransferBetweenMainAccountAndSubAccountRequest
 */
func (a *AccountApiService) TransferBetweenMainAccountAndSubAccount(ctx _context.Context) ApiTransferBetweenMainAccountAndSubAccountRequest {
	return ApiTransferBetweenMainAccountAndSubAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20013
 */
func (a *AccountApiService) TransferBetweenMainAccountAndSubAccountExecute(r ApiTransferBetweenMainAccountAndSubAccountRequest) (InlineResponse20013, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20013
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountApiService.TransferBetweenMainAccountAndSubAccount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sub_account/transfer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	if r.transferAccount != nil {
		localVarQueryParams.Add("transfer_account", parameterToString(*r.transferAccount, ""))
	}
	if r.transferSide != nil {
		localVarQueryParams.Add("transfer_side", parameterToString(*r.transferSide, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
