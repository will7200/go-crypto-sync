/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// MarginApiService MarginApi service
type MarginApiService service

type ApiAcquireLoanListRequest struct {
	ctx           _context.Context
	ApiService    *MarginApiService
	authorization *string
	accessId      *string
	tonce         *int64
	market        *string
	status        *string
	page          *int64
}

func (r ApiAcquireLoanListRequest) Authorization(authorization string) ApiAcquireLoanListRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireLoanListRequest) AccessId(accessId string) ApiAcquireLoanListRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireLoanListRequest) Tonce(tonce int64) ApiAcquireLoanListRequest {
	r.tonce = &tonce
	return r
}
func (r ApiAcquireLoanListRequest) Market(market string) ApiAcquireLoanListRequest {
	r.market = &market
	return r
}
func (r ApiAcquireLoanListRequest) Status(status string) ApiAcquireLoanListRequest {
	r.status = &status
	return r
}
func (r ApiAcquireLoanListRequest) Page(page int64) ApiAcquireLoanListRequest {
	r.page = &page
	return r
}

func (r ApiAcquireLoanListRequest) Execute() (InlineResponse20028, *_nethttp.Response, error) {
	return r.ApiService.AcquireLoanListExecute(r)
}

/*
 * AcquireLoanList Acquire Loan List
 * Get loan history of the margin trading account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireLoanListRequest
 */
func (a *MarginApiService) AcquireLoanList(ctx _context.Context) ApiAcquireLoanListRequest {
	return ApiAcquireLoanListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20028
 */
func (a *MarginApiService) AcquireLoanListExecute(r ApiAcquireLoanListRequest) (InlineResponse20028, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20028
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarginApiService.AcquireLoanList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/margin/loan/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	if r.market != nil {
		localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAcquireMarginAccountSettingsRequest struct {
	ctx           _context.Context
	ApiService    *MarginApiService
	authorization *string
	accessId      *string
	tonce         *int64
}

func (r ApiAcquireMarginAccountSettingsRequest) Authorization(authorization string) ApiAcquireMarginAccountSettingsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireMarginAccountSettingsRequest) AccessId(accessId string) ApiAcquireMarginAccountSettingsRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireMarginAccountSettingsRequest) Tonce(tonce int64) ApiAcquireMarginAccountSettingsRequest {
	r.tonce = &tonce
	return r
}

func (r ApiAcquireMarginAccountSettingsRequest) Execute() (InlineResponse20027, *_nethttp.Response, error) {
	return r.ApiService.AcquireMarginAccountSettingsExecute(r)
}

/*
 * AcquireMarginAccountSettings Acquire Margin Account Settings
 * Get all information of the margin trading coin, including the general maximum loan amount, interest rate
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireMarginAccountSettingsRequest
 */
func (a *MarginApiService) AcquireMarginAccountSettings(ctx _context.Context) ApiAcquireMarginAccountSettingsRequest {
	return ApiAcquireMarginAccountSettingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20027
 */
func (a *MarginApiService) AcquireMarginAccountSettingsExecute(r ApiAcquireMarginAccountSettingsRequest) (InlineResponse20027, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20027
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarginApiService.AcquireMarginAccountSettings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/margin/config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInquireMarginAccountInfoRequest struct {
	ctx           _context.Context
	ApiService    *MarginApiService
	authorization *string
	accessId      *string
	tonce         *int64
	market        *string
}

func (r ApiInquireMarginAccountInfoRequest) Authorization(authorization string) ApiInquireMarginAccountInfoRequest {
	r.authorization = &authorization
	return r
}
func (r ApiInquireMarginAccountInfoRequest) AccessId(accessId string) ApiInquireMarginAccountInfoRequest {
	r.accessId = &accessId
	return r
}
func (r ApiInquireMarginAccountInfoRequest) Tonce(tonce int64) ApiInquireMarginAccountInfoRequest {
	r.tonce = &tonce
	return r
}
func (r ApiInquireMarginAccountInfoRequest) Market(market string) ApiInquireMarginAccountInfoRequest {
	r.market = &market
	return r
}

func (r ApiInquireMarginAccountInfoRequest) Execute() (InlineResponse20026, *_nethttp.Response, error) {
	return r.ApiService.InquireMarginAccountInfoExecute(r)
}

/*
 * InquireMarginAccountInfo Inquire Margin Account Info
 * Inquire margin account asset constructure
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiInquireMarginAccountInfoRequest
 */
func (a *MarginApiService) InquireMarginAccountInfo(ctx _context.Context) ApiInquireMarginAccountInfoRequest {
	return ApiInquireMarginAccountInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20026
 */
func (a *MarginApiService) InquireMarginAccountInfoExecute(r ApiInquireMarginAccountInfoRequest) (InlineResponse20026, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20026
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarginApiService.InquireMarginAccountInfo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/margin/account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlaceFlatRequest struct {
	ctx           _context.Context
	ApiService    *MarginApiService
	authorization *string
	accessId      *string
	tonce         *int64
	market        *string
	coinType      *string
}

func (r ApiPlaceFlatRequest) Authorization(authorization string) ApiPlaceFlatRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPlaceFlatRequest) AccessId(accessId string) ApiPlaceFlatRequest {
	r.accessId = &accessId
	return r
}
func (r ApiPlaceFlatRequest) Tonce(tonce int64) ApiPlaceFlatRequest {
	r.tonce = &tonce
	return r
}
func (r ApiPlaceFlatRequest) Market(market string) ApiPlaceFlatRequest {
	r.market = &market
	return r
}
func (r ApiPlaceFlatRequest) CoinType(coinType string) ApiPlaceFlatRequest {
	r.coinType = &coinType
	return r
}

func (r ApiPlaceFlatRequest) Execute() (InlineResponse20013, *_nethttp.Response, error) {
	return r.ApiService.PlaceFlatExecute(r)
}

/*
 * PlaceFlat Place Flat
 * Repay coins in a margin account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPlaceFlatRequest
 */
func (a *MarginApiService) PlaceFlat(ctx _context.Context) ApiPlaceFlatRequest {
	return ApiPlaceFlatRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20013
 */
func (a *MarginApiService) PlaceFlatExecute(r ApiPlaceFlatRequest) (InlineResponse20013, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20013
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarginApiService.PlaceFlat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/margin/flat"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.coinType == nil {
		return localVarReturnValue, nil, reportError("coinType is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("coin_type", parameterToString(*r.coinType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlaceLoanRequest struct {
	ctx           _context.Context
	ApiService    *MarginApiService
	authorization *string
	accessId      *string
	tonce         *int64
	market        *string
	coinType      *string
}

func (r ApiPlaceLoanRequest) Authorization(authorization string) ApiPlaceLoanRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPlaceLoanRequest) AccessId(accessId string) ApiPlaceLoanRequest {
	r.accessId = &accessId
	return r
}
func (r ApiPlaceLoanRequest) Tonce(tonce int64) ApiPlaceLoanRequest {
	r.tonce = &tonce
	return r
}
func (r ApiPlaceLoanRequest) Market(market string) ApiPlaceLoanRequest {
	r.market = &market
	return r
}
func (r ApiPlaceLoanRequest) CoinType(coinType string) ApiPlaceLoanRequest {
	r.coinType = &coinType
	return r
}

func (r ApiPlaceLoanRequest) Execute() (InlineResponse20029, *_nethttp.Response, error) {
	return r.ApiService.PlaceLoanExecute(r)
}

/*
 * PlaceLoan Place Loan
 * Borrowing coins in a margin account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPlaceLoanRequest
 */
func (a *MarginApiService) PlaceLoan(ctx _context.Context) ApiPlaceLoanRequest {
	return ApiPlaceLoanRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20029
 */
func (a *MarginApiService) PlaceLoanExecute(r ApiPlaceLoanRequest) (InlineResponse20029, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20029
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarginApiService.PlaceLoan")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/margin/loan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.coinType == nil {
		return localVarReturnValue, nil, reportError("coinType is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("coin_type", parameterToString(*r.coinType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
