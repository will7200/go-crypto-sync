/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// OrderApiService OrderApi service
type OrderApiService service

type ApiAcquireExecutedOrderDetailRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	accessId      *string
	id            *int64
	page          *int64
}

func (r ApiAcquireExecutedOrderDetailRequest) Authorization(authorization string) ApiAcquireExecutedOrderDetailRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireExecutedOrderDetailRequest) AccessId(accessId string) ApiAcquireExecutedOrderDetailRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireExecutedOrderDetailRequest) Id(id int64) ApiAcquireExecutedOrderDetailRequest {
	r.id = &id
	return r
}
func (r ApiAcquireExecutedOrderDetailRequest) Page(page int64) ApiAcquireExecutedOrderDetailRequest {
	r.page = &page
	return r
}

func (r ApiAcquireExecutedOrderDetailRequest) Execute() (InlineResponse2008, *_nethttp.Response, error) {
	return r.ApiService.AcquireExecutedOrderDetailExecute(r)
}

/*
 * AcquireExecutedOrderDetail Acquire Executed Order Detail
 * Acquire Executed Order Detail
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireExecutedOrderDetailRequest
 */
func (a *OrderApiService) AcquireExecutedOrderDetail(ctx _context.Context) ApiAcquireExecutedOrderDetailRequest {
	return ApiAcquireExecutedOrderDetailRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2008
 */
func (a *OrderApiService) AcquireExecutedOrderDetailExecute(r ApiAcquireExecutedOrderDetailRequest) (InlineResponse2008, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2008
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.AcquireExecutedOrderDetail")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/deals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAcquireExecutedOrderListRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	accessId      *string
	market        *string
	page          *int64
}

func (r ApiAcquireExecutedOrderListRequest) Authorization(authorization string) ApiAcquireExecutedOrderListRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireExecutedOrderListRequest) AccessId(accessId string) ApiAcquireExecutedOrderListRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireExecutedOrderListRequest) Market(market string) ApiAcquireExecutedOrderListRequest {
	r.market = &market
	return r
}
func (r ApiAcquireExecutedOrderListRequest) Page(page int64) ApiAcquireExecutedOrderListRequest {
	r.page = &page
	return r
}

func (r ApiAcquireExecutedOrderListRequest) Execute() (InlineResponse20017, *_nethttp.Response, error) {
	return r.ApiService.AcquireExecutedOrderListExecute(r)
}

/*
 * AcquireExecutedOrderList Acquire Executed Order List
 * Acquire executed order list, including datas in last 2 days
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireExecutedOrderListRequest
 */
func (a *OrderApiService) AcquireExecutedOrderList(ctx _context.Context) ApiAcquireExecutedOrderListRequest {
	return ApiAcquireExecutedOrderListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20017
 */
func (a *OrderApiService) AcquireExecutedOrderListExecute(r ApiAcquireExecutedOrderListRequest) (InlineResponse20017, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20017
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.AcquireExecutedOrderList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/finished"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAcquireFinishedOrderDetailRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	id            string
	accessId      *string
	market        *string
	page          *int64
}

func (r ApiAcquireFinishedOrderDetailRequest) Authorization(authorization string) ApiAcquireFinishedOrderDetailRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireFinishedOrderDetailRequest) AccessId(accessId string) ApiAcquireFinishedOrderDetailRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireFinishedOrderDetailRequest) Market(market string) ApiAcquireFinishedOrderDetailRequest {
	r.market = &market
	return r
}
func (r ApiAcquireFinishedOrderDetailRequest) Page(page int64) ApiAcquireFinishedOrderDetailRequest {
	r.page = &page
	return r
}

func (r ApiAcquireFinishedOrderDetailRequest) Execute() (InlineResponse2008, *_nethttp.Response, error) {
	return r.ApiService.AcquireFinishedOrderDetailExecute(r)
}

/*
 * AcquireFinishedOrderDetail Acquire Finished Order Detail
 * Acquire Finished Order Detail
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id order no.
 * @return ApiAcquireFinishedOrderDetailRequest
 */
func (a *OrderApiService) AcquireFinishedOrderDetail(ctx _context.Context, id string) ApiAcquireFinishedOrderDetailRequest {
	return ApiAcquireFinishedOrderDetailRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2008
 */
func (a *OrderApiService) AcquireFinishedOrderDetailExecute(r ApiAcquireFinishedOrderDetailRequest) (InlineResponse2008, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2008
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.AcquireFinishedOrderDetail")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/finished/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAcquireMiningDifficultyRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
}

func (r ApiAcquireMiningDifficultyRequest) Authorization(authorization string) ApiAcquireMiningDifficultyRequest {
	r.authorization = &authorization
	return r
}

func (r ApiAcquireMiningDifficultyRequest) Execute() (InlineResponse2007, *_nethttp.Response, error) {
	return r.ApiService.AcquireMiningDifficultyExecute(r)
}

/*
 * AcquireMiningDifficulty Acquire Mining Difficulty
 * Acquire mining difficulty
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireMiningDifficultyRequest
 */
func (a *OrderApiService) AcquireMiningDifficulty(ctx _context.Context) ApiAcquireMiningDifficultyRequest {
	return ApiAcquireMiningDifficultyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2007
 */
func (a *OrderApiService) AcquireMiningDifficultyExecute(r ApiAcquireMiningDifficultyRequest) (InlineResponse2007, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2007
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.AcquireMiningDifficulty")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/mining/difficulty"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAcquireMultipleOrdersRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	accessId      *string
	batchIds      *string
	market        *string
	tonce         *int64
}

func (r ApiAcquireMultipleOrdersRequest) Authorization(authorization string) ApiAcquireMultipleOrdersRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireMultipleOrdersRequest) AccessId(accessId string) ApiAcquireMultipleOrdersRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireMultipleOrdersRequest) BatchIds(batchIds string) ApiAcquireMultipleOrdersRequest {
	r.batchIds = &batchIds
	return r
}
func (r ApiAcquireMultipleOrdersRequest) Market(market string) ApiAcquireMultipleOrdersRequest {
	r.market = &market
	return r
}
func (r ApiAcquireMultipleOrdersRequest) Tonce(tonce int64) ApiAcquireMultipleOrdersRequest {
	r.tonce = &tonce
	return r
}

func (r ApiAcquireMultipleOrdersRequest) Execute() (InlineResponse20010, *_nethttp.Response, error) {
	return r.ApiService.AcquireMultipleOrdersExecute(r)
}

/*
 * AcquireMultipleOrders Acquire Multiple Orders
 * acquire multiple orders status in the same market, limit up to 100
Rate Limit: 100/10s
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireMultipleOrdersRequest
*/
func (a *OrderApiService) AcquireMultipleOrders(ctx _context.Context) ApiAcquireMultipleOrdersRequest {
	return ApiAcquireMultipleOrdersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20010
 */
func (a *OrderApiService) AcquireMultipleOrdersExecute(r ApiAcquireMultipleOrdersRequest) (InlineResponse20010, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20010
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.AcquireMultipleOrders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/status/batch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.batchIds == nil {
		return localVarReturnValue, nil, reportError("batchIds is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("batch_ids", parameterToString(*r.batchIds, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAcquireOrderStatusRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	accessId      *string
	id            *int64
	market        *string
	tonce         *int64
}

func (r ApiAcquireOrderStatusRequest) Authorization(authorization string) ApiAcquireOrderStatusRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireOrderStatusRequest) AccessId(accessId string) ApiAcquireOrderStatusRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireOrderStatusRequest) Id(id int64) ApiAcquireOrderStatusRequest {
	r.id = &id
	return r
}
func (r ApiAcquireOrderStatusRequest) Market(market string) ApiAcquireOrderStatusRequest {
	r.market = &market
	return r
}
func (r ApiAcquireOrderStatusRequest) Tonce(tonce int64) ApiAcquireOrderStatusRequest {
	r.tonce = &tonce
	return r
}

func (r ApiAcquireOrderStatusRequest) Execute() (InlineResponse20018, *_nethttp.Response, error) {
	return r.ApiService.AcquireOrderStatusExecute(r)
}

/*
 * AcquireOrderStatus Acquire Order Status
 * Acquire order status
Rate Limit: 100/10s
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireOrderStatusRequest
*/
func (a *OrderApiService) AcquireOrderStatus(ctx _context.Context) ApiAcquireOrderStatusRequest {
	return ApiAcquireOrderStatusRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20018
 */
func (a *OrderApiService) AcquireOrderStatusExecute(r ApiAcquireOrderStatusRequest) (InlineResponse20018, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20018
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.AcquireOrderStatus")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAcquireUnexecutedOrderListRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	accessId      *string
	market        *string
	page          *int64
}

func (r ApiAcquireUnexecutedOrderListRequest) Authorization(authorization string) ApiAcquireUnexecutedOrderListRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireUnexecutedOrderListRequest) AccessId(accessId string) ApiAcquireUnexecutedOrderListRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireUnexecutedOrderListRequest) Market(market string) ApiAcquireUnexecutedOrderListRequest {
	r.market = &market
	return r
}
func (r ApiAcquireUnexecutedOrderListRequest) Page(page int64) ApiAcquireUnexecutedOrderListRequest {
	r.page = &page
	return r
}

func (r ApiAcquireUnexecutedOrderListRequest) Execute() (InlineResponse20012, *_nethttp.Response, error) {
	return r.ApiService.AcquireUnexecutedOrderListExecute(r)
}

/*
 * AcquireUnexecutedOrderList Acquire Unexecuted Order List
 * Acquire Unexecuted Order List
Rate Limit: 100/10s
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireUnexecutedOrderListRequest
*/
func (a *OrderApiService) AcquireUnexecutedOrderList(ctx _context.Context) ApiAcquireUnexecutedOrderListRequest {
	return ApiAcquireUnexecutedOrderListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20012
 */
func (a *OrderApiService) AcquireUnexecutedOrderListExecute(r ApiAcquireUnexecutedOrderListRequest) (InlineResponse20012, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20012
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.AcquireUnexecutedOrderList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/pending"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAcquireUserDealsRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	accessId      *string
	market        *string
	page          *int64
}

func (r ApiAcquireUserDealsRequest) Authorization(authorization string) ApiAcquireUserDealsRequest {
	r.authorization = &authorization
	return r
}
func (r ApiAcquireUserDealsRequest) AccessId(accessId string) ApiAcquireUserDealsRequest {
	r.accessId = &accessId
	return r
}
func (r ApiAcquireUserDealsRequest) Market(market string) ApiAcquireUserDealsRequest {
	r.market = &market
	return r
}
func (r ApiAcquireUserDealsRequest) Page(page int64) ApiAcquireUserDealsRequest {
	r.page = &page
	return r
}

func (r ApiAcquireUserDealsRequest) Execute() (InlineResponse20019, *_nethttp.Response, error) {
	return r.ApiService.AcquireUserDealsExecute(r)
}

/*
 * AcquireUserDeals Acquire User Deals
 * Acquire user deals
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAcquireUserDealsRequest
 */
func (a *OrderApiService) AcquireUserDeals(ctx _context.Context) ApiAcquireUserDealsRequest {
	return ApiAcquireUserDealsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20019
 */
func (a *OrderApiService) AcquireUserDealsExecute(r ApiAcquireUserDealsRequest) (InlineResponse20019, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20019
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.AcquireUserDeals")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/user/deals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.page == nil {
		return localVarReturnValue, nil, reportError("page is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCancelAllOrderRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	accessId      *string
	accountId     *int64
}

func (r ApiCancelAllOrderRequest) Authorization(authorization string) ApiCancelAllOrderRequest {
	r.authorization = &authorization
	return r
}
func (r ApiCancelAllOrderRequest) AccessId(accessId string) ApiCancelAllOrderRequest {
	r.accessId = &accessId
	return r
}
func (r ApiCancelAllOrderRequest) AccountId(accountId int64) ApiCancelAllOrderRequest {
	r.accountId = &accountId
	return r
}

func (r ApiCancelAllOrderRequest) Execute() (InlineResponse20013, *_nethttp.Response, error) {
	return r.ApiService.CancelAllOrderExecute(r)
}

/*
 * CancelAllOrder Cancel All Order
 * Cancel unexecuted order
Rate Limit: 100/10s
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCancelAllOrderRequest
*/
func (a *OrderApiService) CancelAllOrder(ctx _context.Context) ApiCancelAllOrderRequest {
	return ApiCancelAllOrderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20013
 */
func (a *OrderApiService) CancelAllOrderExecute(r ApiCancelAllOrderRequest) (InlineResponse20013, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20013
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.CancelAllOrder")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/pending"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.accountId == nil {
		return localVarReturnValue, nil, reportError("accountId is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("account_id", parameterToString(*r.accountId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCancelMultipleOrdersRequest struct {
	ctx           _context.Context
	ApiService    *OrderApiService
	authorization *string
	accessId      *string
	batchIds      *string
	market        *string
	tonce         *int64
	accountId     *int64
}

func (r ApiCancelMultipleOrdersRequest) Authorization(authorization string) ApiCancelMultipleOrdersRequest {
	r.authorization = &authorization
	return r
}
func (r ApiCancelMultipleOrdersRequest) AccessId(accessId string) ApiCancelMultipleOrdersRequest {
	r.accessId = &accessId
	return r
}
func (r ApiCancelMultipleOrdersRequest) BatchIds(batchIds string) ApiCancelMultipleOrdersRequest {
	r.batchIds = &batchIds
	return r
}
func (r ApiCancelMultipleOrdersRequest) Market(market string) ApiCancelMultipleOrdersRequest {
	r.market = &market
	return r
}
func (r ApiCancelMultipleOrdersRequest) Tonce(tonce int64) ApiCancelMultipleOrdersRequest {
	r.tonce = &tonce
	return r
}
func (r ApiCancelMultipleOrdersRequest) AccountId(accountId int64) ApiCancelMultipleOrdersRequest {
	r.accountId = &accountId
	return r
}

func (r ApiCancelMultipleOrdersRequest) Execute() (InlineResponse20011, *_nethttp.Response, error) {
	return r.ApiService.CancelMultipleOrdersExecute(r)
}

/*
 * CancelMultipleOrders Cancel Multiple Orders
 * cancel multiple orders in the same market, limit up to 100
Rate Limit: 100/10s
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCancelMultipleOrdersRequest
*/
func (a *OrderApiService) CancelMultipleOrders(ctx _context.Context) ApiCancelMultipleOrdersRequest {
	return ApiCancelMultipleOrdersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20011
 */
func (a *OrderApiService) CancelMultipleOrdersExecute(r ApiCancelMultipleOrdersRequest) (InlineResponse20011, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20011
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.CancelMultipleOrders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/pending/batch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.accessId == nil {
		return localVarReturnValue, nil, reportError("accessId is required and must be specified")
	}
	if r.batchIds == nil {
		return localVarReturnValue, nil, reportError("batchIds is required and must be specified")
	}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.tonce == nil {
		return localVarReturnValue, nil, reportError("tonce is required and must be specified")
	}

	localVarQueryParams.Add("access_id", parameterToString(*r.accessId, ""))
	localVarQueryParams.Add("batch_ids", parameterToString(*r.batchIds, ""))
	localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	localVarQueryParams.Add("tonce", parameterToString(*r.tonce, ""))
	if r.accountId != nil {
		localVarQueryParams.Add("account_id", parameterToString(*r.accountId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlaceIocOrderRequest struct {
	ctx                  _context.Context
	ApiService           *OrderApiService
	authorization        *string
	placeIocOrderRequest *PlaceIocOrderRequest
}

func (r ApiPlaceIocOrderRequest) Authorization(authorization string) ApiPlaceIocOrderRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPlaceIocOrderRequest) PlaceIocOrderRequest(placeIocOrderRequest PlaceIocOrderRequest) ApiPlaceIocOrderRequest {
	r.placeIocOrderRequest = &placeIocOrderRequest
	return r
}

func (r ApiPlaceIocOrderRequest) Execute() (InlineResponse20016, *_nethttp.Response, error) {
	return r.ApiService.PlaceIocOrderExecute(r)
}

/*
 * PlaceIocOrder Place IOC Order
 * place immediate-or-cancel order
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPlaceIocOrderRequest
 */
func (a *OrderApiService) PlaceIocOrder(ctx _context.Context) ApiPlaceIocOrderRequest {
	return ApiPlaceIocOrderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20016
 */
func (a *OrderApiService) PlaceIocOrderExecute(r ApiPlaceIocOrderRequest) (InlineResponse20016, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20016
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.PlaceIocOrder")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/ioc"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.placeIocOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlaceLimitOrderRequest struct {
	ctx                    _context.Context
	ApiService             *OrderApiService
	authorization          *string
	placeLimitOrderRequest *PlaceLimitOrderRequest
}

func (r ApiPlaceLimitOrderRequest) Authorization(authorization string) ApiPlaceLimitOrderRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPlaceLimitOrderRequest) PlaceLimitOrderRequest(placeLimitOrderRequest PlaceLimitOrderRequest) ApiPlaceLimitOrderRequest {
	r.placeLimitOrderRequest = &placeLimitOrderRequest
	return r
}

func (r ApiPlaceLimitOrderRequest) Execute() (InlineResponse20014, *_nethttp.Response, error) {
	return r.ApiService.PlaceLimitOrderExecute(r)
}

/*
 * PlaceLimitOrder Place Limit Order
 * place limit order
Rate Limit: 100/10s
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPlaceLimitOrderRequest
*/
func (a *OrderApiService) PlaceLimitOrder(ctx _context.Context) ApiPlaceLimitOrderRequest {
	return ApiPlaceLimitOrderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20014
 */
func (a *OrderApiService) PlaceLimitOrderExecute(r ApiPlaceLimitOrderRequest) (InlineResponse20014, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20014
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.PlaceLimitOrder")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/limit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.placeLimitOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlaceMarketOrderRequest struct {
	ctx                     _context.Context
	ApiService              *OrderApiService
	authorization           *string
	placeMarketOrderRequest *PlaceMarketOrderRequest
}

func (r ApiPlaceMarketOrderRequest) Authorization(authorization string) ApiPlaceMarketOrderRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPlaceMarketOrderRequest) PlaceMarketOrderRequest(placeMarketOrderRequest PlaceMarketOrderRequest) ApiPlaceMarketOrderRequest {
	r.placeMarketOrderRequest = &placeMarketOrderRequest
	return r
}

func (r ApiPlaceMarketOrderRequest) Execute() (InlineResponse20015, *_nethttp.Response, error) {
	return r.ApiService.PlaceMarketOrderExecute(r)
}

/*
 * PlaceMarketOrder Place Market Order
 * place market order
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPlaceMarketOrderRequest
 */
func (a *OrderApiService) PlaceMarketOrder(ctx _context.Context) ApiPlaceMarketOrderRequest {
	return ApiPlaceMarketOrderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse20015
 */
func (a *OrderApiService) PlaceMarketOrderExecute(r ApiPlaceMarketOrderRequest) (InlineResponse20015, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse20015
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.PlaceMarketOrder")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/market"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.placeMarketOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlaceMultipleLimitOrdersRequest struct {
	ctx                             _context.Context
	ApiService                      *OrderApiService
	authorization                   *string
	placeMultipleLimitOrdersRequest *PlaceMultipleLimitOrdersRequest
}

func (r ApiPlaceMultipleLimitOrdersRequest) Authorization(authorization string) ApiPlaceMultipleLimitOrdersRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPlaceMultipleLimitOrdersRequest) PlaceMultipleLimitOrdersRequest(placeMultipleLimitOrdersRequest PlaceMultipleLimitOrdersRequest) ApiPlaceMultipleLimitOrdersRequest {
	r.placeMultipleLimitOrdersRequest = &placeMultipleLimitOrdersRequest
	return r
}

func (r ApiPlaceMultipleLimitOrdersRequest) Execute() (InlineResponse2009, *_nethttp.Response, error) {
	return r.ApiService.PlaceMultipleLimitOrdersExecute(r)
}

/*
 * PlaceMultipleLimitOrders Place Multiple Limit Orders
 * place multiple limit orders in the same market, limit up to 100
Rate Limit: 100/10s
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPlaceMultipleLimitOrdersRequest
*/
func (a *OrderApiService) PlaceMultipleLimitOrders(ctx _context.Context) ApiPlaceMultipleLimitOrdersRequest {
	return ApiPlaceMultipleLimitOrdersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2009
 */
func (a *OrderApiService) PlaceMultipleLimitOrdersExecute(r ApiPlaceMultipleLimitOrdersRequest) (InlineResponse2009, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2009
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderApiService.PlaceMultipleLimitOrders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/limit/batch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.placeMultipleLimitOrdersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
