/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"encoding/json"
)

// AcquireCurrencyRateResponse AcquireCurrencyRate Response Value
type AcquireCurrencyRateResponse struct {
	// currency rate
	Rate *string `json:"rate,omitempty"`
}

// NewAcquireCurrencyRateResponse instantiates a new AcquireCurrencyRateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcquireCurrencyRateResponse() *AcquireCurrencyRateResponse {
	this := AcquireCurrencyRateResponse{}
	return &this
}

// NewAcquireCurrencyRateResponseWithDefaults instantiates a new AcquireCurrencyRateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcquireCurrencyRateResponseWithDefaults() *AcquireCurrencyRateResponse {
	this := AcquireCurrencyRateResponse{}
	return &this
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *AcquireCurrencyRateResponse) GetRate() string {
	if o == nil || o.Rate == nil {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireCurrencyRateResponse) GetRateOk() (*string, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *AcquireCurrencyRateResponse) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *AcquireCurrencyRateResponse) SetRate(v string) {
	o.Rate = &v
}

func (o AcquireCurrencyRateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	return json.Marshal(toSerialize)
}

type NullableAcquireCurrencyRateResponse struct {
	value *AcquireCurrencyRateResponse
	isSet bool
}

func (v NullableAcquireCurrencyRateResponse) Get() *AcquireCurrencyRateResponse {
	return v.value
}

func (v *NullableAcquireCurrencyRateResponse) Set(val *AcquireCurrencyRateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAcquireCurrencyRateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAcquireCurrencyRateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcquireCurrencyRateResponse(val *AcquireCurrencyRateResponse) *NullableAcquireCurrencyRateResponse {
	return &NullableAcquireCurrencyRateResponse{value: val, isSet: true}
}

func (v NullableAcquireCurrencyRateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcquireCurrencyRateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
