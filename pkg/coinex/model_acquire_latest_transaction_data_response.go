/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"encoding/json"
)

// AcquireLatestTransactionDataResponse AcquireLatestTransactionData Response Value
type AcquireLatestTransactionDataResponse struct {
	// Transaction No
	Id *int64 `json:"id,omitempty"`
	// Transaction time
	Date *int64 `json:"date,omitempty"`
	// Transaction time\\(ms\\)
	DateMs *int64 `json:"date_ms,omitempty"`
	// Transaction amount
	Amount *string `json:"amount,omitempty"`
	// Transaction price
	Price *string `json:"price,omitempty"`
	// buy;<br>sell;
	Type *string `json:"type,omitempty"`
}

// NewAcquireLatestTransactionDataResponse instantiates a new AcquireLatestTransactionDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcquireLatestTransactionDataResponse() *AcquireLatestTransactionDataResponse {
	this := AcquireLatestTransactionDataResponse{}
	return &this
}

// NewAcquireLatestTransactionDataResponseWithDefaults instantiates a new AcquireLatestTransactionDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcquireLatestTransactionDataResponseWithDefaults() *AcquireLatestTransactionDataResponse {
	this := AcquireLatestTransactionDataResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AcquireLatestTransactionDataResponse) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLatestTransactionDataResponse) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AcquireLatestTransactionDataResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AcquireLatestTransactionDataResponse) SetId(v int64) {
	o.Id = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AcquireLatestTransactionDataResponse) GetDate() int64 {
	if o == nil || o.Date == nil {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLatestTransactionDataResponse) GetDateOk() (*int64, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AcquireLatestTransactionDataResponse) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *AcquireLatestTransactionDataResponse) SetDate(v int64) {
	o.Date = &v
}

// GetDateMs returns the DateMs field value if set, zero value otherwise.
func (o *AcquireLatestTransactionDataResponse) GetDateMs() int64 {
	if o == nil || o.DateMs == nil {
		var ret int64
		return ret
	}
	return *o.DateMs
}

// GetDateMsOk returns a tuple with the DateMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLatestTransactionDataResponse) GetDateMsOk() (*int64, bool) {
	if o == nil || o.DateMs == nil {
		return nil, false
	}
	return o.DateMs, true
}

// HasDateMs returns a boolean if a field has been set.
func (o *AcquireLatestTransactionDataResponse) HasDateMs() bool {
	if o != nil && o.DateMs != nil {
		return true
	}

	return false
}

// SetDateMs gets a reference to the given int64 and assigns it to the DateMs field.
func (o *AcquireLatestTransactionDataResponse) SetDateMs(v int64) {
	o.DateMs = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AcquireLatestTransactionDataResponse) GetAmount() string {
	if o == nil || o.Amount == nil {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLatestTransactionDataResponse) GetAmountOk() (*string, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AcquireLatestTransactionDataResponse) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *AcquireLatestTransactionDataResponse) SetAmount(v string) {
	o.Amount = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AcquireLatestTransactionDataResponse) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLatestTransactionDataResponse) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *AcquireLatestTransactionDataResponse) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *AcquireLatestTransactionDataResponse) SetPrice(v string) {
	o.Price = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AcquireLatestTransactionDataResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLatestTransactionDataResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AcquireLatestTransactionDataResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AcquireLatestTransactionDataResponse) SetType(v string) {
	o.Type = &v
}

func (o AcquireLatestTransactionDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.DateMs != nil {
		toSerialize["date_ms"] = o.DateMs
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAcquireLatestTransactionDataResponse struct {
	value *AcquireLatestTransactionDataResponse
	isSet bool
}

func (v NullableAcquireLatestTransactionDataResponse) Get() *AcquireLatestTransactionDataResponse {
	return v.value
}

func (v *NullableAcquireLatestTransactionDataResponse) Set(val *AcquireLatestTransactionDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAcquireLatestTransactionDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAcquireLatestTransactionDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcquireLatestTransactionDataResponse(val *AcquireLatestTransactionDataResponse) *NullableAcquireLatestTransactionDataResponse {
	return &NullableAcquireLatestTransactionDataResponse{value: val, isSet: true}
}

func (v NullableAcquireLatestTransactionDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcquireLatestTransactionDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
