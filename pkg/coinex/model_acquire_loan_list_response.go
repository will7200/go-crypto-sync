/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"encoding/json"
)

// AcquireLoanListResponse AcquireLoanList Response Value
type AcquireLoanListResponse struct {
	// loan record ID
	LoanId *int64 `json:"loan_id,omitempty"`
	// create timestamp
	CreateTime *int64 `json:"create_time,omitempty"`
	// See<API invocation description market>
	Market *string `json:"market,omitempty"`
	// coin token name
	CoinType *string `json:"coin_type,omitempty"`
	// borrow amount
	LoanAmount *string `json:"loan_amount,omitempty"`
	// amount and interest need to repay
	UnflatAmount *string `json:"unflat_amount,omitempty"`
	// expire timestamp
	ExpireTime *int64 `json:"expire_time,omitempty"`
	// 0: close; <br>1: open;
	Renew *int64 `json:"renew,omitempty"`
	// daily interest rate
	DayRate *string `json:"day_rate,omitempty"`
	// pass: in loan;<br> burst: bankrupt;<br> arrears: in debt;<br> finish: paid off;
	Status *string `json:"status,omitempty"`
}

// NewAcquireLoanListResponse instantiates a new AcquireLoanListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcquireLoanListResponse() *AcquireLoanListResponse {
	this := AcquireLoanListResponse{}
	return &this
}

// NewAcquireLoanListResponseWithDefaults instantiates a new AcquireLoanListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcquireLoanListResponseWithDefaults() *AcquireLoanListResponse {
	this := AcquireLoanListResponse{}
	return &this
}

// GetLoanId returns the LoanId field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetLoanId() int64 {
	if o == nil || o.LoanId == nil {
		var ret int64
		return ret
	}
	return *o.LoanId
}

// GetLoanIdOk returns a tuple with the LoanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetLoanIdOk() (*int64, bool) {
	if o == nil || o.LoanId == nil {
		return nil, false
	}
	return o.LoanId, true
}

// HasLoanId returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasLoanId() bool {
	if o != nil && o.LoanId != nil {
		return true
	}

	return false
}

// SetLoanId gets a reference to the given int64 and assigns it to the LoanId field.
func (o *AcquireLoanListResponse) SetLoanId(v int64) {
	o.LoanId = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetCreateTime() int64 {
	if o == nil || o.CreateTime == nil {
		var ret int64
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetCreateTimeOk() (*int64, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given int64 and assigns it to the CreateTime field.
func (o *AcquireLoanListResponse) SetCreateTime(v int64) {
	o.CreateTime = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetMarket() string {
	if o == nil || o.Market == nil {
		var ret string
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetMarketOk() (*string, bool) {
	if o == nil || o.Market == nil {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasMarket() bool {
	if o != nil && o.Market != nil {
		return true
	}

	return false
}

// SetMarket gets a reference to the given string and assigns it to the Market field.
func (o *AcquireLoanListResponse) SetMarket(v string) {
	o.Market = &v
}

// GetCoinType returns the CoinType field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetCoinType() string {
	if o == nil || o.CoinType == nil {
		var ret string
		return ret
	}
	return *o.CoinType
}

// GetCoinTypeOk returns a tuple with the CoinType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetCoinTypeOk() (*string, bool) {
	if o == nil || o.CoinType == nil {
		return nil, false
	}
	return o.CoinType, true
}

// HasCoinType returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasCoinType() bool {
	if o != nil && o.CoinType != nil {
		return true
	}

	return false
}

// SetCoinType gets a reference to the given string and assigns it to the CoinType field.
func (o *AcquireLoanListResponse) SetCoinType(v string) {
	o.CoinType = &v
}

// GetLoanAmount returns the LoanAmount field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetLoanAmount() string {
	if o == nil || o.LoanAmount == nil {
		var ret string
		return ret
	}
	return *o.LoanAmount
}

// GetLoanAmountOk returns a tuple with the LoanAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetLoanAmountOk() (*string, bool) {
	if o == nil || o.LoanAmount == nil {
		return nil, false
	}
	return o.LoanAmount, true
}

// HasLoanAmount returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasLoanAmount() bool {
	if o != nil && o.LoanAmount != nil {
		return true
	}

	return false
}

// SetLoanAmount gets a reference to the given string and assigns it to the LoanAmount field.
func (o *AcquireLoanListResponse) SetLoanAmount(v string) {
	o.LoanAmount = &v
}

// GetUnflatAmount returns the UnflatAmount field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetUnflatAmount() string {
	if o == nil || o.UnflatAmount == nil {
		var ret string
		return ret
	}
	return *o.UnflatAmount
}

// GetUnflatAmountOk returns a tuple with the UnflatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetUnflatAmountOk() (*string, bool) {
	if o == nil || o.UnflatAmount == nil {
		return nil, false
	}
	return o.UnflatAmount, true
}

// HasUnflatAmount returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasUnflatAmount() bool {
	if o != nil && o.UnflatAmount != nil {
		return true
	}

	return false
}

// SetUnflatAmount gets a reference to the given string and assigns it to the UnflatAmount field.
func (o *AcquireLoanListResponse) SetUnflatAmount(v string) {
	o.UnflatAmount = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetExpireTime() int64 {
	if o == nil || o.ExpireTime == nil {
		var ret int64
		return ret
	}
	return *o.ExpireTime
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetExpireTimeOk() (*int64, bool) {
	if o == nil || o.ExpireTime == nil {
		return nil, false
	}
	return o.ExpireTime, true
}

// HasExpireTime returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasExpireTime() bool {
	if o != nil && o.ExpireTime != nil {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given int64 and assigns it to the ExpireTime field.
func (o *AcquireLoanListResponse) SetExpireTime(v int64) {
	o.ExpireTime = &v
}

// GetRenew returns the Renew field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetRenew() int64 {
	if o == nil || o.Renew == nil {
		var ret int64
		return ret
	}
	return *o.Renew
}

// GetRenewOk returns a tuple with the Renew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetRenewOk() (*int64, bool) {
	if o == nil || o.Renew == nil {
		return nil, false
	}
	return o.Renew, true
}

// HasRenew returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasRenew() bool {
	if o != nil && o.Renew != nil {
		return true
	}

	return false
}

// SetRenew gets a reference to the given int64 and assigns it to the Renew field.
func (o *AcquireLoanListResponse) SetRenew(v int64) {
	o.Renew = &v
}

// GetDayRate returns the DayRate field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetDayRate() string {
	if o == nil || o.DayRate == nil {
		var ret string
		return ret
	}
	return *o.DayRate
}

// GetDayRateOk returns a tuple with the DayRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetDayRateOk() (*string, bool) {
	if o == nil || o.DayRate == nil {
		return nil, false
	}
	return o.DayRate, true
}

// HasDayRate returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasDayRate() bool {
	if o != nil && o.DayRate != nil {
		return true
	}

	return false
}

// SetDayRate gets a reference to the given string and assigns it to the DayRate field.
func (o *AcquireLoanListResponse) SetDayRate(v string) {
	o.DayRate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AcquireLoanListResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireLoanListResponse) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AcquireLoanListResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AcquireLoanListResponse) SetStatus(v string) {
	o.Status = &v
}

func (o AcquireLoanListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LoanId != nil {
		toSerialize["loan_id"] = o.LoanId
	}
	if o.CreateTime != nil {
		toSerialize["create_time"] = o.CreateTime
	}
	if o.Market != nil {
		toSerialize["market"] = o.Market
	}
	if o.CoinType != nil {
		toSerialize["coin_type"] = o.CoinType
	}
	if o.LoanAmount != nil {
		toSerialize["loan_amount"] = o.LoanAmount
	}
	if o.UnflatAmount != nil {
		toSerialize["unflat_amount"] = o.UnflatAmount
	}
	if o.ExpireTime != nil {
		toSerialize["expire_time"] = o.ExpireTime
	}
	if o.Renew != nil {
		toSerialize["renew"] = o.Renew
	}
	if o.DayRate != nil {
		toSerialize["day_rate"] = o.DayRate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableAcquireLoanListResponse struct {
	value *AcquireLoanListResponse
	isSet bool
}

func (v NullableAcquireLoanListResponse) Get() *AcquireLoanListResponse {
	return v.value
}

func (v *NullableAcquireLoanListResponse) Set(val *AcquireLoanListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAcquireLoanListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAcquireLoanListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcquireLoanListResponse(val *AcquireLoanListResponse) *NullableAcquireLoanListResponse {
	return &NullableAcquireLoanListResponse{value: val, isSet: true}
}

func (v NullableAcquireLoanListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcquireLoanListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
