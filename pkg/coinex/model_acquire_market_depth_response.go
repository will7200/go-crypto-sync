/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"encoding/json"
)

// AcquireMarketDepthResponse AcquireMarketDepth Response Value
type AcquireMarketDepthResponse struct {
	// Last price
	Last *string `json:"last,omitempty"`
	// Updated time of Depth
	Time *float64 `json:"time,omitempty"`
	// Seller depth
	Asks *[]map[string]interface{} `json:"asks,omitempty"`
	// Buyer depth
	Bids *[]map[string]interface{} `json:"bids,omitempty"`
}

// NewAcquireMarketDepthResponse instantiates a new AcquireMarketDepthResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcquireMarketDepthResponse() *AcquireMarketDepthResponse {
	this := AcquireMarketDepthResponse{}
	return &this
}

// NewAcquireMarketDepthResponseWithDefaults instantiates a new AcquireMarketDepthResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcquireMarketDepthResponseWithDefaults() *AcquireMarketDepthResponse {
	this := AcquireMarketDepthResponse{}
	return &this
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *AcquireMarketDepthResponse) GetLast() string {
	if o == nil || o.Last == nil {
		var ret string
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireMarketDepthResponse) GetLastOk() (*string, bool) {
	if o == nil || o.Last == nil {
		return nil, false
	}
	return o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *AcquireMarketDepthResponse) HasLast() bool {
	if o != nil && o.Last != nil {
		return true
	}

	return false
}

// SetLast gets a reference to the given string and assigns it to the Last field.
func (o *AcquireMarketDepthResponse) SetLast(v string) {
	o.Last = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *AcquireMarketDepthResponse) GetTime() float64 {
	if o == nil || o.Time == nil {
		var ret float64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireMarketDepthResponse) GetTimeOk() (*float64, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *AcquireMarketDepthResponse) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given float64 and assigns it to the Time field.
func (o *AcquireMarketDepthResponse) SetTime(v float64) {
	o.Time = &v
}

// GetAsks returns the Asks field value if set, zero value otherwise.
func (o *AcquireMarketDepthResponse) GetAsks() []map[string]interface{} {
	if o == nil || o.Asks == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Asks
}

// GetAsksOk returns a tuple with the Asks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireMarketDepthResponse) GetAsksOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Asks == nil {
		return nil, false
	}
	return o.Asks, true
}

// HasAsks returns a boolean if a field has been set.
func (o *AcquireMarketDepthResponse) HasAsks() bool {
	if o != nil && o.Asks != nil {
		return true
	}

	return false
}

// SetAsks gets a reference to the given []map[string]interface{} and assigns it to the Asks field.
func (o *AcquireMarketDepthResponse) SetAsks(v []map[string]interface{}) {
	o.Asks = &v
}

// GetBids returns the Bids field value if set, zero value otherwise.
func (o *AcquireMarketDepthResponse) GetBids() []map[string]interface{} {
	if o == nil || o.Bids == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Bids
}

// GetBidsOk returns a tuple with the Bids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcquireMarketDepthResponse) GetBidsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Bids == nil {
		return nil, false
	}
	return o.Bids, true
}

// HasBids returns a boolean if a field has been set.
func (o *AcquireMarketDepthResponse) HasBids() bool {
	if o != nil && o.Bids != nil {
		return true
	}

	return false
}

// SetBids gets a reference to the given []map[string]interface{} and assigns it to the Bids field.
func (o *AcquireMarketDepthResponse) SetBids(v []map[string]interface{}) {
	o.Bids = &v
}

func (o AcquireMarketDepthResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Last != nil {
		toSerialize["last"] = o.Last
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Asks != nil {
		toSerialize["asks"] = o.Asks
	}
	if o.Bids != nil {
		toSerialize["bids"] = o.Bids
	}
	return json.Marshal(toSerialize)
}

type NullableAcquireMarketDepthResponse struct {
	value *AcquireMarketDepthResponse
	isSet bool
}

func (v NullableAcquireMarketDepthResponse) Get() *AcquireMarketDepthResponse {
	return v.value
}

func (v *NullableAcquireMarketDepthResponse) Set(val *AcquireMarketDepthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAcquireMarketDepthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAcquireMarketDepthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcquireMarketDepthResponse(val *AcquireMarketDepthResponse) *NullableAcquireMarketDepthResponse {
	return &NullableAcquireMarketDepthResponse{value: val, isSet: true}
}

func (v NullableAcquireMarketDepthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcquireMarketDepthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
