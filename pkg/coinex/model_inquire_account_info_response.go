/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"encoding/json"
)

// InquireAccountInfoResponse InquireAccountInfo Response Value
type InquireAccountInfoResponse struct {
	// frozen amount
	Frozen *map[string]interface{} `json:"frozen,omitempty"`
	// available amount
	Available *map[string]interface{} `json:"available,omitempty"`
}

// NewInquireAccountInfoResponse instantiates a new InquireAccountInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInquireAccountInfoResponse() *InquireAccountInfoResponse {
	this := InquireAccountInfoResponse{}
	return &this
}

// NewInquireAccountInfoResponseWithDefaults instantiates a new InquireAccountInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInquireAccountInfoResponseWithDefaults() *InquireAccountInfoResponse {
	this := InquireAccountInfoResponse{}
	return &this
}

// GetFrozen returns the Frozen field value if set, zero value otherwise.
func (o *InquireAccountInfoResponse) GetFrozen() map[string]interface{} {
	if o == nil || o.Frozen == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Frozen
}

// GetFrozenOk returns a tuple with the Frozen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireAccountInfoResponse) GetFrozenOk() (*map[string]interface{}, bool) {
	if o == nil || o.Frozen == nil {
		return nil, false
	}
	return o.Frozen, true
}

// HasFrozen returns a boolean if a field has been set.
func (o *InquireAccountInfoResponse) HasFrozen() bool {
	if o != nil && o.Frozen != nil {
		return true
	}

	return false
}

// SetFrozen gets a reference to the given map[string]interface{} and assigns it to the Frozen field.
func (o *InquireAccountInfoResponse) SetFrozen(v map[string]interface{}) {
	o.Frozen = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *InquireAccountInfoResponse) GetAvailable() map[string]interface{} {
	if o == nil || o.Available == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireAccountInfoResponse) GetAvailableOk() (*map[string]interface{}, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *InquireAccountInfoResponse) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given map[string]interface{} and assigns it to the Available field.
func (o *InquireAccountInfoResponse) SetAvailable(v map[string]interface{}) {
	o.Available = &v
}

func (o InquireAccountInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Frozen != nil {
		toSerialize["frozen"] = o.Frozen
	}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	return json.Marshal(toSerialize)
}

type NullableInquireAccountInfoResponse struct {
	value *InquireAccountInfoResponse
	isSet bool
}

func (v NullableInquireAccountInfoResponse) Get() *InquireAccountInfoResponse {
	return v.value
}

func (v *NullableInquireAccountInfoResponse) Set(val *InquireAccountInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInquireAccountInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInquireAccountInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInquireAccountInfoResponse(val *InquireAccountInfoResponse) *NullableInquireAccountInfoResponse {
	return &NullableInquireAccountInfoResponse{value: val, isSet: true}
}

func (v NullableInquireAccountInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInquireAccountInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
