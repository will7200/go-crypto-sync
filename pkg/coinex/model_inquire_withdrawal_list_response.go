/*
 * CoinEx API
 *
 * Coinex doesn't have a openapi docs sadville  Open and simple, CoinEx API makes sure that you can build your own trading tools to achieve a more effective trading strategy. CoinEx API is now available for these features:
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coinex

import (
	"encoding/json"
)

// InquireWithdrawalListResponse InquireWithdrawalList Response Value
type InquireWithdrawalListResponse struct {
	// coin withdrawal id
	CoinWithdrawId *map[string]interface{} `json:"coin_withdraw_id,omitempty"`
	// create time
	CreateTime *map[string]interface{} `json:"create_time,omitempty"`
	// withdrawal amount
	Amount *map[string]interface{} `json:"amount,omitempty"`
	// actual withdrawal amount
	ActualAmount *map[string]interface{} `json:"actual_amount,omitempty"`
	// tx id
	TxId *map[string]interface{} `json:"tx_id,omitempty"`
	// withdrawal address
	CoinAddress *map[string]interface{} `json:"coin_address,omitempty"`
	// tx fee
	TxFee *map[string]interface{} `json:"tx_fee,omitempty"`
	// confirmations
	Confirmations *map[string]interface{} `json:"confirmations,omitempty"`
	// coin type
	CoinType *map[string]interface{} `json:"coin_type,omitempty"`
	// audit;<br>pass;<br>processing;<br>confirming;<br>not\\_pass;<br>cancel;<br>finish;<br>fail;
	Status *map[string]interface{} `json:"status,omitempty"`
}

// NewInquireWithdrawalListResponse instantiates a new InquireWithdrawalListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInquireWithdrawalListResponse() *InquireWithdrawalListResponse {
	this := InquireWithdrawalListResponse{}
	return &this
}

// NewInquireWithdrawalListResponseWithDefaults instantiates a new InquireWithdrawalListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInquireWithdrawalListResponseWithDefaults() *InquireWithdrawalListResponse {
	this := InquireWithdrawalListResponse{}
	return &this
}

// GetCoinWithdrawId returns the CoinWithdrawId field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetCoinWithdrawId() map[string]interface{} {
	if o == nil || o.CoinWithdrawId == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CoinWithdrawId
}

// GetCoinWithdrawIdOk returns a tuple with the CoinWithdrawId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetCoinWithdrawIdOk() (*map[string]interface{}, bool) {
	if o == nil || o.CoinWithdrawId == nil {
		return nil, false
	}
	return o.CoinWithdrawId, true
}

// HasCoinWithdrawId returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasCoinWithdrawId() bool {
	if o != nil && o.CoinWithdrawId != nil {
		return true
	}

	return false
}

// SetCoinWithdrawId gets a reference to the given map[string]interface{} and assigns it to the CoinWithdrawId field.
func (o *InquireWithdrawalListResponse) SetCoinWithdrawId(v map[string]interface{}) {
	o.CoinWithdrawId = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetCreateTime() map[string]interface{} {
	if o == nil || o.CreateTime == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetCreateTimeOk() (*map[string]interface{}, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given map[string]interface{} and assigns it to the CreateTime field.
func (o *InquireWithdrawalListResponse) SetCreateTime(v map[string]interface{}) {
	o.CreateTime = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetAmount() map[string]interface{} {
	if o == nil || o.Amount == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetAmountOk() (*map[string]interface{}, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given map[string]interface{} and assigns it to the Amount field.
func (o *InquireWithdrawalListResponse) SetAmount(v map[string]interface{}) {
	o.Amount = &v
}

// GetActualAmount returns the ActualAmount field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetActualAmount() map[string]interface{} {
	if o == nil || o.ActualAmount == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ActualAmount
}

// GetActualAmountOk returns a tuple with the ActualAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetActualAmountOk() (*map[string]interface{}, bool) {
	if o == nil || o.ActualAmount == nil {
		return nil, false
	}
	return o.ActualAmount, true
}

// HasActualAmount returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasActualAmount() bool {
	if o != nil && o.ActualAmount != nil {
		return true
	}

	return false
}

// SetActualAmount gets a reference to the given map[string]interface{} and assigns it to the ActualAmount field.
func (o *InquireWithdrawalListResponse) SetActualAmount(v map[string]interface{}) {
	o.ActualAmount = &v
}

// GetTxId returns the TxId field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetTxId() map[string]interface{} {
	if o == nil || o.TxId == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetTxIdOk() (*map[string]interface{}, bool) {
	if o == nil || o.TxId == nil {
		return nil, false
	}
	return o.TxId, true
}

// HasTxId returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasTxId() bool {
	if o != nil && o.TxId != nil {
		return true
	}

	return false
}

// SetTxId gets a reference to the given map[string]interface{} and assigns it to the TxId field.
func (o *InquireWithdrawalListResponse) SetTxId(v map[string]interface{}) {
	o.TxId = &v
}

// GetCoinAddress returns the CoinAddress field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetCoinAddress() map[string]interface{} {
	if o == nil || o.CoinAddress == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CoinAddress
}

// GetCoinAddressOk returns a tuple with the CoinAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetCoinAddressOk() (*map[string]interface{}, bool) {
	if o == nil || o.CoinAddress == nil {
		return nil, false
	}
	return o.CoinAddress, true
}

// HasCoinAddress returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasCoinAddress() bool {
	if o != nil && o.CoinAddress != nil {
		return true
	}

	return false
}

// SetCoinAddress gets a reference to the given map[string]interface{} and assigns it to the CoinAddress field.
func (o *InquireWithdrawalListResponse) SetCoinAddress(v map[string]interface{}) {
	o.CoinAddress = &v
}

// GetTxFee returns the TxFee field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetTxFee() map[string]interface{} {
	if o == nil || o.TxFee == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.TxFee
}

// GetTxFeeOk returns a tuple with the TxFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetTxFeeOk() (*map[string]interface{}, bool) {
	if o == nil || o.TxFee == nil {
		return nil, false
	}
	return o.TxFee, true
}

// HasTxFee returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasTxFee() bool {
	if o != nil && o.TxFee != nil {
		return true
	}

	return false
}

// SetTxFee gets a reference to the given map[string]interface{} and assigns it to the TxFee field.
func (o *InquireWithdrawalListResponse) SetTxFee(v map[string]interface{}) {
	o.TxFee = &v
}

// GetConfirmations returns the Confirmations field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetConfirmations() map[string]interface{} {
	if o == nil || o.Confirmations == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Confirmations
}

// GetConfirmationsOk returns a tuple with the Confirmations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetConfirmationsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Confirmations == nil {
		return nil, false
	}
	return o.Confirmations, true
}

// HasConfirmations returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasConfirmations() bool {
	if o != nil && o.Confirmations != nil {
		return true
	}

	return false
}

// SetConfirmations gets a reference to the given map[string]interface{} and assigns it to the Confirmations field.
func (o *InquireWithdrawalListResponse) SetConfirmations(v map[string]interface{}) {
	o.Confirmations = &v
}

// GetCoinType returns the CoinType field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetCoinType() map[string]interface{} {
	if o == nil || o.CoinType == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CoinType
}

// GetCoinTypeOk returns a tuple with the CoinType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetCoinTypeOk() (*map[string]interface{}, bool) {
	if o == nil || o.CoinType == nil {
		return nil, false
	}
	return o.CoinType, true
}

// HasCoinType returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasCoinType() bool {
	if o != nil && o.CoinType != nil {
		return true
	}

	return false
}

// SetCoinType gets a reference to the given map[string]interface{} and assigns it to the CoinType field.
func (o *InquireWithdrawalListResponse) SetCoinType(v map[string]interface{}) {
	o.CoinType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InquireWithdrawalListResponse) GetStatus() map[string]interface{} {
	if o == nil || o.Status == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InquireWithdrawalListResponse) GetStatusOk() (*map[string]interface{}, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InquireWithdrawalListResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given map[string]interface{} and assigns it to the Status field.
func (o *InquireWithdrawalListResponse) SetStatus(v map[string]interface{}) {
	o.Status = &v
}

func (o InquireWithdrawalListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CoinWithdrawId != nil {
		toSerialize["coin_withdraw_id"] = o.CoinWithdrawId
	}
	if o.CreateTime != nil {
		toSerialize["create_time"] = o.CreateTime
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.ActualAmount != nil {
		toSerialize["actual_amount"] = o.ActualAmount
	}
	if o.TxId != nil {
		toSerialize["tx_id"] = o.TxId
	}
	if o.CoinAddress != nil {
		toSerialize["coin_address"] = o.CoinAddress
	}
	if o.TxFee != nil {
		toSerialize["tx_fee"] = o.TxFee
	}
	if o.Confirmations != nil {
		toSerialize["confirmations"] = o.Confirmations
	}
	if o.CoinType != nil {
		toSerialize["coin_type"] = o.CoinType
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableInquireWithdrawalListResponse struct {
	value *InquireWithdrawalListResponse
	isSet bool
}

func (v NullableInquireWithdrawalListResponse) Get() *InquireWithdrawalListResponse {
	return v.value
}

func (v *NullableInquireWithdrawalListResponse) Set(val *InquireWithdrawalListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInquireWithdrawalListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInquireWithdrawalListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInquireWithdrawalListResponse(val *InquireWithdrawalListResponse) *NullableInquireWithdrawalListResponse {
	return &NullableInquireWithdrawalListResponse{value: val, isSet: true}
}

func (v NullableInquireWithdrawalListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInquireWithdrawalListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
