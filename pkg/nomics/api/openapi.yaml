openapi: 3.0.3
info:
  description: |-
    # Introduction

    Welcome to the Nomics Cryptocurrency & Bitcoin API. To sign up for an API key please [go here](https://p.nomics.com/cryptocurrency-bitcoin-api/).

    [nomics.com](https://nomics.com) is built entirely with the Nomics API. Everything
    we've done on [nomics.com](https://nomics.com) you can do with our API. There are
    no internal API endpoints.

    If you need support, reach out to use at our [forums](https://forums.nomics.com/).

    # General

    ## API Server URL

    The Nomics API runs at `https://api.nomics.com/v1`. All requests should be prefixed
    by the server URL.

    ## JSON and CSV Support

    By default, all endpoints serve data as JSON. However, by passing `format=csv` in the URL,
    some endpoints will return CSV data. This can be used in Google Sheets via the `IMPORTDATA`
    function.

    CSV responses will not contain a header row, this is so that data can be easily concatenated
    from multiple requests. The fields will be rendered in the same order as the JSON fields. See
    the endpoint's documentation for an example.

    Not all endpoints support CSV. Endpoints that support CSV will have the `format` parameter in
    the parameters section.

    ## Errors

    The Nomics API uses standard HTTP status codes to indicate success or failure. 200
    represents success, 4xx represents a user error (such as a problem with your key),
    and 5xx represents a problem with our API.

    ## Versioning

    We follow Semantic Versioning. That means our API is versioned as Major.Minor.Patch.
    For example, Version 1.2.3 has major version 1, minor version 2, and patch version 3.

    Major version changes indicate that we have altered
    the API significantly and it is no longer compatible with a previous version. Major
    versions are also used as the API URL prefix.

    When we update the major version, we will not remove the previous version without notice
    to API customers and a deprecation period to allow everyone to smoothly update to the new
    version.

    Minor version changes indicate that we have added new functionality without breaking
    any existing functionality. An API client is compatible with future minor versions. Note
    that a minor version update may add a new field to an existing API endpoint's response. Your
    API client must ignore fields it does not understand in order to be compatible with future
    minor versions.

    Patch version changes indicate we fixed a bug or security vulnerability. Patch versions
    don't add new functionality.

    ## Cross Origin Resource Sharing (CORS)

    This API supports Cross Origin Resource Sharing, which allows you to make API requests directly
    from your user's browser.

    To use CORS, you must provide Nomics with the domains on which your application will run so that
    we can whitelist them for CORS access.

    Requests from `localhost`, `127.0.0.1`, and `0.0.0.0` will always succeed to aid in development.

    ## Demo Application

    A demo application using the Nomics API, CORS, and React is available on Glitch.com. This can help
    you get started using the Nomics API. Keep in mind it uses the demo key, which is rotated frequently.
    You should get your own API key before deploying an app to production. Check it out:

    <div class="glitch-embed-wrap" style="height: 420px; width: 100%;">
      <iframe src="https://glitch.com/embed/#!/embed/nomics-api-demo?path=README.md" alt="nomics-api-demo on glitch" style="height: 100%; width: 100%; border: 0;"></iframe>
    </div>

    ## Demo Spreadsheet

    Here is a demo of using the Nomics API with Google Sheets.

    <iframe width="100%" height="400px" src="https://docs.google.com/spreadsheets/d/e/2PACX-1vShn2iWjvqQ0ueBa9l9g1UBYVM92OZSgZ4nmp0rWuykvHPrvyMyMeSN4r0Orj0ACEIIKdCz6cc5abCw/pubhtml?widget=true&amp;headers=false"></iframe>

    ### Formulas

    * A2: `=IMPORTDATA("https://api.nomics.com/v1/prices?key=your-key-here&format=csv")`
    * Column F: `=LOOKUP(D2,A:A,B:B)` finds D2 (BTC) in column A and pulls the price from column B
    * Column G: `=E2*F2`
    * Column H: `=G2/I$2`
    * Column I: `=SUM(G:G)`

    # SDKs and Libraries

    ## By Nomics
    - [Nomics JavaScript Client](https://github.com/nomics-crypto/nomics-javascript)

    ## Community Submissions
    - [Nomics.com Swift SDK](https://forums.nomics.com/t/swift-sdk-supporting-ios-macos-tvos-and-watchos/) by Nick DiZazzo
    - [Nomics Node.js Library](https://forums.nomics.com/t/i-made-a-library-for-node-js/) by mikunimaru
    - [Nomics Python Wrapper](https://forums.nomics.com/t/python-package-for-nomics-api/119) by Taylor Facen
    - [Python Wrapper for Nomics](https://github.com/AviFelman/py-nomics) by Avi Felman

    We love watching developers explore new use-cases with our API. Whether you're tinkering on a small side project or building an open-source resource, please share what you're up to in our [forums](https://forums.nomics.com/).

    # Authentication

    <!-- ReDoc-Inject: <security-definitions> -->
  title: Nomics Cryptocurrency & Bitcoin API
  version: 1.0.0
servers:
- description: API Server
  url: https://api.nomics.com/v1
security:
- Key: []
tags:
- description: |
    ### What are OHLCV Candles?

    OHLCV Candles is an abbreviation of "Open, High, Low, Close, and Volume Candlestick Data". Each "Candle"
    represents a point in time of an asset's price history.

    For example, take the following pricing data:

    | Month    | High | Open | Close | Low |
    |----------|------|------|-------|-----|
    | January  | $70  | $20  | $50   | $15 |
    | February | $66  | $50  | $45   | $25 |
    | March    | $80  | $45  | $62   | $30 |
    | April    | $95  | $62  | $85   | $50 |
    | May      | $90  | $85  | $70   | $60 |

    A candlestick chart of this data in Google Sheets looks like this:

    ![Candlestick Chart](https://s3.us-east-2.amazonaws.com/nomics-api-documentation/candlestick-chart.png)

    The lines extending from the boxes are called "wicks" and they represent the high and low for that time
    period. The top and bottom of the boxes represent the open and close. Different visualizations of candles
    have different ways of conveying which of the top and bottom of the boxes are the open and close. In this
    case, with Google Sheets, candles that close higher than they open are solid colors, while candles that
    close lower than they open are transparent.

    ### How are Candles Built?

    At Nomics, we have three methods of building candles:

    1. Building candles from raw, gapless trade execution data (sometimes called "tick data")
    2. Ingesting candles directly from exchanges, and building intermediate sizes
    3. Ingesting 24 hour tickers from exchanges, and extrapolating estimated candles

    The first method, trades, is greatly preferred as it yields the most accurate and trustworthy data. The second
    method, candles, is also very accurate, but without the underlying trade data, it is not as transparent. The
    third method, tickers, is the lowest quality source and should only be used as an estimate of pricing activity.

    ### Why don't candles show up right away?

    You may notice that candles don't show up immediately after they start. For example, at 12:01am, you may not see
    a daily, hourly, or even a minute candle for 12:00am yet. This is because several steps need to occur in order to
    build a candle:

    1. Trades must be executed on an exchange. If there are no trades after 12:00am for a market or currency, there
    is simply no data to represent.
    2. Trades must be ingested into Nomics. We ingest data as fast as possible, but due to exchange rate limits and
    limitations on the speed of data across the internet, there is always a delay between a trade being executed and
    when it arrives in the Nomics database.
    3. An Exchange Candle must be built. Once we have the trade in our database, we then aggregate all trades within
    the candle's time range in order to build and store the candle.
    4. An Aggregate Candle must be built. After an Exchange Candle is built (which represents a single market on a
    single exchange) we must build an Aggregated Candle (which represents an asset across all markets and exchanges)

    Every step in this pipeline takes time to compute, which means that it may be seconds, or even minutes before
    a trade is fully represented by all candle types in our data set.

    For more information about update frequencies, see the descriptions of our candle types below.
  name: Candles*
paths:
  /currencies/ticker:
    get:
      description: |
        Price, volume, market cap, and rank for all currencies across 1 hour, 1 day, 7 day, 30 day, 365 day, and year to date intervals. Current prices are updated every 10 seconds.
      operationId: getCurrenciesTicker
      parameters:
      - description: |
          Comma separated list of Nomics Currency IDs to filter result rows
        example: BTC,ETH,XRP
        explode: true
        in: query
        name: ids
        required: false
        schema:
          type: string
        style: form
      - description: Comma separated time interval of the ticker(s). Default is `1d,7d,30d,365d,ytd`.
        example: 1d,30d
        explode: true
        in: query
        name: interval
        required: false
        schema:
          enum:
          - 1h
          - 1d
          - 7d
          - 30d
          - 365d
          - ytd
          type: string
        style: form
      - deprecated: true
        description: Currency to quote ticker price, market cap, and volume values.
          Must be a valid currency from [Exchange Rates](#operation/getExchangeRates).
          Default is `USD`.
        example: EUR
        explode: true
        in: query
        name: quote-currency
        required: false
        schema:
          type: string
        style: form
      - description: Currency to quote ticker price, market cap, and volume values.
          May be a Fiat Currency or Cryptocurrency. Default is `USD`.
        example: EUR
        explode: true
        in: query
        name: convert
        required: false
        schema:
          type: string
        style: form
      - description: |
          Status by which to filter currencies. If not provided, all currencies are shown.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - inactive
          - dead
          type: string
        style: form
      - description: |
          Further filter the set of currencies.  The `new` filter returns currencies that have recently been priced by Nomics and `any` returns currencies regardless of their state.  The `any` filer may be used to retrieve new-but-stale currencies that are listed under `new`, but are no longer active.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          enum:
          - any
          - new
          type: string
        style: form
      - description: |
          How to sort the returned currencies.  `rank` sorts by rank
          ascending and `first_priced_at` sorts by when each
          currency was first priced by Nomics descending.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - rank
          - first_priced_at
          type: string
        style: form
      - description: |
          Whether to include [Transparent Volume](https://blog.nomics.com/essays/transparent-volume/) and transparent market cap information in the response. Default is `false`. This option is only available to customers of our paid API plans.
        example: false
        explode: true
        in: query
        name: include-transparency
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          The maximum number of items to return per paginated response.
          Paginated responses include an additional response header,
          `X-Pagination-Total-Items`, which represents the total number
          of items available after all the request filters have been
          applied.  Must be between `1` and `100` (inclusive).
        example: 100
        explode: true
        in: query
        name: per-page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Which page of items to get.  Only applicable when `per-page` is also supplied.
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200'
                type: array
          description: Price, volume, market cap, and rank for all currencies
        "401":
          description: Authentication information is missing or invalid
      summary: Currencies Ticker
      tags:
      - Currencies
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&per-page=100&page=1"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&per-page=100&page=1")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&per-page=100&page=1")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&per-page=100&page=1")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/currencies/ticker?key=your-key-here&ids=BTC,ETH,XRP&interval=1d,30d&convert=EUR&per-page=100&page=1"
          print(urllib.request.urlopen(url).read())
  /currencies:
    get:
      description: |
        The currencies endpoint returns all the currencies and their metadata that Nomics supports.
      operationId: getCurrencies
      parameters:
      - description: |
          Comma separated list of Nomics Currency IDs to filter result rows
        example: BTC,ETH,XRP
        explode: true
        in: query
        name: ids
        required: false
        schema:
          type: string
        style: form
      - description: |
          Comma separated list of currency attributes to filter result columns
        example: id,name,logo_url
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_1'
                type: array
            text/csv:
              example: BTC
              schema:
                type: string
          description: A list of Nomics Currencies
        "401":
          description: Authentication information is missing or invalid
      summary: Currencies Metadata
      tags:
      - Currencies
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/currencies?key=your-key-here&ids=BTC,ETH,XRP&attributes=id,name,logo_url"
          print(urllib.request.urlopen(url).read())
  /currencies/sparkline:
    get:
      description: |
        The currencies sparkline endpoint returns prices for all currencies within a customizable time interval
        suitable for sparkline charts.

        **Note** the timestamps and prices are built off of OHLCV candles using the close price. This means that the timestamp
        represents the start of the candle, and the price is the close price of that candle. This means the response's final timestamp
        and price value are always as current as possible, but also that the price is effectively "off" by one candle. This endpoint
        is designed to serve as a convenient way to render sparklines, if you need exactly aligned times and prices you can use the
        [Aggregated OHLCV Candles endpoint](#operation/getCandles).
      operationId: getCurrenciesSparkline
      parameters:
      - description: |
          Comma separated list of Nomics Currency IDs to filter result rows
        example: BTC,ETH,XRP
        explode: true
        in: query
        name: ids
        required: false
        schema:
          type: string
        style: form
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Currency to quote ticker price, market cap, and volume values.
          May be a Fiat Currency or Cryptocurrency. Default is `USD`.
        explode: true
        in: query
        name: convert
        required: false
        schema:
          example: EUR
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_2'
                type: array
          description: Currency performance over time for all currencies over the
            requested time period.
        "401":
          description: Authentication information is missing or invalid
      summary: Currencies Sparkline
      tags:
      - Currencies
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/currencies/sparkline?key=your-key-here&ids=BTC,ETH,XRP&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /global-ticker:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        Globally-aggregated market cap and volume data over various
        intervals across all currencies.

        The total `volume` fields are computed by summing the
        `spot_volume` and `derivative_volume` fields at each interval.
      operationId: getGlobalTicker
      parameters:
      - description: Currency to quote ticker price, market cap, and volume values.
          May be a Fiat Currency or Cryptocurrency. Default is `USD`.
        explode: true
        in: query
        name: convert
        required: false
        schema:
          example: EUR
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: The global ticker
        "401":
          description: Authentication information is missing or invalid
      summary: Global Ticker
      tags:
      - Global*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/global-ticker?key=your-key-here"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/global-ticker?key=your-key-here")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/global-ticker?key=your-key-here")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/global-ticker?key=your-key-here")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/global-ticker?key=your-key-here"
          print(urllib.request.urlopen(url).read())
  /supplies/history:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        Supply history per currency for every day in a time range.
      operationId: getSupplyHistory
      parameters:
      - description: Currency ID
        example: BTC
        explode: true
        in: query
        name: currency
        required: true
        schema:
          type: string
        style: form
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_4'
                type: array
            text/csv:
              example: 05/14/2018 00:04:31,17052037.0,21000000.0
              schema:
                type: string
          description: Daily supply history for a currency.
        "401":
          description: Authentication information is missing or invalid
      summary: Supply History
      tags:
      - Currencies*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/supplies/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /supplies/interval:
    get:
      deprecated: true
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        Open and close supply information for all currencies between a customizable time interval.
      operationId: getSuppliesInterval
      parameters:
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_5'
                type: array
            text/csv:
              example: BTC,17032187.0,21000000.0,05/14/2018 00:04:31,17052037.0,21000000.0,05/24/2018
                14:19:34
              schema:
                type: string
          description: Open and close supply information
        "401":
          description: Authentication information is missing or invalid
      summary: Supplies Interval
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/supplies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /exchanges/ticker:
    get:
      description: |
        The Exchanges Ticker provides high level information about the exchanges integrated with Nomics.
        It provides a limited amount of metadata, the type of integration, the time range of available data, pairs,
        and interval information about the volume and, where applicable, the number of trades.
      operationId: getExchangesTicker
      parameters:
      - description: Comma separated list of Nomics Exchange IDs to filter result
          rows
        example: binance,gdax
        explode: true
        in: query
        name: ids
        required: false
        schema:
          type: string
        style: form
      - description: Comma separated time interval of the ticker(s). Default is `1d`.
        example: 1d,30d
        explode: true
        in: query
        name: interval
        required: false
        schema:
          enum:
          - 1h
          - 1d
          - 7d
          - 30d
          - 365d
          - ytd
          type: string
        style: form
      - description: Currency to quote ticker price, market cap, and volume values.
          May be a Fiat Currency or Cryptocurrency. Default is `USD`.
        example: EUR
        explode: true
        in: query
        name: convert
        required: false
        schema:
          type: string
        style: form
      - description: |
          Status by which to filter exchanges.  If not provided, all exchanges are shown.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - inactive
          type: string
        style: form
      - description: |
          Type by which to filter exchanges.  If not provided, all exchanges are shown.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - spot
          - derivative
          type: string
        style: form
      - description: |
          When `true`, selects centralized exchanges.  When `false`,
          removes centralized exchanges.  If omitted, all exchange types
          are shown.  May be used in conjunction with `decentralized` to
          form an "and" filter.
        explode: true
        in: query
        name: centralized
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: |
          When `true`, selects decentralized exchanges.  When `false`,
          removes decentralized exchanges.  If omitted, all exchange
          types are shown.  May be used in conjunction with
          `centralized` to form an "and" filter.
        explode: true
        in: query
        name: decentralized
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: |
          The maximum number of items to return per paginated response.
          Paginated responses include an additional response header,
          `X-Pagination-Total-Items`, which represents the total number
          of items available after all the request filters have been
          applied.  Must be between `1` and `100` (inclusive).
        example: 100
        explode: true
        in: query
        name: per-page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Which page of items to get.  Only applicable when `per-page` is also supplied.
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_6'
                type: array
          description: Metadata and interval data for exchanges
        "401":
          description: Authentication information is missing or invalid
      summary: Exchanges Ticker
      tags:
      - Exchanges*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchanges/ticker?key=your-key-here&ids=binance,gdax&interval=1d,30d&convert=EUR&per-page=100&page=1"
          print(urllib.request.urlopen(url).read())
  /exchanges/volume/history:
    get:
      description: |
        Exchange Volume History is the total volume for all
        cryptoassets of an exchange in USD at intervals between the
        requested time period.  For each entry, the `volume` field
        represents the sum of the `spot_volume` and
        `derivative_volume` fields.
      operationId: getExchangeVolumeHistory
      parameters:
      - description: Exchange ID
        example: binance
        explode: true
        in: query
        name: exchange
        required: true
        schema:
          type: string
        style: form
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Currency to quote ticker price, market cap, and volume values.
          May be a Fiat Currency or Cryptocurrency. Default is `USD`.
        explode: true
        in: query
        name: convert
        required: false
        schema:
          example: EUR
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      - description: |
          Whether to include [Transparent Volume](https://blog.nomics.com/essays/transparent-volume/) and transparent market cap information in the response. Default is `false`. This option is only available to customers of our paid API plans.
        example: false
        explode: true
        in: query
        name: include-transparency
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_7'
                type: array
            test/csv:
              example: 04/14/2018 00:00:00,5209035491
              schema:
                type: string
          description: Volume over time for all currencies of an exchange
        "401":
          description: Authentication information is missing or invalid
      summary: Exchanges Volume History
      tags:
      - Exchanges*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchanges/volume/history?key=your-key-here&exchange=binance&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /exchanges:
    get:
      description: |
        The exchanges endpoint returns all the exchanges and their metadata that Nomics supports.
      operationId: getExchanges
      parameters:
      - description: |
          Comma separated list of Nomics Exchange IDs to filter result rows
        example: binance,idex,bittrex
        explode: true
        in: query
        name: ids
        required: false
        schema:
          type: string
        style: form
      - description: |
          Comma separated list of exchange attributes to filter result columns
        example: id,name,transparency_grade
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          type: string
        style: form
      - description: |
          When `true`, selects centralized exchanges.  When `false`,
          removes centralized exchanges.  If omitted, all exchange types
          are shown.  May be used in conjunction with `decentralized` to
          form an "and" filter.
        explode: true
        in: query
        name: centralized
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: |
          When `true`, selects decentralized exchanges.  When `false`,
          removes decentralized exchanges.  If omitted, all exchange
          types are shown.  May be used in conjunction with
          `centralized` to form an "and" filter.
        explode: true
        in: query
        name: decentralized
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_8'
                type: array
            text/csv:
              example: Binance
              schema:
                type: string
          description: A list of Nomics Exchanges
        "401":
          description: Authentication information is missing or invalid
      summary: Exchanges Metadata
      tags:
      - Exchanges*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchanges?key=your-key-here&ids=binance,idex,bittrex&attributes=id,name,transparency_grade"
          print(urllib.request.urlopen(url).read())
  /markets:
    get:
      description: |
        The markets endpoint returns information on the exchanges and markets that Nomics supports,
        in addition to the Nomics currency identifiers for the base and quote currency.
      operationId: getMarkets
      parameters:
      - description: Nomics Exchange ID to filter by
        example: binance
        explode: true
        in: query
        name: exchange
        required: false
        schema:
          type: string
        style: form
      - description: Comma separated list of base currencies to filter by
        example: BTC,ETH,LTC,XMR
        explode: true
        in: query
        name: base
        required: false
        schema:
          type: string
        style: form
      - description: Comma separated list of quote currencies to filter by
        example: BTC,ETH,BNB
        explode: true
        in: query
        name: quote
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_9'
                type: array
            text/csv:
              example: bitfinex,avtbtc,AVT,BTC
              schema:
                type: string
          description: A list of markets
        "401":
          description: Authentication information is missing or invalid
      summary: Markets
      tags:
      - Markets
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/markets?key=your-key-here&exchange=binance&base=BTC,ETH,LTC,XMR&quote=BTC,ETH,BNB"
          print(urllib.request.urlopen(url).read())
  /exchange-markets/ticker:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The Exchange Markets Ticker provides high level information about individual markets on exchanges integrated
        with Nomics. It provides metadata, the type of market, aggregation information, current financial data, and
        financial data over preset intervals.
      operationId: getExchangeMarketsTicker
      parameters:
      - description: Comma separated time interval of the ticker(s).
        example: 1d,30d
        explode: true
        in: query
        name: interval
        required: false
        schema:
          default: 1d
          enum:
          - 1h
          - 1d
          - 7d
          - 30d
          - 365d
          - ytd
          type: string
        style: form
      - description: A comma separated list of Nomics Currency IDs. A market must
          have one of the currencies as either its base or quote currency to be included.
        example: BTC,ETH
        explode: true
        in: query
        name: currency
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Nomics Currency IDs. A market must
          have one of the currencies as its base currency to be included.
        explode: true
        in: query
        name: base
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Nomics Currency IDs. A market must
          have one of the currencies as its quote currency to be included.
        explode: true
        in: query
        name: quote
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Nomics Exchange IDs. A market must
          be on one of the exchanges to be included.
        example: binance,gdax
        explode: true
        in: query
        name: exchange
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of Nomics Market IDs. A market's `market_id`
          must be one of the provided markets to be included.
        explode: true
        in: query
        name: market
        required: false
        schema:
          type: string
        style: form
      - description: Nomics Currency ID to convert all financial data to
        example: BTC
        explode: true
        in: query
        name: convert
        required: false
        schema:
          default: USD
          type: string
        style: form
      - description: |
          Status by which to filter markets. All markets are shown
          by default, regardless of status.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - mapped
          - unmapped
          type: string
        style: form
      - description: |
          Search string by which to filter markets.  Items match the
          search query if it's a substring of their exchange id,
          market id, base currency symbol or quote currency symbol.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |
          The maximum number of items to return per paginated response.
          Paginated responses include an additional response header,
          `X-Pagination-Total-Items`, which represents the total number
          of items available after all the request filters have been
          applied.  Must be between `1` and `100` (inclusive).
        example: 100
        explode: true
        in: query
        name: per-page
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Which page of items to get.  Only applicable when `per-page` is also supplied.
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_10'
                type: array
          description: Metadata and interval data for individual markets on exchanges
        "401":
          description: Authentication information is missing or invalid
      summary: Exchange Markets Ticker
      tags:
      - Markets*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchange-markets/ticker?key=your-key-here&interval=1d,30d&currency=BTC,ETH&exchange=binance,gdax&convert=BTC&per-page=100&page=1"
          print(urllib.request.urlopen(url).read())
  /markets/prices:
    get:
      deprecated: true
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The market prices endpoint returns prices in USD for the last trade in each market with the given base
        currency. These prices only include markets with quote currencies that are used as part of our
        [Pricing Methodology](https://blog.nomics.com/nomics-newsletter/nomics-pricing-methodology-explained/)
        (fiat, BTC, and ETH) to convert to USD.
      operationId: getMarketPrices
      parameters:
      - description: Nomics Currency ID of the desired base currency
        example: BTC
        explode: true
        in: query
        name: currency
        required: true
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_11'
                type: array
            text/csv:
              example: bitfinex,USD,7419.69255,06/05/2018 13:23:18
              schema:
                type: string
          description: A list of markets with their price
        "401":
          description: Authentication information is missing or invalid
      summary: Market Prices
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/markets/prices?key=your-key-here&currency=BTC"
          print(urllib.request.urlopen(url).read())
  /markets/interval:
    get:
      deprecated: true
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The market interval endpoint returns a summary of information about all markets based in a given currency over
        a configurable time interval.
      operationId: getMarketInterval
      parameters:
      - description: Nomics Currency ID to query information for
        example: BTC
        explode: true
        in: query
        name: currency
        required: true
        schema:
          type: string
        style: form
      - description: Number of hours back to calculate data
        explode: true
        in: query
        name: hours
        required: false
        schema:
          default: 1
          maximum: 8760
          minimum: 1
          type: integer
        style: form
      - description: |
          Start time of the interval in RFC3339 (URI escaped).  If not provided, it is computed using the
          hours parameter.
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MarketInterval'
                type: array
            text/csv:
              example: bitfinex,EUR,5107055.26765,9484.34395,05/03/2018 15:00:00,9671.60953,05/03/2018
                20:31:24
              schema:
                type: string
          description: A list of markets with price and volume information for a currency
        "401":
          description: Authentication information is missing or invalid
      summary: Market Interval
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /exchange-markets/prices:
    get:
      deprecated: true
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The exchange market prices endpoint returns prices for the last trade in each market
      operationId: getExchangeMarketPrices
      parameters:
      - description: Nomics Currency ID to filter by. If present, only markets with
          this currency as the base or quote will be returned.
        example: BTC
        explode: true
        in: query
        name: currency
        required: false
        schema:
          type: string
        style: form
      - description: Nomics Exchange ID to filter by. If present, only markets on
          this exchange will be returned
        example: binance
        explode: true
        in: query
        name: exchange
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_12'
                type: array
            text/csv:
              example: binance,ADA,BTC,0.00002181,06/25/2018 15:17:06
              schema:
                type: string
          description: A list of markets with their prices
        "401":
          description: Authentication information is missing or invalid
      summary: Exchange Market Prices
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchange-markets/prices?key=your-key-here&currency=BTC&exchange=binance"
          print(urllib.request.urlopen(url).read())
  /exchange-markets/interval:
    get:
      deprecated: true
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The exchange market interval endpoint returns a summary of information about all markets over a configurable
        time interval in their native values.
      operationId: getExchangeMarketInterval
      parameters:
      - description: Nomics Currency ID to filter by. If present, only markets with
          this currency as the base or quote will be returned.
        example: BTC
        explode: true
        in: query
        name: currency
        required: false
        schema:
          type: string
        style: form
      - description: Nomics Exchange ID to filter by. If present, only markets on
          this exchange will be returned
        explode: true
        in: query
        name: exchange
        required: false
        schema:
          type: string
        style: form
      - description: Start time of the interval in RFC3339 (URI escaped).
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_13'
                type: array
            text/csv:
              example: binance,ADA,BTC,4974200617.00000,1496075991.61416,0.00002547,04/14/2018
                00:00:00,0.00003071,05/14/2018 00:00:00,2456653
              schema:
                type: string
          description: A list of markets with price and volume information for a currency
        "401":
          description: Authentication information is missing or invalid
      summary: Exchange Market Interval
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchange-markets/interval?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /market-cap/history:
    get:
      description: |
        MarketCap History is the total market cap for all cryptoassets at intervals between the requested time period.
      operationId: getMarketCapHistory
      parameters:
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Currency to quote ticker price, market cap, and volume values.
          May be a Fiat Currency or Cryptocurrency. Default is `USD`.
        explode: true
        in: query
        name: convert
        required: false
        schema:
          example: EUR
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      - description: |
          Whether to include [Transparent Volume](https://blog.nomics.com/essays/transparent-volume/) and transparent market cap information in the response. Default is `false`. This option is only available to customers of our paid API plans.
        example: false
        explode: true
        in: query
        name: include-transparency
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_14'
                type: array
            test/csv:
              example: 07/05/2018 15:00:00,269222501959
              schema:
                type: string
          description: Performance over time for the entire market.
        "401":
          description: Authentication information is missing or invalid
      summary: Market Cap History
      tags:
      - Markets
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/market-cap/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /candles:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The candles endpoint returns aggregated open, high, low, close, and volume information for Nomics currencies.
        When asking for candles, a currency is provided as a parameter. Nomics aggregates all markets where the given
        currency is the base currency and the quote currency is a fiat currency, BTC, or ETH and returns all values in
        USD.

        Candles are aggregated across all markets for the base currencies, which necessitates converting to a common
        quote currency. Nomics converts all markets into USD in order to aggregated candles.

        Candles have the following time range limits based on interval and time:

        * `1d`: Available from inception with no range limit
        * `1h`: Available from inception. Time range limits:
          * Past 30 days: accessible in a single request
          * Older than 30 days: 7 days at a time

        CSV format is: `timestamp,open,high,low,close,volume,empty,transparent_open,transparent_high,transparent_low,transparent_close,transparent_volume`
      operationId: getCandles
      parameters:
      - description: Time interval of the candle
        example: 1d
        explode: true
        in: query
        name: interval
        required: true
        schema:
          enum:
          - 1d
          - 1h
          type: string
        style: form
      - description: Currency ID
        example: BTC
        explode: true
        in: query
        name: currency
        required: true
        schema:
          type: string
        style: form
      - description: |
          Start time of the interval in RFC3339 (URI escaped). If
          not provided, starts from the first candle for daily
          candles and from the current time minus 30 days for hourly
          candles.
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not
          provided, the current time is used except for when hourly
          candles with a `start` time older than 30 days are
          requested.  In that case, the `end` time defaults to the
          `start` time plus 7 days.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_15'
                type: array
            text/csv:
              example: 2018-03-19T10:00:00Z,7024.32225,8276.19407,8281.17307,8566.43000,59624801
              schema:
                type: string
          description: A list of candles
        "401":
          description: Authentication information is missing or invalid
      summary: Aggregated OHLCV Candles
      tags:
      - Candles*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/candles?key=your-key-here&interval=1d&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /volume/history:
    get:
      description: |
        Volume History is the total volume for all cryptoassets in USD
        at intervals between the requested time period.  For each
        entry, the `volume` field represents the sum of the
        `spot_volume` and `derivative_volume` fields.
      operationId: getVolumeHistory
      parameters:
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Currency to quote volume values. May be a Fiat Currency or Cryptocurrency.
          Default is `USD`.
        example: EUR
        explode: true
        in: query
        name: convert
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      - description: |
          Whether to include [Transparent Volume](https://blog.nomics.com/essays/transparent-volume/) and transparent market cap information in the response. Default is `false`. This option is only available to customers of our paid API plans.
        example: false
        explode: true
        in: query
        name: include-transparency
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_16'
                type: array
            test/csv:
              example: 04/14/2018 00:00:00,5209035491
              schema:
                type: string
          description: Volume over time for all currencies
        "401":
          description: Authentication information is missing or invalid
      summary: Global Volume History
      tags:
      - Volume
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/volume/history?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z&convert=EUR"
          print(urllib.request.urlopen(url).read())
  /exchange-rates:
    get:
      description: |
        The exchange rates endpoint returns the current exchange rates used by Nomics to convert prices from markets
        into USD. This contains Fiat currencies as well as a BTC and ETH quote prices. This endpoint helps normalize
        data across markets as well as to provide localization for users.

        Currently, this endpoint does not support historical data, but this feature is planned.
      operationId: getExchangeRates
      parameters:
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ExchangeRate'
                type: array
            text/csv:
              example: AUD,0.76953,2018-04-04T00:00:00Z
              schema:
                type: string
          description: List of exchange rates into USD
        "401":
          description: Authentication information is missing or invalid
      summary: Exchange Rates
      tags:
      - Exchange Rates
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchange-rates?key=your-key-here"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchange-rates?key=your-key-here")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchange-rates?key=your-key-here")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchange-rates?key=your-key-here")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchange-rates?key=your-key-here"
          print(urllib.request.urlopen(url).read())
  /exchange-rates/history:
    get:
      description: |
        Exchange rates for every point in a time range. This endpoint can be used with other history endpoints
        to convert values into a desired quote currency.

        The currency parameter must be a Nomics Quote Currency, to get all Nomics Quote Currencies, use the
        `/exchange-rates` endpoint for all current rates.
      operationId: getExchangeRatesHistory
      parameters:
      - description: Currency ID
        example: BTC
        explode: true
        in: query
        name: currency
        required: true
        schema:
          type: string
        style: form
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_17'
                type: array
            text/csv:
              example: 05/01/2018 00:00:00,1.2079045272261680
              schema:
                type: string
          description: Exchange rates for every point in a time range
        "401":
          description: Authentication information is missing or invalid
      summary: Exchange Rates History
      tags:
      - Exchange Rates
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchange-rates/history?key=your-key-here&currency=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /trades:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The trades endpoint returns individual trades in a normalized format for an individual
        exchange market.

        ### Getting the most recent trades

        By default, the trades endpoint returns the 100 most recent trades in descending order.
        You only need to provide the required parameters.

        ### Sequential ingestion

        If you want to page through trades sequentially for ingestion, follow these steps:

        1. Get the first page of trades `order=asc`
        2. Get the timestamp of the last trade in the page, let's call it `last`
        3. Get the next page of trades `order=asc&from=<last>`
        4. Repeat 2 and 3

        To reverse chronologically ingest, make a request for the most recent trades, and
        proceed as above but with `order=desc`.

        ### Building your own candles

        If you want to build your own candles, follow the steps for sequential ingestion, but start
        with `from=<start>` in step 1, where `start` is the start of your candle.

        Then, stop when you see a trade past your candle's `end` timestamp, discard trades past
        `end` and perform your aggregation.
      operationId: getTrades
      parameters:
      - description: Exchange ID
        example: binance
        explode: true
        in: query
        name: exchange
        required: true
        schema:
          type: string
        style: form
      - description: The Exchange's Market ID from [Markets](#tag/Markets)
        example: BTCUSDT
        explode: true
        in: query
        name: market
        required: true
        schema:
          type: string
        style: form
      - description: Maximum number of trades returned
        example: 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 2500
          minimum: 1
          type: integer
        style: form
      - description: |
          Defines the sort order of returned trades and the direction from `from`.
        example: asc
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: |
          Timestamp from which results should start in RFC3339. Please ensure you URI encode the timestamp. From is inclusive.
        example: 1970-01-01T00%3A00%3A00Z
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Trade'
                type: array
            text/csv:
              example: 1,12/01/2014 05:33:56,300.00000000,0.01000000
              schema:
                type: string
          description: List of trades
        "401":
          description: Authentication information is missing or invalid
      summary: Trades
      tags:
      - Trades*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/trades?key=your-key-here&exchange=binance&market=BTCUSDT&limit=100&order=asc&from=1970-01-01T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /orders/snapshot:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The most recent order book snapshot for the given exchange and
        market.  An empty result is returned if no snapshot is found
        within 24 hours prior to the provided timestamp.

        CSV format is: `timestamp,bidPrice,bidAmount,askPrice,askAmount`
      operationId: getOrderBookSnapshot
      parameters:
      - description: Exchange ID
        example: binance
        explode: true
        in: query
        name: exchange
        required: true
        schema:
          type: string
        style: form
      - description: The Exchange's Market ID from [Markets](#tag/Markets)
        example: BTCUSDT
        explode: true
        in: query
        name: market
        required: true
        schema:
          type: string
        style: form
      - description: The newest order book *before* this timestamp will be returned.
          Timestamp should be in RFC3339 (URI escaped).
        example: 2019-04-01T12%3A00%3A00Z
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
            text/csv:
              example: 08/29/2018 20:14:04,7014.31,0.178164,7015.99,0.000044
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
          description: Order book snapshot
        "401":
          description: Authentication information is missing or invalid
      summary: Order Book Snapshot
      tags:
      - Orders*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/orders/snapshot?key=your-key-here&exchange=binance&market=BTCUSDT&at=2019-04-01T12%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /orders/batches:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        This endpoint returns daily batches of order book snapshots as
        Zip archived CSV files.  Batches are available up to 2 days
        prior to the current date, inclusive.

        This endpoint responds with an HTTP redirect to the desired
        archive file.  Because of this, you must take care to ensure that
        your API client properly follows redirects.

        The Zip file contains a single CSV file, named `books.csv`,
        containing the order book snapshots for each day.

        CSV format is: `time of day,kind (bid or ask),amount,price`
      operationId: getOrderBookBatches
      parameters:
      - description: Exchange ID
        example: binance
        explode: true
        in: query
        name: exchange
        required: true
        schema:
          type: string
        style: form
      - description: The Exchange's Market ID from [Markets](#tag/Markets)
        example: BTCUSDT
        explode: true
        in: query
        name: market
        required: true
        schema:
          type: string
        style: form
      - description: |
          The date for which to export a batch.  Must be a date
          ending at most 2 days prior to the current date.
        example: 2021-03-15
        explode: true
        in: query
        name: date
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/csv:
              example: |
                00:00:00.129,bid,57794.270000,1.424075
                00:00:00.129,bid,57794.260000,0.024794
                00:00:00.129,bid,57794.250000,1.565000
                00:00:00.129,bid,57789.690000,0.009109
                00:00:00.129,ask,57794.280000,0.035800
                00:00:00.129,ask,57794.990000,0.012111
                00:00:00.129,ask,57798.930000,0.003371
                00:00:00.129,ask,57798.940000,0.001379
              schema:
                type: string
          description: Order book batch
        "401":
          description: Authentication information is missing or invalid
      summary: Order Book Batches
      tags:
      - Orders*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/orders/batches?key=your-key-here&exchange=binance&market=BTCUSDT&date=2021-03-15"
          print(urllib.request.urlopen(url).read())
  /exchange_candles:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The exchange candles endpoint returns raw open, close, high, low, and volume information for Nomics Markets.
        The data is not aggregated, therefore prices are in the quote currency of the market and volume is in the base
        currency of the market.

        History is available for all candle sizes from inception, but
        there are limits on the length of the date range you can
        request at a time:

        | interval | limit per request |
        |----------|-------------------|
        | `1d`     | no limit          |
        | `4h`     | 120 days          |
        | `1h`     | 30 days           |
        | `30m`    | 14 days           |
        | `5m`     | 3 days            |
        | `1m`     | 1 day             |

        If the difference between your `end` and `start` parameters
        for the `interval` you're requesting exceeds the limit, then
        you'll receive an error.
      operationId: getExchangeCandles
      parameters:
      - description: Time interval of the candle
        example: 1d
        explode: true
        in: query
        name: interval
        required: true
        schema:
          enum:
          - 1d
          - 4h
          - 1h
          - 30m
          - 5m
          - 1m
          type: string
        style: form
      - description: Exchange ID
        example: binance
        explode: true
        in: query
        name: exchange
        required: true
        schema:
          type: string
        style: form
      - description: The Exchange's Market ID from [Markets](#tag/Markets)
        example: BTCUSDT
        explode: true
        in: query
        name: market
        required: true
        schema:
          type: string
        style: form
      - description: |
          Start time of the interval in RFC3339 (URI escaped).  If
          not provided, then candles will be returned starting from
          the current time minus the date range limit for the
          requested interval.  For example, if you request hourly
          candles without specifying a start time, then candles
          spanning the last 30 days will be returned.
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_19'
                type: array
            text/csv:
              example: 04/14/2018 00:00:00,7810.00000000,7877.48000000,7999.01000000,8186.00000000,31621.28635700,168756
              schema:
                type: string
          description: A list of candles
        "401":
          description: Authentication information is missing or invalid
      summary: Exchange OHLCV Candles
      tags:
      - Candles*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchange_candles?key=your-key-here&interval=1d&exchange=binance&market=BTCUSDT&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /markets/candles:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The Aggregated Pair Candles endpoint returns aggregated open, close, high, low, and volume information for an
        Aggregated Pair of base and quote currencies. Open and Close are volume weighted averages across markets, while
        High and Low are the max and min prices across markets. Volume is the total volume.

        This is equivalent to getting Exchange Market OHLCV Candles across all exchanges with the given base and quote
        and merging them together. This is different from Aggregated OHLCV Candles because those convert to USD and
        merge candles across the base currency only.

        The data is aggregated but not converted to USD, so OHLC values are in the quote currency unit and Volume
        is in the base currency unit.

        History is available for all candle sizes from inception, but
        there are limits on the length of the date range you can
        request at a time:

        | interval | limit    |
        |----------|----------|
        | `1d`     | no limit |
        | `4h`     | 120 days |
        | `1h`     | 30 days  |
        | `30m`    | 14 days  |
        | `5m`     | 3 days   |
        | `1m`     | 1 day    |

        If the difference between your `end` and `start` parameters
        for the `interval` you're requesting exceeds the limit, then
        you'll receive an error.
      operationId: getMarketCandles
      parameters:
      - description: Time interval of the candle
        example: 1d
        explode: true
        in: query
        name: interval
        required: true
        schema:
          enum:
          - 1d
          - 4h
          - 1h
          - 30m
          - 5m
          - 1m
          type: string
        style: form
      - description: Base currency of the pair
        example: ETH
        explode: true
        in: query
        name: base
        required: true
        schema:
          type: string
        style: form
      - description: Quote currency of the pair
        example: BTC
        explode: true
        in: query
        name: quote
        required: true
        schema:
          type: string
        style: form
      - description: |
          Start time of the interval in RFC3339 (URI escaped).  If
          not provided, then candles will be returned starting from
          the current time minus the date range limit for the
          requested interval.  For example, if you request hourly
          candles without specifying a start time, then candles
          spanning the last 30 days will be returned.
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_20'
                type: array
            text/csv:
              example: 04/14/2018 00:00:00,0.06101,0.06267940,0.06282333,0.066667,193325.66033455,185948
              schema:
                type: string
          description: A list of candles
        "401":
          description: Authentication information is missing or invalid
      summary: Aggregated Pair OHLCV Candles
      tags:
      - Candles*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/markets/candles?key=your-key-here&interval=1d&base=ETH&quote=BTC&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /currencies/predictions/ticker:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The Currencies Predictions Ticker endpoint returns the current price prediction for all currencies.
        [Read more about Nomics Price Predictions](https://blog.nomics.com/announcements/crypto-bitcoin-price-prediction/).
      operationId: getCurrenciesPredictionsTicker
      parameters:
      - description: Comma separated list of Nomics currency IDs
        example: BTC,ETH
        explode: true
        in: query
        name: ids
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - id: BTC
                  predictions:
                  - avg_error_pct: "0.0287"
                    avg_error_pct_30d: "0.0768"
                    avg_error_pct_7d: "0.0720"
                    interval: 7d
                    price_change_pct: -0.028
                    price_end: "6940.17363192"
                    price_start: "7139.92807691"
                    timestamp_end: 2020-04-29T00:00:00Z
                    timestamp_start: 2020-04-23T00:00:00Z
                items:
                  $ref: '#/components/schemas/inline_response_200_21'
                type: array
          description: A list of currency prediction tickers
        "401":
          description: Authentication information is missing or invalid
      summary: Currency Predictions Ticker
      tags:
      - Predictions*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/currencies/predictions/ticker?key=your-key-here&ids=BTC,ETH"
          print(urllib.request.urlopen(url).read())
  /currencies/predictions/history:
    get:
      description: |
        ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

        The Currencies Predictions History endpoint returns historical price prediction for one currency.
        [Read more about Nomics Price Predictions](https://blog.nomics.com/announcements/crypto-bitcoin-price-prediction/).
      operationId: getCurrenciesPredictionsHistory
      parameters:
      - description: Nomics currency ID
        example: BTC
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Prediction interval
        example: 7d
        explode: true
        in: query
        name: interval
        required: false
        schema:
          enum:
          - 7d
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_22'
          description: A list of currency predictions
        "401":
          description: Authentication information is missing or invalid
      summary: Currency Predictions History
      tags:
      - Predictions*
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/currencies/predictions/history?key=your-key-here&id=BTC&interval=7d"
          print(urllib.request.urlopen(url).read())
  /prices:
    get:
      deprecated: true
      description: |
        The prices endpoint returns current prices for all currencies. Prices are updated every 10 seconds.
      operationId: getPrices
      parameters:
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Price'
                type: array
            text/csv:
              example: BTC,10000.00000
              schema:
                type: string
          description: A list of currencies with their price
        "401":
          description: Authentication information is missing or invalid
      summary: Prices
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/prices?key=your-key-here"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/prices?key=your-key-here")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/prices?key=your-key-here")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/prices?key=your-key-here")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/prices?key=your-key-here"
          print(urllib.request.urlopen(url).read())
  /dashboard:
    get:
      deprecated: true
      description: |
        The dashboard endpoint is a high level view of the current state of the market. It contains a wide
        variety of information and is updated every minute.
      operationId: getDashboard
      parameters:
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Dashboard'
                type: array
            text/csv:
              example: BTC,7436.82313,1017039454.62165,1013499101.75834,7123.20591,7856259697.70049,7139283718.53940,10769.08245,41483988434.15605,50120582053.23234,1144.85801,385101925394.80138,16773015388.14144,6888.45685,24436.29525,2018-01-05T00:00:00Z,bithumb,KRW,16957550.0,21000000.0
              schema:
                type: string
          description: A list of currency summaries
        "401":
          description: Authentication information is missing or invalid
      summary: Dashboard
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/dashboard?key=your-key-here"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/dashboard?key=your-key-here")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/dashboard?key=your-key-here")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/dashboard?key=your-key-here")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/dashboard?key=your-key-here"
          print(urllib.request.urlopen(url).read())
  /currencies/interval:
    get:
      deprecated: true
      description: |
        Open and close prices and volume for all currencies between a customizable time range.
      operationId: getCurrenciesInterval
      parameters:
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_23'
                type: array
            text/csv:
              example: BTC,7042240511.06433,8746.03472,05/14/2018 00:00:00,7498.07225,05/24/2018
                00:00:00
              schema:
                type: string
          description: Open, close, and volume for all currencies in a time range
        "401":
          description: Authentication information is missing or invalid
      summary: Currencies Interval
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/currencies/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
  /currencies/highs:
    get:
      deprecated: true
      description: |
        Returns all time high information for all currencies.
      operationId: getCurrencyHighs
      parameters:
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_24'
                type: array
            test/csv:
              example: BTC,24436.29525,01/05/2018 00:00:00,bithumb,KRW
              schema:
                type: string
          description: All time highs for all currencies
        "401":
          description: Authentication information is missing or invalid
      summary: All Time Highs
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/currencies/highs?key=your-key-here"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/currencies/highs?key=your-key-here")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/currencies/highs?key=your-key-here")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/currencies/highs?key=your-key-here")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/currencies/highs?key=your-key-here"
          print(urllib.request.urlopen(url).read())
  /sparkline:
    get:
      deprecated: true
      description: |
        **Deprecated in favor of [Currencies Sparkline](#operation/getCurrenciesSparkline)**

        The sparkline endpoint is a high level view of currency performance over a variety of intervals.
      operationId: getSparkline
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_25'
          description: Currency performance over time for all currencies over day,
            week, month, and year periods.
        "401":
          description: Authentication information is missing or invalid
      summary: Sparkline
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/sparkline?key=your-key-here"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/sparkline?key=your-key-here")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/sparkline?key=your-key-here")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/sparkline?key=your-key-here")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/sparkline?key=your-key-here"
          print(urllib.request.urlopen(url).read())
  /market-cap/sparkline:
    get:
      deprecated: true
      description: |
        **Deprecated in favor of [Market Cap History](#operation/getMarketCapHistory)**

        The Market Cap Sparkline is a high level history of the market cap for all assets.
      operationId: getMarketCapSparkline
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_26'
          description: Performance over time for the entire market over day, week,
            month, and year periods.
        "401":
          description: Authentication information is missing or invalid
      summary: Market Cap Sparkline
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/market-cap/sparkline?key=your-key-here"
          print(urllib.request.urlopen(url).read())
  /exchange-rates/interval:
    get:
      deprecated: true
      description: |
        Exchange rates to convert from USD over a time interval. This endpoint can be used with other interval endpoints
        to convert values into a desired quote currency.
      operationId: getExchangeRatesInterval
      parameters:
      - description: Start time of the interval in RFC3339 (URI escaped)
        example: 2018-04-14T00%3A00%3A00Z
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: |
          End time of the interval in RFC3339 (URI escaped). If not provided,
          the current time is used.
        example: 2018-05-14T00%3A00%3A00Z
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Format of the response. Defaults to JSON when blank.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - csv
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_27'
                type: array
            text/csv:
              example: EUR,1.1934028689404969,05/14/2018 00:00:00,1.1707956727391936,05/24/2018
                00:00:00
              schema:
                type: string
          description: List of exchange rates open and close information
        "401":
          description: Authentication information is missing or invalid
      summary: Exchange Rates Interval
      tags:
      - Deprecated
      x-code-samples:
      - lang: Shell
        source: curl "https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
      - lang: JavaScript
        source: |-
          fetch("https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => response.json())
            .then(data => console.log(data))
      - lang: NodeJS
        source: |-
          require('axios')
            .get("https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
            .then(response => console.log(response))
      - lang: Ruby
        source: |-
          require 'net/http'
          uri = URI("https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z")
          puts Net::HTTP.get(uri)
      - lang: Python
        source: |-
          import urllib.request
          url = "https://api.nomics.com/v1/exchange-rates/interval?key=your-key-here&start=2018-04-14T00%3A00%3A00Z&end=2018-05-14T00%3A00%3A00Z"
          print(urllib.request.urlopen(url).read())
components:
  parameters:
    format:
      description: Format of the response. Defaults to JSON when blank.
      explode: true
      in: query
      name: format
      required: false
      schema:
        enum:
        - csv
        type: string
      style: form
    candle-interval:
      description: Time interval of the candle
      example: 1d
      explode: true
      in: query
      name: interval
      required: true
      schema:
        enum:
        - 1d
        - 1h
        type: string
      style: form
    convert:
      description: Currency to quote ticker price, market cap, and volume values.
        May be a Fiat Currency or Cryptocurrency. Default is `USD`.
      explode: true
      in: query
      name: convert
      required: false
      schema:
        example: EUR
        type: string
      style: form
    exchange-candle-interval:
      description: Time interval of the candle
      example: 1d
      explode: true
      in: query
      name: interval
      required: true
      schema:
        enum:
        - 1d
        - 4h
        - 1h
        - 30m
        - 5m
        - 1m
        type: string
      style: form
    currency:
      description: Currency ID
      example: BTC
      explode: true
      in: query
      name: currency
      required: true
      schema:
        type: string
      style: form
    exchange:
      description: Exchange ID
      example: binance
      explode: true
      in: query
      name: exchange
      required: true
      schema:
        type: string
      style: form
    market:
      description: The Exchange's Market ID from [Markets](#tag/Markets)
      example: BTCUSDT
      explode: true
      in: query
      name: market
      required: true
      schema:
        type: string
      style: form
    interval-start:
      description: Start time of the interval in RFC3339 (URI escaped)
      example: 2018-04-14T00%3A00%3A00Z
      explode: true
      in: query
      name: start
      required: true
      schema:
        type: string
      style: form
    interval-end:
      description: |
        End time of the interval in RFC3339 (URI escaped). If not provided,
        the current time is used.
      example: 2018-05-14T00%3A00%3A00Z
      explode: true
      in: query
      name: end
      required: false
      schema:
        type: string
      style: form
    currency-ids:
      description: |
        Comma separated list of Nomics Currency IDs to filter result rows
      example: BTC,ETH,XRP
      explode: true
      in: query
      name: ids
      required: false
      schema:
        type: string
      style: form
    currency-attributes:
      description: |
        Comma separated list of currency attributes to filter result columns
      example: id,name,logo_url
      explode: true
      in: query
      name: attributes
      required: false
      schema:
        type: string
      style: form
    exchange-ids:
      description: |
        Comma separated list of Nomics Exchange IDs to filter result rows
      example: binance,idex,bittrex
      explode: true
      in: query
      name: ids
      required: false
      schema:
        type: string
      style: form
    exchange-attributes:
      description: |
        Comma separated list of exchange attributes to filter result columns
      example: id,name,transparency_grade
      explode: true
      in: query
      name: attributes
      required: false
      schema:
        type: string
      style: form
    exchange-centralized:
      description: |
        When `true`, selects centralized exchanges.  When `false`,
        removes centralized exchanges.  If omitted, all exchange types
        are shown.  May be used in conjunction with `decentralized` to
        form an "and" filter.
      explode: true
      in: query
      name: centralized
      required: false
      schema:
        enum:
        - "true"
        - "false"
        type: string
      style: form
    exchange-decentralized:
      description: |
        When `true`, selects decentralized exchanges.  When `false`,
        removes decentralized exchanges.  If omitted, all exchange
        types are shown.  May be used in conjunction with
        `centralized` to form an "and" filter.
      explode: true
      in: query
      name: decentralized
      required: false
      schema:
        enum:
        - "true"
        - "false"
        type: string
      style: form
    include-transparency:
      description: |
        Whether to include [Transparent Volume](https://blog.nomics.com/essays/transparent-volume/) and transparent market cap information in the response. Default is `false`. This option is only available to customers of our paid API plans.
      example: false
      explode: true
      in: query
      name: include-transparency
      required: false
      schema:
        type: boolean
      style: form
    per-page:
      description: |
        The maximum number of items to return per paginated response.
        Paginated responses include an additional response header,
        `X-Pagination-Total-Items`, which represents the total number
        of items available after all the request filters have been
        applied.  Must be between `1` and `100` (inclusive).
      example: 100
      explode: true
      in: query
      name: per-page
      required: false
      schema:
        maximum: 100
        minimum: 1
        type: integer
      style: form
    page:
      description: |
        Which page of items to get.  Only applicable when `per-page` is also supplied.
      example: 1
      explode: true
      in: query
      name: page
      required: false
      schema:
        minimum: 1
        type: integer
      style: form
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
  schemas:
    MarketInterval:
      example:
        exchange: bitfinex
        quote: EUR
        volume: "4986395.59716"
        open: "9484.34395"
        open_timestamp: 2018-05-03T15:00:00Z
        close: "9671.60953"
        close_timestamp: 2018-05-03T20:31:24.737Z
      properties:
        exchange:
          description: Nomics Exchange ID
          type: string
        quote:
          description: Nomics Currency ID of the asset used to quote a price
          type: string
        volume:
          description: Total volume in USD
          type: string
        open:
          description: Open price in USD
          type: string
        open_timestamp:
          description: Timestamp of the open price in RFC 3339
          type: string
        close:
          description: Close price in USD
          type: string
        close_timestamp:
          description: Timestamp of the close price in RFC 3339
          type: string
      type: object
    Price:
      example:
        currency: BTC
        price: "10000.00000"
      properties:
        currency:
          description: Currency ID
          type: string
        price:
          description: Price
          type: string
      type: object
    Dashboard:
      example:
        currency: BTC
        dayOpen: "7436.82313"
        dayVolume: "1017039454.62165"
        dayOpenVolume: "1013499101.75834"
        weekOpen: "7123.20591"
        weekVolume: "7856259697.70049"
        weekOpenVolume: "7139283718.53940"
        monthOpen: "10769.08245"
        monthVolume: "41483988434.15605"
        monthOpenVolume: "50120582053.23234"
        yearOpen: "1144.85801"
        yearVolume: "385101925394.80138"
        yearOpenVolume: "16773015388.14144"
        close: "6888.45685"
        high: "24436.29525"
        highTimestamp: 2018-01-05T00:00:00Z
        highExchange: bithumb
        highQuoteCurrency: KRW
        availableSupply: "16957550.0"
        maxSupply: "21000000.0"
      properties:
        currency:
          description: Currency ID
          type: string
        dayOpen:
          description: Price one day ago
          type: string
        dayVolume:
          description: Volume over the past day
          type: string
        dayOpenVolume:
          description: Volume over the previous day
          type: string
        weekOpen:
          description: Price one week ago
          type: string
        weekVolume:
          description: Volume over the past week
          type: string
        weekOpenVolume:
          description: Volume over the previous week
          type: string
        monthOpen:
          description: Price one month ago
          type: string
        monthVolume:
          description: Volume over the past 30 days
          type: string
        monthOpenVolume:
          description: Volume over the previous 30 days
          type: string
        yearOpen:
          description: Price one year ago
          type: string
        yearVolume:
          description: Volume over the past year
          type: string
        yearOpenVolume:
          description: Volume over the previous year
          type: string
        close:
          description: Current price
          type: string
        high:
          description: Highest price
          type: string
        highTimestamp:
          description: Timestamp of the highest price in RFC3339
          type: string
        highExchange:
          description: Exchange on which the highest price occurred
          type: string
        highQuoteCurrency:
          description: Quote currency against which highest price was recorded
          type: string
        availableSupply:
          description: Circulating supply
          type: string
        maxSupply:
          description: Maximum supply
          type: string
      type: object
    SparklineRow:
      example:
        timestamps:
        - 2018-04-03T16:00:00Z
        - 2018-04-03T16:00:00Z
        currency: BTC
        closes:
        - "7436.82313"
        - "7436.82313"
      properties:
        currency:
          description: Currency ID
          example: BTC
          type: string
        timestamps:
          description: Time values matching the close values
          items:
            description: Timestamp of the start of the candle in RFC3339
            example: 2018-04-03T16:00:00Z
            type: string
          type: array
        closes:
          description: Closing price in USD corresponding to timestamp value
          items:
            description: Price in USD
            example: "7436.82313"
            type: string
          type: array
      type: object
    MarketCapSparklineRow:
      example:
        timestamps:
        - 2018-04-03T16:00:00Z
        - 2018-04-03T16:00:00Z
        currency: MarketCap
        closes:
        - "7436.82313"
        - "7436.82313"
      properties:
        currency:
          description: Currency ID
          example: MarketCap
          type: string
        timestamps:
          description: Time values matching the close values
          items:
            description: Timestamp of the start of the candle in RFC3339
            example: 2018-04-03T16:00:00Z
            type: string
          type: array
        closes:
          description: Closing market cap in USD corresponding to timestamp value
          items:
            description: Market Cap in USD
            example: "7436.82313"
            type: string
          type: array
      type: object
    ExchangeRate:
      example:
        rate: "0.76953"
        currency: AUD
        timestamp: 2018-04-04T00:00:00Z
      properties:
        currency:
          description: Currency ID
          example: AUD
          type: string
        rate:
          description: Exchange rate to USD (Currency * Rate = USD)
          example: "0.76953"
          type: string
        timestamp:
          description: Timestamp this rate was updated at in RFC3339
          example: 2018-04-04T00:00:00Z
          type: string
      type: object
    Trade:
      example:
        volume: "0.02122885"
        price: "9271.73"
        id: "3608432558"
        timestamp: 2014-12-01T05:33:56.761199Z
      properties:
        id:
          description: Exchange's ID of the trade (or synthetic ID when not available)
          example: "3608432558"
          type: string
        timestamp:
          description: Timestamp in RFC3339
          example: 2014-12-01T05:33:56.761199Z
          type: string
        price:
          description: Price of the trade in the quote currency of the market
          example: "9271.73"
          type: string
        volume:
          description: Volume of the trade in the base currency of the market
          example: "0.02122885"
          type: string
      type: object
    GlobalTickerInterval:
      example:
        transparent_market_cap_change_pct: "0.0057"
        transparent_spot_volume: "35168278207.40"
        derivative_volume_change: -15239606860.37
        transparent_spot_volume_change: -4606944979.20
        volume_transparency:
        - grade: A
          volume: "83650606519.52"
          volume_change: -13318816933.73
          volume_change_pct: -0.1374
        - grade: B
          volume: "466859661.78"
          volume_change: -104098455.53
          volume_change_pct: -0.1823
        market_cap_change_pct: "0.0071"
        transparent_volume: "83650606519.52"
        transparent_volume_change: -13318816933.73
        volume_change: -36297038690.90
        transparent_derivative_volume_change_pct: -0.1523
        market_cap_change: "12684321666"
        derivative_volume_change_pct: -0.1646
        volume: "261184503290.13"
        spot_volume_change_pct: -0.1028
        transparent_derivative_volume_change: -8711871954.54
        spot_volume_change: -21057431830.52
        derivative_volume: "77337484663.54"
        transparent_volume_change_pct: -0.1374
        transparent_market_cap_change: "9913761626"
        transparent_spot_volume_change_pct: -0.1158
        spot_volume: "183847018626.59"
        volume_change_pct: -0.1220
        transparent_derivative_volume: "48482328312.12"
      properties:
        market_cap_change:
          description: Amount of market cap change for the given interval
          example: "12684321666"
          type: string
        market_cap_change_pct:
          description: Percent change of market cap for the given interval
          example: "0.0071"
          type: string
        transparent_market_cap_change:
          description: Amount of transparent market cap change for the given interval
          example: "9913761626"
          type: string
        transparent_market_cap_change_pct:
          description: Percent change of transparent market cap for the given interval
          example: "0.0057"
          type: string
        volume:
          description: Total volume (spot + derivative volume) for the given interval
          example: "261184503290.13"
          type: string
        volume_change:
          description: Amount of volume change for the given interval
          example: -36297038690.90
          type: string
        volume_change_pct:
          description: Percent change of volume for the given interval
          example: -0.1220
          type: string
        spot_volume:
          description: Total spot market volume for the given interval
          example: "183847018626.59"
          type: string
        spot_volume_change:
          description: Amount of spot volume change for the given interval
          example: -21057431830.52
          type: string
        spot_volume_change_pct:
          description: Percent change of spot volume for the given interval
          example: -0.1028
          type: string
        derivative_volume:
          description: Total derivative market volume for the given interval
          example: "77337484663.54"
          type: string
        derivative_volume_change:
          description: Amount of derivative volume change for the given interval
          example: -15239606860.37
          type: string
        derivative_volume_change_pct:
          description: Percent change of derivative volume for the given interval
          example: -0.1646
          type: string
        transparent_volume:
          description: Total transparent volume for the given interval
          example: "83650606519.52"
          type: string
        transparent_volume_change:
          description: Amount of transparent volume change for the given interval
          example: -13318816933.73
          type: string
        transparent_volume_change_pct:
          description: Percent change of transparent volume for the given interval
          example: -0.1374
          type: string
        transparent_spot_volume:
          description: Total transparent spot market volume for the given interval
          example: "35168278207.40"
          type: string
        transparent_spot_volume_change:
          description: Amount of transparent spot market volume change for the given
            interval
          example: -4606944979.20
          type: string
        transparent_spot_volume_change_pct:
          description: Percent change of transparent spot market volume for the given
            interval
          example: -0.1158
          type: string
        transparent_derivative_volume:
          description: Total transparent derivative market volume for the given interval
          example: "48482328312.12"
          type: string
        transparent_derivative_volume_change:
          description: Amount of transparent derivative market volume change for the
            given interval
          example: -8711871954.54
          type: string
        transparent_derivative_volume_change_pct:
          description: Percent change of transparent derivative market volume for
            the given interval
          example: -0.1523
          type: string
        volume_transparency:
          description: An array of `volume`, `volume_change` and `volume_change_pct`
            by exchange grade for the given interval
          example:
          - grade: A
            volume: "83650606519.52"
            volume_change: -13318816933.73
            volume_change_pct: -0.1374
          - grade: B
            volume: "466859661.78"
            volume_change: -104098455.53
            volume_change_pct: -0.1823
          items:
            type: object
          type: array
      type: object
    _currencies_ticker_interval:
      description: 'Interval-specific ticker attributes. The key will be the name
        of the interval (IE: `1d` or `365d`) and will occur for every requested interval.'
      properties:
        price_change:
          description: Amount of price change for the given interval in USD
          type: string
        price_change_pct:
          description: Percent change of price for the given interval
          type: string
        volume:
          description: Total volume for the given interval in USD
          type: string
        volume_change:
          description: Amount of volume change for the given interval in USD
          type: string
        volume_change_pct:
          description: Percent change of volume for the given interval
          type: string
        market_cap_change:
          description: Amount of market cap change for the given interval in USD
          type: string
        market_cap_change_pct:
          description: Percent change of market cap for the given interval
          type: string
        transparent_market_cap_change:
          description: Amount of transparent market cap change for the given interval
            in USD
          type: string
        transparent_market_cap_change_pct:
          description: Percent change of transparent market cap for the given interval
          type: string
        volume_transparency:
          description: An array of `volume`, `volume_change` and `volume_change_pct`
            by exchange grade
          items:
            type: object
          type: array
        volume_transparency_grade":
          description: The quartile grade assigned to this currency
          type: string
    inline_response_200:
      example: '{"currency":"BTC","id":"BTC","status":"active","price":"8451.36516421","price_date":"2019-06-14T00:00:00Z","price_timestamp":"2019-06-14T12:35:00Z","symbol":"BTC","circulating_supply":"17758462","max_supply":"21000000","name":"Bitcoin","logo_url":"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/btc.svg","market_cap":"150083247116.70","transparent_market_cap":"150003247116.70","num_exchanges":"357","num_pairs":"42118","num_pairs_unmapped":"4591","first_candle":"2011-08-18T00:00:00Z","first_trade":"2011-08-18T00:00:00Z","first_order_book":"2017-01-06T00:00:00Z","first_priced_at":"2017-08-18T18:22:19Z","rank":"1","rank_delta":"0","high":"19404.81116899","high_timestamp":"2017-12-16","1d":{"price_change":"269.75208019","price_change_pct":"0.03297053","volume":"1110989572.04","volume_change":"-24130098.49","volume_change_pct":"-0.02","market_cap_change":"4805518049.63","market_cap_change_pct":"0.03","transparent_market_cap_change":"4800518049.00","transparent_market_cap_change_pct":"0.0430","volume_transparency":[{"grade":"A","volume":"2144455081.37","volume_change":"-235524941.08","volume_change_pct":"-0.10"},{"grade":"B","volume":"15856762.85","volume_change":"-6854329.88","volume_change_pct":"-0.30"}]}}'
      properties:
        currency:
          deprecated: true
          description: Nomics ID of the currency
          type: string
        id:
          description: Unique Nomics ID of the currency
          type: string
        status:
          description: Current status
          enum:
          - active
          - inactive
          - dead
          type: string
        price:
          description: Current price
          type: string
        price_date:
          description: Date of the price
          type: string
        price_timestamp:
          description: Timestamp of the price
          type: string
        symbol:
          description: Display symbol of the currency (may be duplicated)
          type: string
        circulating_supply:
          description: Current circulating supply
          type: string
        max_supply:
          description: Current maximum supply
          type: string
        name:
          description: Name of the currency
          type: string
        logo_url:
          description: URL to logo of the currency
          type: string
        market_cap:
          description: Current market cap
          type: string
        transparent_market_cap:
          description: Current transparent market cap
          type: string
        num_exchanges:
          description: The number of exchanges on which this asset is traded
          type: string
        num_pairs:
          description: Number of currency pairs (markets) this asset is a part of,
            where both assets are known
          type: string
        num_pairs_unmapped:
          description: Number of currency pairs (markets) this asset is a part of,
            but where the other asset is unknown
          type: string
        first_candle:
          description: RFC3999 timestamp of the first `1d` candle available via the
            Nomics API
          type: string
        first_trade:
          description: RFC3999 timestamp of the first trade available via the Nomics
            API
          type: string
        first_order_book:
          description: RFC3999 timestamp of the first order book snapshot available
            via the Nomics API
          type: string
        first_priced_at:
          description: RFC3999 timestamp representing the currency was first priced
            by Nomics
          type: string
        rank:
          description: Rank of the currency by market cap
          type: string
        rank_delta:
          description: Relative rank change based on the first specified `interval`
            other than `1h`.  This field is only present on `active` currencies.
          type: string
        high:
          description: All time high price
          type: string
        high_timestamp:
          description: RFC3999 timestamp of the all time high
          type: string
        interval:
          $ref: '#/components/schemas/_currencies_ticker_interval'
    inline_response_200_1:
      example: '{"id":"BTC","original_symbol":"BTC","name":"Bitcoin","description":"Bitcoin
        cryptocurrency","website_url":"https://bitcoin.org/en","logo_url":"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/btc.svg","blog_url":"https://bitcoin.org/en/blog","discord_url":"https://discord.gg/bitcoin","facebook_url":"https://www.facebook.com/bitcoin","github_url":"https://github.com/bitcoin","medium_url":"https://medium.com/bitcoin","reddit_url":"https://www.reddit.com/r/bitcoin","telegram_url":"https://t.me/bitcoin","twitter_url":"https://twitter.com/bitcoin","whitepaper_url":"https://bitcoin.org/en/bitcoin-paper","youtube_url":"https://www.youtube.com/channel/bitcoin","linkedin_url":"","block_explorer_url":"","bitcointalk_url":"","replaced_by":null,"cryptocontrol_coin_id":"bitcoin","used_for_pricing":true}'
      properties:
        id:
          description: Nomics Currency ID
          type: string
        original_symbol:
          description: Display ticker symbol, not unique
          type: string
        name:
          description: Currency Name
          type: string
        description:
          description: Currency description
          type: string
        website_url:
          description: Currency website URL
          type: string
        logo_url:
          description: Currency logo URL
          type: string
        blog_url:
          description: Currency blog URL
          type: string
        discord_url:
          description: Currency Discord URL
          type: string
        facebook_url:
          description: Currency Facebook URL
          type: string
        github_url:
          description: Currency GitHub URL
          type: string
        medium_url:
          description: Currency Medium URL
          type: string
        reddit_url:
          description: Currency Reddit URL
          type: string
        telegram_url:
          description: Currency Telegram URL
          type: string
        twitter_url:
          description: Currency Twitter URL
          type: string
        whitepaper_url:
          description: Currency white paper URL
          type: string
        youtube_url:
          description: Currency YouTube URL
          type: string
        linkedin_url:
          description: Currency LinkedIn URL
          type: string
        bitcointalk_url:
          description: Currency BitcoinTalk URL
          type: string
        block_explorer_url:
          description: Currency Block Explorer URL
          type: string
        replaced_by:
          description: Nomics Currency ID of the currency that replaced the given
            currency. This can happen on hard forks or blockchain swaps as an example.
          type: string
        cryptocontrol_coin_id:
          description: Coin ID for CryptoControl.io
          type: string
        platform_currency_id:
          description: Parent BlockChain, if any
          type: string
        platform_contract_address:
          description: Platform contract address, if any
          type: string
        used_for_pricing:
          description: Whether or not Nomics uses this currency to price other currencies
          type: boolean
    inline_response_200_2:
      example:
        timestamps:
        - 2018-04-03T16:00:00Z
        - 2018-04-03T16:00:00Z
        currency: BTC
        prices:
        - "7436.82313"
        - "7436.82313"
      properties:
        currency:
          description: Currency ID
          example: BTC
          type: string
        timestamps:
          description: Time values matching the price value of the same index
          items:
            description: Timestamp of the start of the candle in RFC3339
            example: 2018-04-03T16:00:00Z
            type: string
          type: array
        prices:
          description: Price in USD corresponding to timestamp value of the same index
          items:
            description: Price in USD
            example: "7436.82313"
            type: string
          type: array
    inline_response_200_3:
      example:
        num_currencies_dead: "1187"
        market_cap: "1799044056712"
        "1d":
          transparent_market_cap_change_pct: "0.0057"
          transparent_spot_volume: "35168278207.40"
          derivative_volume_change: -15239606860.37
          transparent_spot_volume_change: -4606944979.20
          volume_transparency:
          - grade: A
            volume: "83650606519.52"
            volume_change: -13318816933.73
            volume_change_pct: -0.1374
          - grade: B
            volume: "466859661.78"
            volume_change: -104098455.53
            volume_change_pct: -0.1823
          market_cap_change_pct: "0.0071"
          transparent_volume: "83650606519.52"
          transparent_volume_change: -13318816933.73
          volume_change: -36297038690.90
          transparent_derivative_volume_change_pct: -0.1523
          market_cap_change: "12684321666"
          derivative_volume_change_pct: -0.1646
          volume: "261184503290.13"
          spot_volume_change_pct: -0.1028
          transparent_derivative_volume_change: -8711871954.54
          spot_volume_change: -21057431830.52
          derivative_volume: "77337484663.54"
          transparent_volume_change_pct: -0.1374
          transparent_market_cap_change: "9913761626"
          transparent_spot_volume_change_pct: -0.1158
          spot_volume: "183847018626.59"
          volume_change_pct: -0.1220
          transparent_derivative_volume: "48482328312.12"
        num_currencies_inative: "6337"
        transparent_market_cap: "1759092897670"
        "30d":
          transparent_market_cap_change_pct: "0.0057"
          transparent_spot_volume: "35168278207.40"
          derivative_volume_change: -15239606860.37
          transparent_spot_volume_change: -4606944979.20
          volume_transparency:
          - grade: A
            volume: "83650606519.52"
            volume_change: -13318816933.73
            volume_change_pct: -0.1374
          - grade: B
            volume: "466859661.78"
            volume_change: -104098455.53
            volume_change_pct: -0.1823
          market_cap_change_pct: "0.0071"
          transparent_volume: "83650606519.52"
          transparent_volume_change: -13318816933.73
          volume_change: -36297038690.90
          transparent_derivative_volume_change_pct: -0.1523
          market_cap_change: "12684321666"
          derivative_volume_change_pct: -0.1646
          volume: "261184503290.13"
          spot_volume_change_pct: -0.1028
          transparent_derivative_volume_change: -8711871954.54
          spot_volume_change: -21057431830.52
          derivative_volume: "77337484663.54"
          transparent_volume_change_pct: -0.1374
          transparent_market_cap_change: "9913761626"
          transparent_spot_volume_change_pct: -0.1158
          spot_volume: "183847018626.59"
          volume_change_pct: -0.1220
          transparent_derivative_volume: "48482328312.12"
        num_currencies: "12801"
        ytd:
          transparent_market_cap_change_pct: "0.0057"
          transparent_spot_volume: "35168278207.40"
          derivative_volume_change: -15239606860.37
          transparent_spot_volume_change: -4606944979.20
          volume_transparency:
          - grade: A
            volume: "83650606519.52"
            volume_change: -13318816933.73
            volume_change_pct: -0.1374
          - grade: B
            volume: "466859661.78"
            volume_change: -104098455.53
            volume_change_pct: -0.1823
          market_cap_change_pct: "0.0071"
          transparent_volume: "83650606519.52"
          transparent_volume_change: -13318816933.73
          volume_change: -36297038690.90
          transparent_derivative_volume_change_pct: -0.1523
          market_cap_change: "12684321666"
          derivative_volume_change_pct: -0.1646
          volume: "261184503290.13"
          spot_volume_change_pct: -0.1028
          transparent_derivative_volume_change: -8711871954.54
          spot_volume_change: -21057431830.52
          derivative_volume: "77337484663.54"
          transparent_volume_change_pct: -0.1374
          transparent_market_cap_change: "9913761626"
          transparent_spot_volume_change_pct: -0.1158
          spot_volume: "183847018626.59"
          volume_change_pct: -0.1220
          transparent_derivative_volume: "48482328312.12"
        "365d":
          transparent_market_cap_change_pct: "0.0057"
          transparent_spot_volume: "35168278207.40"
          derivative_volume_change: -15239606860.37
          transparent_spot_volume_change: -4606944979.20
          volume_transparency:
          - grade: A
            volume: "83650606519.52"
            volume_change: -13318816933.73
            volume_change_pct: -0.1374
          - grade: B
            volume: "466859661.78"
            volume_change: -104098455.53
            volume_change_pct: -0.1823
          market_cap_change_pct: "0.0071"
          transparent_volume: "83650606519.52"
          transparent_volume_change: -13318816933.73
          volume_change: -36297038690.90
          transparent_derivative_volume_change_pct: -0.1523
          market_cap_change: "12684321666"
          derivative_volume_change_pct: -0.1646
          volume: "261184503290.13"
          spot_volume_change_pct: -0.1028
          transparent_derivative_volume_change: -8711871954.54
          spot_volume_change: -21057431830.52
          derivative_volume: "77337484663.54"
          transparent_volume_change_pct: -0.1374
          transparent_market_cap_change: "9913761626"
          transparent_spot_volume_change_pct: -0.1158
          spot_volume: "183847018626.59"
          volume_change_pct: -0.1220
          transparent_derivative_volume: "48482328312.12"
        num_currencies_new: "312"
        num_currencies_active: "5277"
        "7d":
          transparent_market_cap_change_pct: "0.0057"
          transparent_spot_volume: "35168278207.40"
          derivative_volume_change: -15239606860.37
          transparent_spot_volume_change: -4606944979.20
          volume_transparency:
          - grade: A
            volume: "83650606519.52"
            volume_change: -13318816933.73
            volume_change_pct: -0.1374
          - grade: B
            volume: "466859661.78"
            volume_change: -104098455.53
            volume_change_pct: -0.1823
          market_cap_change_pct: "0.0071"
          transparent_volume: "83650606519.52"
          transparent_volume_change: -13318816933.73
          volume_change: -36297038690.90
          transparent_derivative_volume_change_pct: -0.1523
          market_cap_change: "12684321666"
          derivative_volume_change_pct: -0.1646
          volume: "261184503290.13"
          spot_volume_change_pct: -0.1028
          transparent_derivative_volume_change: -8711871954.54
          spot_volume_change: -21057431830.52
          derivative_volume: "77337484663.54"
          transparent_volume_change_pct: -0.1374
          transparent_market_cap_change: "9913761626"
          transparent_spot_volume_change_pct: -0.1158
          spot_volume: "183847018626.59"
          volume_change_pct: -0.1220
          transparent_derivative_volume: "48482328312.12"
      properties:
        num_currencies:
          description: The total number of currencies
          example: "12801"
          type: string
        num_currencies_active:
          description: The total number of active currencies
          example: "5277"
          type: string
        num_currencies_inative:
          description: The total number of inactive currencies
          example: "6337"
          type: string
        num_currencies_dead:
          description: The total number of dead currencies
          example: "1187"
          type: string
        num_currencies_new:
          description: The total number of new currencies
          example: "312"
          type: string
        market_cap:
          description: Current global market cap
          example: "1799044056712"
          type: string
        transparent_market_cap:
          description: Current global transparent market cap
          example: "1759092897670"
          type: string
        "1d":
          $ref: '#/components/schemas/GlobalTickerInterval'
        "7d":
          $ref: '#/components/schemas/GlobalTickerInterval'
        "30d":
          $ref: '#/components/schemas/GlobalTickerInterval'
        "365d":
          $ref: '#/components/schemas/GlobalTickerInterval'
        ytd:
          $ref: '#/components/schemas/GlobalTickerInterval'
    inline_response_200_4:
      example: '{"timestamp":"2018-05-14T00:04:31Z","available":"17052037.0","max":"21000000.0"}'
      properties:
        timestamp:
          description: RFC3999 timestamp
          type: string
        available:
          description: available supply at `timestamp`
          type: string
        max:
          description: max supply at `timestamp`
          type: string
    inline_response_200_5:
      example: '{"currency":"BTC","open_available":"17032187.0","open_max":"21000000.0","open_timestamp":"2018-05-14T00:04:31Z","close_available":"17052037.0","close_max":"21000000.0","close_timestamp":"2018-05-24T14:19:34Z"}'
      properties:
        currency:
          description: Nomics ID of the currency
          type: string
        open_available:
          description: Open available supply
          type: string
        open_max:
          description: Open max supply
          type: string
        open_timestamp:
          description: RFC3999 timestamp of the open supply information
          type: string
        close_available:
          description: Close available supply
          type: string
        close_max:
          description: Close max supply
          type: string
        close_timestamp:
          description: RFC3999 timestamp of the close supply information
          type: string
    _exchanges_ticker_interval:
      description: |
        Interval-specific ticker attributes. The key will be the name of the interval
        (IE: `1d` or `365d`) and will occur for every requested interval.
      properties:
        volume:
          description: Total volume for the given interval in USD
          type: string
        volume_change:
          description: Amount of volume change for the given interval in USD
          type: string
        volume_change_pct:
          description: Percent change of volume for the given interval
          type: string
        spot_volume:
          description: Total spot market volume for the given interval in USD
          type: string
        spot_volume_change:
          description: Amount of spot market volume change for the given interval
            in USD
          type: string
        spot_volume_change_pct:
          description: Percent change of spot market volume for the given interval
          type: string
        derivative_volume:
          description: Total derivative market volume for the given interval in USD
          type: string
        derivative_volume_change:
          description: Amount of derivative market volume change for the given interval
            in USD
          type: string
        derivative_volume_change_pct:
          description: Percent change of derivative market volume for the given interval
          type: string
        trades:
          description: Total trades for the given interval in USD
          type: string
        trades_change:
          description: Amount of trades change for the given interval in USD
          type: string
        trades_change_pct:
          description: Percent change of trades for the given interval
          type: string
    inline_response_200_6:
      example: '{"id":"binance","name":"Binance","logo_url":"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/exchanges/binance.svg","transparency_grade":"A","coverage_type":"trades","order_books":true,"first_trade":"2017-07-13T00:00:00Z","first_candle":"2017-07-13T00:00:00Z","first_order_book":"2018-08-29T00:00:00Z","num_pairs":"1380","num_pairs_unmapped":"4","last_updated":"2021-02-09T17:41:49.274Z","fiat_currencies":["AUD","BRL","EUR","GBP","NGN","RUB","TRY","UAH","ZAR"],"rank":"1","centralized":true,"decentralized":false,"1d":{"volume":"69502395456.05","volume_change":"8271350165.81","volume_change_pct":"0.1351","trades":"57026206","trades_change":"2164610","trades_change_pct":"0.0395","spot_volume":"30692230668.60","spot_volume_change":"3690855752.34","spot_volume_change_pct":"0.1367","derivative_volume":"38810164787.45","derivative_volume_change":"4580494413.47","derivative_volume_change_pct":"0.1338"}}'
      properties:
        id:
          description: Nomics ID of the exchange
          type: string
        name:
          description: Name of the exchange
          type: string
        logo_url:
          description: URL to logo of the exchange
          type: string
        rank:
          description: Rank of the exchange relative to other exchanges after the
            `status` and `type` filters are applied
          type: string
        transparency_grade:
          description: Transparency grade of the exchange
          type: string
        coverage_type:
          description: Coverage type of the exchange (trades, candles, tickers)
          type: string
        order_books:
          description: Indicates if order books are available
          type: boolean
        first_trade:
          description: Date of the first trade available
          type: string
        first_candle:
          description: Date of the first candle available
          type: string
        first_order_book:
          description: Date of the first order book available
          type: string
        last_updated:
          description: Timestamp of the last update of data
          type: string
        fiat_currencies:
          description: List of fiat currencies available
          items:
            type: string
          type: array
        num_pairs:
          description: Number of currency pairs (markets) available
          type: string
        num_pairs_unmapped:
          description: Number of currency pairs (markets) that we know about, but
            are not yet available
          type: string
        centralized:
          description: Whether or not the exchange is centralized
          type: boolean
        decentralized:
          description: Whether or not the exchange is decentralized
          type: boolean
        interval:
          $ref: '#/components/schemas/_exchanges_ticker_interval'
    inline_response_200_7:
      example:
        volume: "3747500000"
        transparent_spot_volume: "1197368698"
        derivative_volume: "2550131302"
        spot_volume: "1197368698"
        transparent_volume: "3747500000"
        transparent_derivative_volume: "2550131302"
        timestamp: 2020-04-14T00:00:00Z
      properties:
        timestamp:
          description: RFC3339 timestamp
          example: 2020-04-14T00:00:00Z
          type: string
        volume:
          description: Total volume (spot volume + derivative volume) in the target
            currency (`USD` by default)
          example: "3747500000"
          type: string
        spot_volume:
          description: Total spot market volume in the target currency (`USD` by default)
          example: "1197368698"
          type: string
        derivative_volume:
          description: Total derivative market volume in the target currency (`USD`
            by default)
          example: "2550131302"
          type: string
        transparent_volume:
          description: Total transparent volume in the target currency (`USD` by default)
          example: "3747500000"
          type: string
        transparent_spot_volume:
          description: Total transparent spot market volume in the target currency
            (`USD` by default)
          example: "1197368698"
          type: string
        transparent_derivative_volume:
          description: Total transparent derivative market volume in the target currency
            (`USD` by default)
          example: "2550131302"
          type: string
    inline_response_200_8:
      example: '{"id":"binance","capability_markets\"":true,"capability_trades\"":true,"capability_trades_by_timestamp\"":false,"capability_trades_snapshot\"":false,"capability_orders_snapshot\"":true,"capability_candles\"":false,"capability_ticker\"":false,"integrated\"":false,"name":"Binance","description":"The
        company was created under the tutelage of Changpeng ''CZ'' Zhao and his co-founder
        Yi He.","location":"Malta","logo_url":"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/exchanges/binance.svg","website_url":"https://www.binance.com/","fees_url":"https://www.binance.com/en/fee/schedule","twitter_url":"https://twitter.com/binance","facebook_url":"https://www.facebook.com/binance","reddit_url":"https://www.reddit.com/r/binance/","chat_url":"https://t.me/binanceexchange","blog_url":"https://www.binance.com/en/blog","year":2017,"transparency_grade":"A","order_books_interval":60000,"centralized":true,"decentralized":false}'
      properties:
        id:
          description: Nomics Exchange ID
          type: string
        capability_markets:
          description: Flag that determines if the exchange provides markets data
          type: boolean
        capability_trades:
          description: Flag that determines if the exchange provides trades data
          type: boolean
        capability_trades_by_timestamp:
          description: Flag that determines if the exchange provides trades by timestamp
            data
          type: boolean
        capability_trades_snapshot:
          description: Flag that determines if the exchange provides recent-only trades
            data
          type: boolean
        capability_orders_snapshot:
          description: Flag that determines if the exchange provides orderbook snapshot
            data
          type: boolean
        capability_candles:
          description: Flag that determines if the exchange provides OHLCV candle
            data
          type: boolean
        capability_ticker:
          description: Flag that determines if the exchange provides 24h ticker data
          type: boolean
        integrated:
          description: Flag that determines if the exchange has completed a [Nomics
            Deep Data Integration](https://nomicsintegration.com)
          type: boolean
        name:
          description: Exchange Name
          type: string
        description:
          description: Exchange description
          type: string
        location:
          description: Primary exchange location country
          type: string
        logo_url:
          description: Exchange logo URL
          type: string
        website_url:
          description: Exchange website URL
          type: string
        fees_url:
          description: Exchange fees URL
          type: string
        twitter_url:
          description: Exchange Twitter URL
          type: string
        facebook_url:
          description: Exchange Facebook URL
          type: string
        reddit_url:
          description: Exchange Reddit URL
          type: string
        chat_url:
          description: Exchange chat URL
          type: string
        blog_url:
          description: Exchange blog URL
          type: string
        year:
          description: Year exchange became active
          type: string
        transparency_grade:
          description: The [Nomics Transparency Rating](https://blog.nomics.com/essays/transparency-ratings/)
            for the exchange
          type: string
        order_books_interval:
          description: The maximum frequency (in milliseconds) at which order book
            snapshots are taken for this exchange
          type: number
        centralized:
          description: Whether or not the exchange is centralized
          type: boolean
        decentralized:
          description: Whether or not the exchange is decentralized
          type: boolean
    inline_response_200_9:
      example: '{"exchange":"binance","market":"XMRBTC","base":"XMR","quote":"BTC"}'
      properties:
        exchange:
          description: Nomics Exchange ID
          type: string
        market:
          description: The Exchange's Market ID (usable on Exchange's API)
          type: string
        base:
          description: Nomics Currency ID of the asset being traded
          type: string
        quote:
          description: Nomics Currency ID of the asset used to quote a price
          type: string
    _exchange_markets_ticker_interval:
      description: |
        Interval-specific ticker attributes. The key will be the name of the interval
        (IE: `1d` or `365d`) and will occur for every requested interval.
      properties:
        volume:
          description: Volume in USD
          type: string
        volume_base:
          description: Volume in the base currency
          type: string
        volume_change:
          description: Change of the volume in USD
          type: string
        volume_base_change:
          description: Change of the volume in the base currency
          type: string
        trades:
          description: Number of trades
          type: string
        trades_change:
          description: Change in the number of trades
          type: string
        price_change:
          description: Change in the price in USD
          type: string
        price_quote_change:
          description: Change in the price in the quote currency
          type: string
    inline_response_200_10:
      example: '{"exchange":"binance","market":"BTCUSDT","type":"spot","aggregated":false,"price_exclude":false,"volume_exclude":false,"base":"BTC","quote":"USDT","base_symbol":"BTC","quote_symbol":"USDT","price":"7252.08623165","price_quote":"7231.48000000","volume_usd":"455152159.26","last_updated":"2019-11-22T18:57:00Z","1d":{"volume":"811359239.06","volume_base":"111495.36","volume_base_change":"-56699.74","volume_change":"367840228.36","trades":"693395","trades_change":"-381033","price_change":"-343.64505167","price_quote_change":"0.00000000"}}'
      properties:
        exchange:
          description: Nomics Exchange ID
          type: string
        market:
          description: Nomics Market ID
          type: string
        type:
          description: Market Type
          enum:
          - spot
          - derivative
          - index
          - test
          type: string
        subtype:
          description: Market Subtype
          enum:
          - funding
          - future
          - leverage
          - option
          - perpetual
          type: string
        aggregated:
          description: Indicates if the market is used to price the base and quote
            currencies. See [Nomics Pricing Methodology](https://blog.nomics.com/newsletter/nomics-pricing-methodology-explained/)
            for more information.
          type: boolean
        price_exclude:
          description: Indicates if the market has been excluded from pricing the
            base and quote currencies.
          type: boolean
        volume_exclude:
          description: Indicates if the market has been excluded from counting towards
            volume for base and quote currencies.
          type: boolean
        base:
          description: Nomics Currency ID of the base of the market
          type: string
        quote:
          description: Nomics Currency ID of the quote of the market
          type: string
        base_symbol:
          description: Nomics display symbol of the base of the market
          type: string
        quote_symbol:
          description: Nomics display symbol of the quote of the market
          type: string
        price:
          description: Latest price of the market in USD
          type: string
        price_quote:
          description: Latest price of the market in the quote currency
          type: string
        volume_usd:
          description: Market volume in USD based on the first `interval` (or `1d`
            if none specified)
          type: string
        last_updated:
          description: Timestamp of when the market was last updated
          type: string
        interval:
          $ref: '#/components/schemas/_exchange_markets_ticker_interval'
    inline_response_200_11:
      example: '{"exchange":"bitfinex","quote":"USD","price":"7419.69255","timestamp":"2018-06-05T13:23:18.345Z"}'
      properties:
        exchange:
          description: Nomics ID of the exchange
          type: string
        quote:
          description: Nomics ID of the quote currency
          type: string
        price:
          description: Price in USD of the most recent trade
          type: string
        timestamp:
          description: RFC3339 Timestamp of the most recent trade
          type: string
    inline_response_200_12:
      example: '{"exchange":"binance","base":"ADA","quote":"BTC","price_quote":"0.00002183","timestamp":"2018-06-25T15:13:21.304Z"}'
      properties:
        exchange:
          description: Nomics ID of the exchange
          type: string
        base:
          description: Nomics ID of the base currency
          type: string
        quote:
          description: Nomics ID of the quote currency
          type: string
        price_quote:
          description: Price in the quote currency of the most recent trade
          type: string
        timestamp:
          description: RFC3339 Timestamp of the most recent trade
          type: string
    inline_response_200_13:
      example: '{"exchange":"binance","base":"ADA","quote":"BTC","volume_base":"4974200617.00000","volume_usd":"1496075991.61416","open_quote":"0.00002547","open_timestamp":"2018-04-14T00:00:00Z","close_quote":"0.00003071","close_timestamp":"2018-05-14T00:00:00Z","num_trades":"2456653"}'
      properties:
        exchange:
          description: Nomics Exchange ID
          type: string
        base:
          description: Nomics Currency ID of the asset being traded
          type: string
        quote:
          description: Nomics Currency ID of the asset used to quote a price
          type: string
        volume_base:
          description: Total volume in the base currency
          type: string
        volume_usd:
          description: Total volume in USD
          type: string
        open_quote:
          description: Open price in the quote currency
          type: string
        open_timestamp:
          description: Timestamp of the open price in RFC 3339
          type: string
        close_quote:
          description: Close price in the quote currency
          type: string
        close_timestamp:
          description: Timestamp of the close price in RFC 3339
          type: string
        num_trades:
          description: Total number of trades
          type: string
    inline_response_200_14:
      example:
        market_cap: "269222501959"
        transparent_market_cap: "270122591259"
        timestamp: 2018-07-05T15:00:00Z
      properties:
        timestamp:
          description: RFC3339 timestamp
          example: 2018-07-05T15:00:00Z
          type: string
        market_cap:
          description: Total market cap in the target currency (`USD` by default)
          example: "269222501959"
          type: string
        transparent_market_cap:
          description: Total transparent market cap in the target currency (`USD`
            by default)
          example: "270122591259"
          type: string
    _candles_volume_transparency:
      properties:
        '?':
          type: string
          x-go-alternate-name: QuestionMark
        A:
          type: string
        B:
          type: string
        C:
          type: string
        D:
          type: string
    inline_response_200_15:
      example: '{"timestamp":"2020-03-30T15:00:00Z","open":"6362.19740968","high":"6440.12784982","low":"6362.13190948","close":"6372.30963698","volume":"2063249447","transparent_open":"6361.48718894","transparent_high":"6479.69105111","transparent_low":"6351.20910437","transparent_close":"6372.80226823","transparent_volume":"192668445","volume_transparency":{"?":"141033501","A":"192668444","B":"1881706","C":"1324902748","D":"402763045"}}'
      properties:
        timestamp:
          description: Start time of the candle in RFC3339
          type: string
        open:
          description: First trade price in USD
          type: string
        high:
          description: Highest price in USD
          type: string
        low:
          description: Lowest price in USD
          type: string
        close:
          description: Last trade price in USD
          type: string
        volume:
          description: Volume in USD
          type: string
        transparent_open:
          description: First transparent trade price in USD
          type: string
        transparent_high:
          description: Highest transparent price in USD
          type: string
        transparent_low:
          description: Lowest transparent price in USD
          type: string
        transparent_close:
          description: Last transparent trade price in USD
          type: string
        transparent_volume:
          description: Transparent volume in USD
          type: string
        volume_transparency:
          $ref: '#/components/schemas/_candles_volume_transparency'
    inline_response_200_16:
      example:
        volume: "10177952765"
        transparent_spot_volume: "4137912676"
        derivative_volume: "2471038271"
        spot_volume: "7706914494"
        transparent_volume: "6608950947"
        transparent_derivative_volume: "2471038271"
        timestamp: 2018-04-14T00:00:00Z
      properties:
        timestamp:
          description: RFC3339 timestamp
          example: 2018-04-14T00:00:00Z
          type: string
        volume:
          description: Total volume (spot volume + derivative volume) in the target
            currency (`USD` by default)
          example: "10177952765"
          type: string
        spot_volume:
          description: Total spot market volume in the target currency (`USD` by default)
          example: "7706914494"
          type: string
        derivative_volume:
          description: Total derivative market volume in the target currency (`USD`
            by default)
          example: "2471038271"
          type: string
        transparent_volume:
          description: Total transparent volume in the target currency (`USD` by default)
          example: "6608950947"
          type: string
        transparent_spot_volume:
          description: Total transparent spot market volume in the target currency
            (`USD` by default)
          example: "4137912676"
          type: string
        transparent_derivative_volume:
          description: Total transparent derivative market volume in the target currency
            (`USD` by default)
          example: "2471038271"
          type: string
    inline_response_200_17:
      example: '{"timestamp":"2018-05-01T00:00:00Z","rate":"1.2079045272261680"}'
      properties:
        timestamp:
          description: RFC3999 timestamp of the rate
          type: string
        rate:
          description: Rate of exchange to USD
          type: string
    inline_response_200_18:
      example:
        asks:
        - - 7020
          - 4.77738
        - - 7020.03
          - 0.864663
        - - 7020.26
          - 2.856361
        - - 7020.27
          - 0.031258
        - - 7021
          - 3.076297
        bids:
        - - 7017.98
          - 0.18376
        - - 7017.97
          - 0.094285
        - - 7017.95
          - 2
        - - 7017.87
          - 0.214651
        - - 7017.38
          - 2
        timestamp: 2018-05-14T00:04:31Z
      properties:
        timestamp:
          description: RFC3339 timestamp of the order book snapshot
          example: 2018-05-14T00:04:31Z
          type: string
        bids:
          description: Tuples of bids in descending order (first entry is best bid).
            First entry is price in the quote currency. Second entry is volume of
            the base currency.
          example:
          - - 7017.98
            - 0.18376
          - - 7017.97
            - 0.094285
          - - 7017.95
            - 2
          - - 7017.87
            - 0.214651
          - - 7017.38
            - 2
          items:
            items:
              type: number
            type: array
          type: array
        asks:
          description: Tuples of asks in ascending order (first entry is best ask).
            First entry is price in the quote currency. Second entry is volume of
            the base currency.
          example:
          - - 7020
            - 4.77738
          - - 7020.03
            - 0.864663
          - - 7020.26
            - 2.856361
          - - 7020.27
            - 0.031258
          - - 7021
            - 3.076297
          items:
            items:
              type: number
            type: array
          type: array
    inline_response_200_19:
      example: '{"timestamp":"2018-04-14T00:00:00Z","low":"7810.00000000","open":"7877.48000000","close":"7999.01000000","high":"8186.00000000","volume":"31621.28635700","num_trades":"168756","price_outlier":null,"volume_outlier":null}'
      properties:
        timestamp:
          description: Start time of the candle in RFC3339
          type: string
        low:
          description: Lowest price in quote currency
          type: string
        open:
          description: First trade price in quote currency
          type: string
        close:
          description: Last trade price in quote currency
          type: string
        high:
          description: Highest price in quote currency
          type: string
        volume:
          description: Volume in base currency
          type: string
        num_trades:
          description: Number of trades
          type: string
        price_outlier:
          description: True when the candle is a price outlier.  May be null if outlier
            detection has not been applied to the candle.
          type: boolean
        volume_outlier:
          description: True when the candle is a volume outlier.  May be null if outlier
            detection has not been applied to the candle.
          type: boolean
    inline_response_200_20:
      example: '{"timestamp":"2018-04-14T00:00:00Z","low":"0.06101","open":"0.06267940","close":"0.06282333","high":"0.066667","volume":"193325.66033455","num_trades":"185948","price_outlier":null,"volume_outlier":null}'
      properties:
        timestamp:
          description: Start time of the candle in RFC3339
          type: string
        low:
          description: Lowest price in quote currency
          type: string
        open:
          description: Volume weighted average of first trade prices in quote currency
          type: string
        close:
          description: Volume weighted average of last trade prices in quote currency
          type: string
        high:
          description: Highest price in quote currency
          type: string
        volume:
          description: Volume in base currency
          type: string
        num_trades:
          description: Total number of trades across all markets
          type: string
        price_outlier:
          description: True when the candle is a price outlier.  May be null if outlier
            detection has not been applied to the candle.
          type: boolean
        volume_outlier:
          description: True when the candle is a volume outlier.  May be null if outlier
            detection has not been applied to the candle.
          type: boolean
    _currencies_predictions_ticker_predictions:
      properties:
        avg_error_pct:
          description: Historical mean error percentage
          type: string
        avg_error_pct_30d:
          description: 30 day mean error percentage
          type: string
        avg_error_pct_7d:
          description: 7 day mean error percentage
          type: string
        interval:
          description: Prediction size as Nomics interval
          type: string
        price_change_pct:
          description: Predicted price change percent
          type: string
        price_end:
          description: Predicted price at the end of the interval (USD)
          type: string
        price_start:
          description: Price when the prediction was made (USD)
          type: string
        timestamp_end:
          description: Timestamp at the end of the interval
          type: string
        timestamp_start:
          description: Timestamp when the prediction was made
          type: string
    inline_response_200_21:
      properties:
        id:
          description: Currency ID
          type: string
        predictions:
          items:
            $ref: '#/components/schemas/_currencies_predictions_ticker_predictions'
          type: array
    inline_response_200_22_predictions:
      properties:
        price_change_pct:
          description: Predicted price change percent
          type: string
        price_end:
          description: Predicted price at the end of the interval (USD)
          type: string
        actual_price_end:
          description: Actual price at the end of the interval (USD)
          type: string
        price_start:
          description: Price when the prediction was made (USD)
          type: string
        timestamp_end:
          description: Timestamp at the end of the interval
          type: string
        timestamp_start:
          description: Timestamp when the prediction was made
          type: string
    inline_response_200_22:
      example: '{"id":"BTC","interval":"7d","predictions":[{"actual_price_end":"7.40000000","price_change_pct":"-0.1954","price_end":"8.04649976","price_start":"10.00000000","timestamp_end":"2011-09-05T00:00:00Z","timestamp_start":"2011-08-30T00:00:00Z"}]}'
      properties:
        id:
          description: Currency ID
          type: string
        interval:
          description: Prediction interval
          type: string
        predictions:
          items:
            $ref: '#/components/schemas/inline_response_200_22_predictions'
          type: array
    inline_response_200_23:
      example: '{"currency":"BTC","volume":"7039575495.41955","open":"8746.03472","open_timestamp":"2018-05-14T00:00:00Z","close":"7509.12469","close_timestamp":"2018-05-24T00:00:00Z"}'
      properties:
        currency:
          description: Nomics ID of the currency
          type: string
        volume:
          description: Total volume in USD over the time range
          type: string
        open:
          description: Open price in USD
          type: string
        open_timestamp:
          description: RFC3999 timestamp of the open price
          type: string
        close:
          description: Close price in USD
          type: string
        close_timestamp:
          description: RFC3999 timestamp of the open price
          type: string
    inline_response_200_24:
      example: '{"currency":"BTC","price":"24436.29525","timestamp":"2018-01-05T00:00:00Z","exchange":"bithumb","quote":"KRW"}'
      properties:
        currency:
          description: Nomics ID of the currency
          type: string
        price:
          description: Highest price of the currency in USD
          type: string
        timestamp:
          description: Timestamp of the high price in RFC3339
          type: string
        exchange:
          description: Exchange ID on which the high occurred
          type: string
        quote:
          description: Quote currency against which the high occurred
          type: string
    inline_response_200_25:
      example:
        week:
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: BTC
          closes:
          - "7436.82313"
          - "7436.82313"
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: BTC
          closes:
          - "7436.82313"
          - "7436.82313"
        month:
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: BTC
          closes:
          - "7436.82313"
          - "7436.82313"
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: BTC
          closes:
          - "7436.82313"
          - "7436.82313"
        year:
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: BTC
          closes:
          - "7436.82313"
          - "7436.82313"
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: BTC
          closes:
          - "7436.82313"
          - "7436.82313"
        day:
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: BTC
          closes:
          - "7436.82313"
          - "7436.82313"
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: BTC
          closes:
          - "7436.82313"
          - "7436.82313"
      properties:
        day:
          description: Currency performance over the past 24 hours
          items:
            $ref: '#/components/schemas/SparklineRow'
          type: array
        week:
          description: Currency performance over the past 7 days
          items:
            $ref: '#/components/schemas/SparklineRow'
          type: array
        month:
          description: Currency performance over the past 30 days
          items:
            $ref: '#/components/schemas/SparklineRow'
          type: array
        year:
          description: Currency performance over the past 365 days
          items:
            $ref: '#/components/schemas/SparklineRow'
          type: array
    inline_response_200_26:
      example:
        week:
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: MarketCap
          closes:
          - "7436.82313"
          - "7436.82313"
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: MarketCap
          closes:
          - "7436.82313"
          - "7436.82313"
        month:
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: MarketCap
          closes:
          - "7436.82313"
          - "7436.82313"
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: MarketCap
          closes:
          - "7436.82313"
          - "7436.82313"
        year:
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: MarketCap
          closes:
          - "7436.82313"
          - "7436.82313"
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: MarketCap
          closes:
          - "7436.82313"
          - "7436.82313"
        day:
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: MarketCap
          closes:
          - "7436.82313"
          - "7436.82313"
        - timestamps:
          - 2018-04-03T16:00:00Z
          - 2018-04-03T16:00:00Z
          currency: MarketCap
          closes:
          - "7436.82313"
          - "7436.82313"
      properties:
        day:
          description: Market performance over the past 24 hours
          items:
            $ref: '#/components/schemas/MarketCapSparklineRow'
          type: array
        week:
          description: Market performance over the past 7 days
          items:
            $ref: '#/components/schemas/MarketCapSparklineRow'
          type: array
        month:
          description: Market performance over the past 30 days
          items:
            $ref: '#/components/schemas/MarketCapSparklineRow'
          type: array
        year:
          description: Market performance over the past 365 days
          items:
            $ref: '#/components/schemas/MarketCapSparklineRow'
          type: array
    inline_response_200_27:
      example: '{"currency":"EUR","open":"1.1934028689404969","open_timestamp":"2018-05-14T00:00:00Z","close":"1.1707956727391936","close_timestamp":"2018-05-24T00:00:00Z"}'
      properties:
        currency:
          description: Nomics ID of the currency
          type: string
        open:
          description: Open rate of exchange
          type: string
        open_timestamp:
          description: RFC3999 timestamp of the open rate
          type: string
        close:
          description: Close rate of exchange
          type: string
        close_timestamp:
          description: RFC3999 timestamp of the open rate
          type: string
  securitySchemes:
    Key:
      description: |
        **You must include your API Key as a query parameter in every request you make.**

        For example:

        https://api.nomics.com/v1/markets?key=your-key-here

        [Get your free Nomics API key here](https://p.nomics.com/cryptocurrency-bitcoin-api/)
      in: query
      name: key
      type: apiKey
x-tagGroups:
- name: Standard
  tags:
  - Currencies
  - Markets
  - Volume
  - Exchange Rates
- name: Enhanced*
  tags:
  - Global*
  - Currencies*
  - Exchanges*
  - Markets*
  - Candles*
  - Trades*
  - Orders*
  - Predictions*
- name: Other
  tags:
  - Deprecated
