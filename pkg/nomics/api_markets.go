/*
 * Nomics Cryptocurrency & Bitcoin API
 *
 * # Introduction  Welcome to the Nomics Cryptocurrency & Bitcoin API. To sign up for an API key please [go here](https://p.nomics.com/cryptocurrency-bitcoin-api/).  [nomics.com](https://nomics.com) is built entirely with the Nomics API. Everything we've done on [nomics.com](https://nomics.com) you can do with our API. There are no internal API endpoints.  If you need support, reach out to use at our [forums](https://forums.nomics.com/).  # General  ## API Server URL  The Nomics API runs at `https://api.nomics.com/v1`. All requests should be prefixed by the server URL.  ## JSON and CSV Support  By default, all endpoints serve data as JSON. However, by passing `format=csv` in the URL, some endpoints will return CSV data. This can be used in Google Sheets via the `IMPORTDATA` function.  CSV responses will not contain a header row, this is so that data can be easily concatenated from multiple requests. The fields will be rendered in the same order as the JSON fields. See the endpoint's documentation for an example.  Not all endpoints support CSV. Endpoints that support CSV will have the `format` parameter in the parameters section.  ## Errors  The Nomics API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.  ## Versioning  We follow Semantic Versioning. That means our API is versioned as Major.Minor.Patch. For example, Version 1.2.3 has major version 1, minor version 2, and patch version 3.  Major version changes indicate that we have altered the API significantly and it is no longer compatible with a previous version. Major versions are also used as the API URL prefix.  When we update the major version, we will not remove the previous version without notice to API customers and a deprecation period to allow everyone to smoothly update to the new version.  Minor version changes indicate that we have added new functionality without breaking any existing functionality. An API client is compatible with future minor versions. Note that a minor version update may add a new field to an existing API endpoint's response. Your API client must ignore fields it does not understand in order to be compatible with future minor versions.  Patch version changes indicate we fixed a bug or security vulnerability. Patch versions don't add new functionality.  ## Cross Origin Resource Sharing (CORS)  This API supports Cross Origin Resource Sharing, which allows you to make API requests directly from your user's browser.  To use CORS, you must provide Nomics with the domains on which your application will run so that we can whitelist them for CORS access.  Requests from `localhost`, `127.0.0.1`, and `0.0.0.0` will always succeed to aid in development.  ## Demo Application  A demo application using the Nomics API, CORS, and React is available on Glitch.com. This can help you get started using the Nomics API. Keep in mind it uses the demo key, which is rotated frequently. You should get your own API key before deploying an app to production. Check it out:  <div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\">   <iframe src=\"https://glitch.com/embed/#!/embed/nomics-api-demo?path=README.md\" alt=\"nomics-api-demo on glitch\" style=\"height: 100%; width: 100%; border: 0;\"></iframe> </div>  ## Demo Spreadsheet  Here is a demo of using the Nomics API with Google Sheets.  <iframe width=\"100%\" height=\"400px\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vShn2iWjvqQ0ueBa9l9g1UBYVM92OZSgZ4nmp0rWuykvHPrvyMyMeSN4r0Orj0ACEIIKdCz6cc5abCw/pubhtml?widget=true&amp;headers=false\"></iframe>  ### Formulas  * A2: `=IMPORTDATA(\"https://api.nomics.com/v1/prices?key=your-key-here&format=csv\")` * Column F: `=LOOKUP(D2,A:A,B:B)` finds D2 (BTC) in column A and pulls the price from column B * Column G: `=E2*F2` * Column H: `=G2/I$2` * Column I: `=SUM(G:G)`  # SDKs and Libraries  ## By Nomics - [Nomics JavaScript Client](https://github.com/nomics-crypto/nomics-javascript)  ## Community Submissions - [Nomics.com Swift SDK](https://forums.nomics.com/t/swift-sdk-supporting-ios-macos-tvos-and-watchos/) by Nick DiZazzo - [Nomics Node.js Library](https://forums.nomics.com/t/i-made-a-library-for-node-js/) by mikunimaru - [Nomics Python Wrapper](https://forums.nomics.com/t/python-package-for-nomics-api/119) by Taylor Facen - [Python Wrapper for Nomics](https://github.com/AviFelman/py-nomics) by Avi Felman  We love watching developers explore new use-cases with our API. Whether you're tinkering on a small side project or building an open-source resource, please share what you're up to in our [forums](https://forums.nomics.com/).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nomics

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// MarketsApiService MarketsApi service
type MarketsApiService service

type ApiGetExchangeMarketsTickerRequest struct {
	ctx        _context.Context
	ApiService *MarketsApiService
	interval   *string
	currency   *string
	base       *string
	quote      *string
	exchange   *string
	market     *string
	convert    *string
	status     *string
	search     *string
	perPage    *int32
	page       *int32
}

// interval  Comma separated time interval of the ticker(s).
func (r ApiGetExchangeMarketsTickerRequest) Interval(interval string) ApiGetExchangeMarketsTickerRequest {
	r.interval = &interval
	return r
}

// currency  A comma separated list of Nomics Currency IDs. A market must have one of the currencies as either its base or quote currency to be included.
func (r ApiGetExchangeMarketsTickerRequest) Currency(currency string) ApiGetExchangeMarketsTickerRequest {
	r.currency = &currency
	return r
}

// base  A comma separated list of Nomics Currency IDs. A market must have one of the currencies as its base currency to be included.
func (r ApiGetExchangeMarketsTickerRequest) Base(base string) ApiGetExchangeMarketsTickerRequest {
	r.base = &base
	return r
}

// quote  A comma separated list of Nomics Currency IDs. A market must have one of the currencies as its quote currency to be included.
func (r ApiGetExchangeMarketsTickerRequest) Quote(quote string) ApiGetExchangeMarketsTickerRequest {
	r.quote = &quote
	return r
}

// exchange  A comma separated list of Nomics Exchange IDs. A market must be on one of the exchanges to be included.
func (r ApiGetExchangeMarketsTickerRequest) Exchange(exchange string) ApiGetExchangeMarketsTickerRequest {
	r.exchange = &exchange
	return r
}

// market  A comma separated list of Nomics Market IDs. A market's `market_id` must be one of the provided markets to be included.
func (r ApiGetExchangeMarketsTickerRequest) Market(market string) ApiGetExchangeMarketsTickerRequest {
	r.market = &market
	return r
}

// convert  Nomics Currency ID to convert all financial data to
func (r ApiGetExchangeMarketsTickerRequest) Convert(convert string) ApiGetExchangeMarketsTickerRequest {
	r.convert = &convert
	return r
}

// status  Status by which to filter markets. All markets are shown by default, regardless of status.
func (r ApiGetExchangeMarketsTickerRequest) Status(status string) ApiGetExchangeMarketsTickerRequest {
	r.status = &status
	return r
}

// search  Search string by which to filter markets.  Items match the search query if it's a substring of their exchange id, market id, base currency symbol or quote currency symbol.
func (r ApiGetExchangeMarketsTickerRequest) Search(search string) ApiGetExchangeMarketsTickerRequest {
	r.search = &search
	return r
}

// perPage  The maximum number of items to return per paginated response. Paginated responses include an additional response header, `X-Pagination-Total-Items`, which represents the total number of items available after all the request filters have been applied.  Must be between `1` and `100` (inclusive).
func (r ApiGetExchangeMarketsTickerRequest) PerPage(perPage int32) ApiGetExchangeMarketsTickerRequest {
	r.perPage = &perPage
	return r
}

// page  Which page of items to get.  Only applicable when `per-page` is also supplied.
func (r ApiGetExchangeMarketsTickerRequest) Page(page int32) ApiGetExchangeMarketsTickerRequest {
	r.page = &page
	return r
}

func (r ApiGetExchangeMarketsTickerRequest) Execute() ([]InlineResponse20010, *_nethttp.Response, error) {
	return r.ApiService.GetExchangeMarketsTickerExecute(r)
}

/*
 * GetExchangeMarketsTicker Exchange Markets Ticker
 * ### !! This API endpoint is only available to customers of our paid API plans.  Please [go here](https://p.nomics.com/pricing/) to learn more.

The Exchange Markets Ticker provides high level information about individual markets on exchanges integrated
with Nomics. It provides metadata, the type of market, aggregation information, current financial data, and
financial data over preset intervals.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetExchangeMarketsTickerRequest
*/
func (a *MarketsApiService) GetExchangeMarketsTicker(ctx _context.Context) ApiGetExchangeMarketsTickerRequest {
	return ApiGetExchangeMarketsTickerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []InlineResponse20010
 */
func (a *MarketsApiService) GetExchangeMarketsTickerExecute(r ApiGetExchangeMarketsTickerRequest) ([]InlineResponse20010, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse20010
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketsApiService.GetExchangeMarketsTicker")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/exchange-markets/ticker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.interval != nil {
		localVarQueryParams.Add("interval", parameterToString(*r.interval, ""))
	}
	if r.currency != nil {
		localVarQueryParams.Add("currency", parameterToString(*r.currency, ""))
	}
	if r.base != nil {
		localVarQueryParams.Add("base", parameterToString(*r.base, ""))
	}
	if r.quote != nil {
		localVarQueryParams.Add("quote", parameterToString(*r.quote, ""))
	}
	if r.exchange != nil {
		localVarQueryParams.Add("exchange", parameterToString(*r.exchange, ""))
	}
	if r.market != nil {
		localVarQueryParams.Add("market", parameterToString(*r.market, ""))
	}
	if r.convert != nil {
		localVarQueryParams.Add("convert", parameterToString(*r.convert, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per-page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Key"]; ok {
				var key string
				key = apiKey.Key
				localVarQueryParams.Add("key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketCapHistoryRequest struct {
	ctx                 _context.Context
	ApiService          *MarketsApiService
	start               *string
	end                 *string
	convert             *string
	format              *string
	includeTransparency *bool
}

// start  Start time of the interval in RFC3339 (URI escaped)
func (r ApiGetMarketCapHistoryRequest) Start(start string) ApiGetMarketCapHistoryRequest {
	r.start = &start
	return r
}

// end  End time of the interval in RFC3339 (URI escaped). If not provided, the current time is used.
func (r ApiGetMarketCapHistoryRequest) End(end string) ApiGetMarketCapHistoryRequest {
	r.end = &end
	return r
}

// convert  Currency to quote ticker price, market cap, and volume values. May be a Fiat Currency or Cryptocurrency. Default is `USD`.
func (r ApiGetMarketCapHistoryRequest) Convert(convert string) ApiGetMarketCapHistoryRequest {
	r.convert = &convert
	return r
}

// format  Format of the response. Defaults to JSON when blank.
func (r ApiGetMarketCapHistoryRequest) Format(format string) ApiGetMarketCapHistoryRequest {
	r.format = &format
	return r
}

// includeTransparency  Whether to include [Transparent Volume](https://blog.nomics.com/essays/transparent-volume/) and transparent market cap information in the response. Default is `false`. This option is only available to customers of our paid API plans.
func (r ApiGetMarketCapHistoryRequest) IncludeTransparency(includeTransparency bool) ApiGetMarketCapHistoryRequest {
	r.includeTransparency = &includeTransparency
	return r
}

func (r ApiGetMarketCapHistoryRequest) Execute() ([]InlineResponse20014, *_nethttp.Response, error) {
	return r.ApiService.GetMarketCapHistoryExecute(r)
}

/*
 * GetMarketCapHistory Market Cap History
 * MarketCap History is the total market cap for all cryptoassets at intervals between the requested time period.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetMarketCapHistoryRequest
 */
func (a *MarketsApiService) GetMarketCapHistory(ctx _context.Context) ApiGetMarketCapHistoryRequest {
	return ApiGetMarketCapHistoryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []InlineResponse20014
 */
func (a *MarketsApiService) GetMarketCapHistoryExecute(r ApiGetMarketCapHistoryRequest) ([]InlineResponse20014, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse20014
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketsApiService.GetMarketCapHistory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/market-cap/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}

	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	if r.end != nil {
		localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	}
	if r.convert != nil {
		localVarQueryParams.Add("convert", parameterToString(*r.convert, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.includeTransparency != nil {
		localVarQueryParams.Add("include-transparency", parameterToString(*r.includeTransparency, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "test/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Key"]; ok {
				var key string
				key = apiKey.Key
				localVarQueryParams.Add("key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketsRequest struct {
	ctx        _context.Context
	ApiService *MarketsApiService
	exchange   *string
	base       *string
	quote      *string
	format     *string
}

// exchange  Nomics Exchange ID to filter by
func (r ApiGetMarketsRequest) Exchange(exchange string) ApiGetMarketsRequest {
	r.exchange = &exchange
	return r
}

// base  Comma separated list of base currencies to filter by
func (r ApiGetMarketsRequest) Base(base string) ApiGetMarketsRequest {
	r.base = &base
	return r
}

// quote  Comma separated list of quote currencies to filter by
func (r ApiGetMarketsRequest) Quote(quote string) ApiGetMarketsRequest {
	r.quote = &quote
	return r
}

// format  Format of the response. Defaults to JSON when blank.
func (r ApiGetMarketsRequest) Format(format string) ApiGetMarketsRequest {
	r.format = &format
	return r
}

func (r ApiGetMarketsRequest) Execute() ([]InlineResponse2009, *_nethttp.Response, error) {
	return r.ApiService.GetMarketsExecute(r)
}

/*
 * GetMarkets Markets
 * The markets endpoint returns information on the exchanges and markets that Nomics supports,
in addition to the Nomics currency identifiers for the base and quote currency.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetMarketsRequest
*/
func (a *MarketsApiService) GetMarkets(ctx _context.Context) ApiGetMarketsRequest {
	return ApiGetMarketsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []InlineResponse2009
 */
func (a *MarketsApiService) GetMarketsExecute(r ApiGetMarketsRequest) ([]InlineResponse2009, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse2009
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketsApiService.GetMarkets")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/markets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.exchange != nil {
		localVarQueryParams.Add("exchange", parameterToString(*r.exchange, ""))
	}
	if r.base != nil {
		localVarQueryParams.Add("base", parameterToString(*r.base, ""))
	}
	if r.quote != nil {
		localVarQueryParams.Add("quote", parameterToString(*r.quote, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Key"]; ok {
				var key string
				key = apiKey.Key
				localVarQueryParams.Add("key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
