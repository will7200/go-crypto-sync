/*
 * Nomics Cryptocurrency & Bitcoin API
 *
 * # Introduction  Welcome to the Nomics Cryptocurrency & Bitcoin API. To sign up for an API key please [go here](https://p.nomics.com/cryptocurrency-bitcoin-api/).  [nomics.com](https://nomics.com) is built entirely with the Nomics API. Everything we've done on [nomics.com](https://nomics.com) you can do with our API. There are no internal API endpoints.  If you need support, reach out to use at our [forums](https://forums.nomics.com/).  # General  ## API Server URL  The Nomics API runs at `https://api.nomics.com/v1`. All requests should be prefixed by the server URL.  ## JSON and CSV Support  By default, all endpoints serve data as JSON. However, by passing `format=csv` in the URL, some endpoints will return CSV data. This can be used in Google Sheets via the `IMPORTDATA` function.  CSV responses will not contain a header row, this is so that data can be easily concatenated from multiple requests. The fields will be rendered in the same order as the JSON fields. See the endpoint's documentation for an example.  Not all endpoints support CSV. Endpoints that support CSV will have the `format` parameter in the parameters section.  ## Errors  The Nomics API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.  ## Versioning  We follow Semantic Versioning. That means our API is versioned as Major.Minor.Patch. For example, Version 1.2.3 has major version 1, minor version 2, and patch version 3.  Major version changes indicate that we have altered the API significantly and it is no longer compatible with a previous version. Major versions are also used as the API URL prefix.  When we update the major version, we will not remove the previous version without notice to API customers and a deprecation period to allow everyone to smoothly update to the new version.  Minor version changes indicate that we have added new functionality without breaking any existing functionality. An API client is compatible with future minor versions. Note that a minor version update may add a new field to an existing API endpoint's response. Your API client must ignore fields it does not understand in order to be compatible with future minor versions.  Patch version changes indicate we fixed a bug or security vulnerability. Patch versions don't add new functionality.  ## Cross Origin Resource Sharing (CORS)  This API supports Cross Origin Resource Sharing, which allows you to make API requests directly from your user's browser.  To use CORS, you must provide Nomics with the domains on which your application will run so that we can whitelist them for CORS access.  Requests from `localhost`, `127.0.0.1`, and `0.0.0.0` will always succeed to aid in development.  ## Demo Application  A demo application using the Nomics API, CORS, and React is available on Glitch.com. This can help you get started using the Nomics API. Keep in mind it uses the demo key, which is rotated frequently. You should get your own API key before deploying an app to production. Check it out:  <div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\">   <iframe src=\"https://glitch.com/embed/#!/embed/nomics-api-demo?path=README.md\" alt=\"nomics-api-demo on glitch\" style=\"height: 100%; width: 100%; border: 0;\"></iframe> </div>  ## Demo Spreadsheet  Here is a demo of using the Nomics API with Google Sheets.  <iframe width=\"100%\" height=\"400px\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vShn2iWjvqQ0ueBa9l9g1UBYVM92OZSgZ4nmp0rWuykvHPrvyMyMeSN4r0Orj0ACEIIKdCz6cc5abCw/pubhtml?widget=true&amp;headers=false\"></iframe>  ### Formulas  * A2: `=IMPORTDATA(\"https://api.nomics.com/v1/prices?key=your-key-here&format=csv\")` * Column F: `=LOOKUP(D2,A:A,B:B)` finds D2 (BTC) in column A and pulls the price from column B * Column G: `=E2*F2` * Column H: `=G2/I$2` * Column I: `=SUM(G:G)`  # SDKs and Libraries  ## By Nomics - [Nomics JavaScript Client](https://github.com/nomics-crypto/nomics-javascript)  ## Community Submissions - [Nomics.com Swift SDK](https://forums.nomics.com/t/swift-sdk-supporting-ios-macos-tvos-and-watchos/) by Nick DiZazzo - [Nomics Node.js Library](https://forums.nomics.com/t/i-made-a-library-for-node-js/) by mikunimaru - [Nomics Python Wrapper](https://forums.nomics.com/t/python-package-for-nomics-api/119) by Taylor Facen - [Python Wrapper for Nomics](https://github.com/AviFelman/py-nomics) by Avi Felman  We love watching developers explore new use-cases with our API. Whether you're tinkering on a small side project or building an open-source resource, please share what you're up to in our [forums](https://forums.nomics.com/).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nomics

import (
	"encoding/json"
)

// Dashboard struct for Dashboard
type Dashboard struct {
	// Currency ID
	Currency *string `json:"currency,omitempty"`
	// Price one day ago
	DayOpen *string `json:"dayOpen,omitempty"`
	// Volume over the past day
	DayVolume *string `json:"dayVolume,omitempty"`
	// Volume over the previous day
	DayOpenVolume *string `json:"dayOpenVolume,omitempty"`
	// Price one week ago
	WeekOpen *string `json:"weekOpen,omitempty"`
	// Volume over the past week
	WeekVolume *string `json:"weekVolume,omitempty"`
	// Volume over the previous week
	WeekOpenVolume *string `json:"weekOpenVolume,omitempty"`
	// Price one month ago
	MonthOpen *string `json:"monthOpen,omitempty"`
	// Volume over the past 30 days
	MonthVolume *string `json:"monthVolume,omitempty"`
	// Volume over the previous 30 days
	MonthOpenVolume *string `json:"monthOpenVolume,omitempty"`
	// Price one year ago
	YearOpen *string `json:"yearOpen,omitempty"`
	// Volume over the past year
	YearVolume *string `json:"yearVolume,omitempty"`
	// Volume over the previous year
	YearOpenVolume *string `json:"yearOpenVolume,omitempty"`
	// Current price
	Close *string `json:"close,omitempty"`
	// Highest price
	High *string `json:"high,omitempty"`
	// Timestamp of the highest price in RFC3339
	HighTimestamp *string `json:"highTimestamp,omitempty"`
	// Exchange on which the highest price occurred
	HighExchange *string `json:"highExchange,omitempty"`
	// Quote currency against which highest price was recorded
	HighQuoteCurrency *string `json:"highQuoteCurrency,omitempty"`
	// Circulating supply
	AvailableSupply *string `json:"availableSupply,omitempty"`
	// Maximum supply
	MaxSupply *string `json:"maxSupply,omitempty"`
}

// NewDashboard instantiates a new Dashboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboard() *Dashboard {
	this := Dashboard{}
	return &this
}

// NewDashboardWithDefaults instantiates a new Dashboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardWithDefaults() *Dashboard {
	this := Dashboard{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Dashboard) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Dashboard) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Dashboard) SetCurrency(v string) {
	o.Currency = &v
}

// GetDayOpen returns the DayOpen field value if set, zero value otherwise.
func (o *Dashboard) GetDayOpen() string {
	if o == nil || o.DayOpen == nil {
		var ret string
		return ret
	}
	return *o.DayOpen
}

// GetDayOpenOk returns a tuple with the DayOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetDayOpenOk() (*string, bool) {
	if o == nil || o.DayOpen == nil {
		return nil, false
	}
	return o.DayOpen, true
}

// HasDayOpen returns a boolean if a field has been set.
func (o *Dashboard) HasDayOpen() bool {
	if o != nil && o.DayOpen != nil {
		return true
	}

	return false
}

// SetDayOpen gets a reference to the given string and assigns it to the DayOpen field.
func (o *Dashboard) SetDayOpen(v string) {
	o.DayOpen = &v
}

// GetDayVolume returns the DayVolume field value if set, zero value otherwise.
func (o *Dashboard) GetDayVolume() string {
	if o == nil || o.DayVolume == nil {
		var ret string
		return ret
	}
	return *o.DayVolume
}

// GetDayVolumeOk returns a tuple with the DayVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetDayVolumeOk() (*string, bool) {
	if o == nil || o.DayVolume == nil {
		return nil, false
	}
	return o.DayVolume, true
}

// HasDayVolume returns a boolean if a field has been set.
func (o *Dashboard) HasDayVolume() bool {
	if o != nil && o.DayVolume != nil {
		return true
	}

	return false
}

// SetDayVolume gets a reference to the given string and assigns it to the DayVolume field.
func (o *Dashboard) SetDayVolume(v string) {
	o.DayVolume = &v
}

// GetDayOpenVolume returns the DayOpenVolume field value if set, zero value otherwise.
func (o *Dashboard) GetDayOpenVolume() string {
	if o == nil || o.DayOpenVolume == nil {
		var ret string
		return ret
	}
	return *o.DayOpenVolume
}

// GetDayOpenVolumeOk returns a tuple with the DayOpenVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetDayOpenVolumeOk() (*string, bool) {
	if o == nil || o.DayOpenVolume == nil {
		return nil, false
	}
	return o.DayOpenVolume, true
}

// HasDayOpenVolume returns a boolean if a field has been set.
func (o *Dashboard) HasDayOpenVolume() bool {
	if o != nil && o.DayOpenVolume != nil {
		return true
	}

	return false
}

// SetDayOpenVolume gets a reference to the given string and assigns it to the DayOpenVolume field.
func (o *Dashboard) SetDayOpenVolume(v string) {
	o.DayOpenVolume = &v
}

// GetWeekOpen returns the WeekOpen field value if set, zero value otherwise.
func (o *Dashboard) GetWeekOpen() string {
	if o == nil || o.WeekOpen == nil {
		var ret string
		return ret
	}
	return *o.WeekOpen
}

// GetWeekOpenOk returns a tuple with the WeekOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetWeekOpenOk() (*string, bool) {
	if o == nil || o.WeekOpen == nil {
		return nil, false
	}
	return o.WeekOpen, true
}

// HasWeekOpen returns a boolean if a field has been set.
func (o *Dashboard) HasWeekOpen() bool {
	if o != nil && o.WeekOpen != nil {
		return true
	}

	return false
}

// SetWeekOpen gets a reference to the given string and assigns it to the WeekOpen field.
func (o *Dashboard) SetWeekOpen(v string) {
	o.WeekOpen = &v
}

// GetWeekVolume returns the WeekVolume field value if set, zero value otherwise.
func (o *Dashboard) GetWeekVolume() string {
	if o == nil || o.WeekVolume == nil {
		var ret string
		return ret
	}
	return *o.WeekVolume
}

// GetWeekVolumeOk returns a tuple with the WeekVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetWeekVolumeOk() (*string, bool) {
	if o == nil || o.WeekVolume == nil {
		return nil, false
	}
	return o.WeekVolume, true
}

// HasWeekVolume returns a boolean if a field has been set.
func (o *Dashboard) HasWeekVolume() bool {
	if o != nil && o.WeekVolume != nil {
		return true
	}

	return false
}

// SetWeekVolume gets a reference to the given string and assigns it to the WeekVolume field.
func (o *Dashboard) SetWeekVolume(v string) {
	o.WeekVolume = &v
}

// GetWeekOpenVolume returns the WeekOpenVolume field value if set, zero value otherwise.
func (o *Dashboard) GetWeekOpenVolume() string {
	if o == nil || o.WeekOpenVolume == nil {
		var ret string
		return ret
	}
	return *o.WeekOpenVolume
}

// GetWeekOpenVolumeOk returns a tuple with the WeekOpenVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetWeekOpenVolumeOk() (*string, bool) {
	if o == nil || o.WeekOpenVolume == nil {
		return nil, false
	}
	return o.WeekOpenVolume, true
}

// HasWeekOpenVolume returns a boolean if a field has been set.
func (o *Dashboard) HasWeekOpenVolume() bool {
	if o != nil && o.WeekOpenVolume != nil {
		return true
	}

	return false
}

// SetWeekOpenVolume gets a reference to the given string and assigns it to the WeekOpenVolume field.
func (o *Dashboard) SetWeekOpenVolume(v string) {
	o.WeekOpenVolume = &v
}

// GetMonthOpen returns the MonthOpen field value if set, zero value otherwise.
func (o *Dashboard) GetMonthOpen() string {
	if o == nil || o.MonthOpen == nil {
		var ret string
		return ret
	}
	return *o.MonthOpen
}

// GetMonthOpenOk returns a tuple with the MonthOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetMonthOpenOk() (*string, bool) {
	if o == nil || o.MonthOpen == nil {
		return nil, false
	}
	return o.MonthOpen, true
}

// HasMonthOpen returns a boolean if a field has been set.
func (o *Dashboard) HasMonthOpen() bool {
	if o != nil && o.MonthOpen != nil {
		return true
	}

	return false
}

// SetMonthOpen gets a reference to the given string and assigns it to the MonthOpen field.
func (o *Dashboard) SetMonthOpen(v string) {
	o.MonthOpen = &v
}

// GetMonthVolume returns the MonthVolume field value if set, zero value otherwise.
func (o *Dashboard) GetMonthVolume() string {
	if o == nil || o.MonthVolume == nil {
		var ret string
		return ret
	}
	return *o.MonthVolume
}

// GetMonthVolumeOk returns a tuple with the MonthVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetMonthVolumeOk() (*string, bool) {
	if o == nil || o.MonthVolume == nil {
		return nil, false
	}
	return o.MonthVolume, true
}

// HasMonthVolume returns a boolean if a field has been set.
func (o *Dashboard) HasMonthVolume() bool {
	if o != nil && o.MonthVolume != nil {
		return true
	}

	return false
}

// SetMonthVolume gets a reference to the given string and assigns it to the MonthVolume field.
func (o *Dashboard) SetMonthVolume(v string) {
	o.MonthVolume = &v
}

// GetMonthOpenVolume returns the MonthOpenVolume field value if set, zero value otherwise.
func (o *Dashboard) GetMonthOpenVolume() string {
	if o == nil || o.MonthOpenVolume == nil {
		var ret string
		return ret
	}
	return *o.MonthOpenVolume
}

// GetMonthOpenVolumeOk returns a tuple with the MonthOpenVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetMonthOpenVolumeOk() (*string, bool) {
	if o == nil || o.MonthOpenVolume == nil {
		return nil, false
	}
	return o.MonthOpenVolume, true
}

// HasMonthOpenVolume returns a boolean if a field has been set.
func (o *Dashboard) HasMonthOpenVolume() bool {
	if o != nil && o.MonthOpenVolume != nil {
		return true
	}

	return false
}

// SetMonthOpenVolume gets a reference to the given string and assigns it to the MonthOpenVolume field.
func (o *Dashboard) SetMonthOpenVolume(v string) {
	o.MonthOpenVolume = &v
}

// GetYearOpen returns the YearOpen field value if set, zero value otherwise.
func (o *Dashboard) GetYearOpen() string {
	if o == nil || o.YearOpen == nil {
		var ret string
		return ret
	}
	return *o.YearOpen
}

// GetYearOpenOk returns a tuple with the YearOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetYearOpenOk() (*string, bool) {
	if o == nil || o.YearOpen == nil {
		return nil, false
	}
	return o.YearOpen, true
}

// HasYearOpen returns a boolean if a field has been set.
func (o *Dashboard) HasYearOpen() bool {
	if o != nil && o.YearOpen != nil {
		return true
	}

	return false
}

// SetYearOpen gets a reference to the given string and assigns it to the YearOpen field.
func (o *Dashboard) SetYearOpen(v string) {
	o.YearOpen = &v
}

// GetYearVolume returns the YearVolume field value if set, zero value otherwise.
func (o *Dashboard) GetYearVolume() string {
	if o == nil || o.YearVolume == nil {
		var ret string
		return ret
	}
	return *o.YearVolume
}

// GetYearVolumeOk returns a tuple with the YearVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetYearVolumeOk() (*string, bool) {
	if o == nil || o.YearVolume == nil {
		return nil, false
	}
	return o.YearVolume, true
}

// HasYearVolume returns a boolean if a field has been set.
func (o *Dashboard) HasYearVolume() bool {
	if o != nil && o.YearVolume != nil {
		return true
	}

	return false
}

// SetYearVolume gets a reference to the given string and assigns it to the YearVolume field.
func (o *Dashboard) SetYearVolume(v string) {
	o.YearVolume = &v
}

// GetYearOpenVolume returns the YearOpenVolume field value if set, zero value otherwise.
func (o *Dashboard) GetYearOpenVolume() string {
	if o == nil || o.YearOpenVolume == nil {
		var ret string
		return ret
	}
	return *o.YearOpenVolume
}

// GetYearOpenVolumeOk returns a tuple with the YearOpenVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetYearOpenVolumeOk() (*string, bool) {
	if o == nil || o.YearOpenVolume == nil {
		return nil, false
	}
	return o.YearOpenVolume, true
}

// HasYearOpenVolume returns a boolean if a field has been set.
func (o *Dashboard) HasYearOpenVolume() bool {
	if o != nil && o.YearOpenVolume != nil {
		return true
	}

	return false
}

// SetYearOpenVolume gets a reference to the given string and assigns it to the YearOpenVolume field.
func (o *Dashboard) SetYearOpenVolume(v string) {
	o.YearOpenVolume = &v
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *Dashboard) GetClose() string {
	if o == nil || o.Close == nil {
		var ret string
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetCloseOk() (*string, bool) {
	if o == nil || o.Close == nil {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *Dashboard) HasClose() bool {
	if o != nil && o.Close != nil {
		return true
	}

	return false
}

// SetClose gets a reference to the given string and assigns it to the Close field.
func (o *Dashboard) SetClose(v string) {
	o.Close = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *Dashboard) GetHigh() string {
	if o == nil || o.High == nil {
		var ret string
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetHighOk() (*string, bool) {
	if o == nil || o.High == nil {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *Dashboard) HasHigh() bool {
	if o != nil && o.High != nil {
		return true
	}

	return false
}

// SetHigh gets a reference to the given string and assigns it to the High field.
func (o *Dashboard) SetHigh(v string) {
	o.High = &v
}

// GetHighTimestamp returns the HighTimestamp field value if set, zero value otherwise.
func (o *Dashboard) GetHighTimestamp() string {
	if o == nil || o.HighTimestamp == nil {
		var ret string
		return ret
	}
	return *o.HighTimestamp
}

// GetHighTimestampOk returns a tuple with the HighTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetHighTimestampOk() (*string, bool) {
	if o == nil || o.HighTimestamp == nil {
		return nil, false
	}
	return o.HighTimestamp, true
}

// HasHighTimestamp returns a boolean if a field has been set.
func (o *Dashboard) HasHighTimestamp() bool {
	if o != nil && o.HighTimestamp != nil {
		return true
	}

	return false
}

// SetHighTimestamp gets a reference to the given string and assigns it to the HighTimestamp field.
func (o *Dashboard) SetHighTimestamp(v string) {
	o.HighTimestamp = &v
}

// GetHighExchange returns the HighExchange field value if set, zero value otherwise.
func (o *Dashboard) GetHighExchange() string {
	if o == nil || o.HighExchange == nil {
		var ret string
		return ret
	}
	return *o.HighExchange
}

// GetHighExchangeOk returns a tuple with the HighExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetHighExchangeOk() (*string, bool) {
	if o == nil || o.HighExchange == nil {
		return nil, false
	}
	return o.HighExchange, true
}

// HasHighExchange returns a boolean if a field has been set.
func (o *Dashboard) HasHighExchange() bool {
	if o != nil && o.HighExchange != nil {
		return true
	}

	return false
}

// SetHighExchange gets a reference to the given string and assigns it to the HighExchange field.
func (o *Dashboard) SetHighExchange(v string) {
	o.HighExchange = &v
}

// GetHighQuoteCurrency returns the HighQuoteCurrency field value if set, zero value otherwise.
func (o *Dashboard) GetHighQuoteCurrency() string {
	if o == nil || o.HighQuoteCurrency == nil {
		var ret string
		return ret
	}
	return *o.HighQuoteCurrency
}

// GetHighQuoteCurrencyOk returns a tuple with the HighQuoteCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetHighQuoteCurrencyOk() (*string, bool) {
	if o == nil || o.HighQuoteCurrency == nil {
		return nil, false
	}
	return o.HighQuoteCurrency, true
}

// HasHighQuoteCurrency returns a boolean if a field has been set.
func (o *Dashboard) HasHighQuoteCurrency() bool {
	if o != nil && o.HighQuoteCurrency != nil {
		return true
	}

	return false
}

// SetHighQuoteCurrency gets a reference to the given string and assigns it to the HighQuoteCurrency field.
func (o *Dashboard) SetHighQuoteCurrency(v string) {
	o.HighQuoteCurrency = &v
}

// GetAvailableSupply returns the AvailableSupply field value if set, zero value otherwise.
func (o *Dashboard) GetAvailableSupply() string {
	if o == nil || o.AvailableSupply == nil {
		var ret string
		return ret
	}
	return *o.AvailableSupply
}

// GetAvailableSupplyOk returns a tuple with the AvailableSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetAvailableSupplyOk() (*string, bool) {
	if o == nil || o.AvailableSupply == nil {
		return nil, false
	}
	return o.AvailableSupply, true
}

// HasAvailableSupply returns a boolean if a field has been set.
func (o *Dashboard) HasAvailableSupply() bool {
	if o != nil && o.AvailableSupply != nil {
		return true
	}

	return false
}

// SetAvailableSupply gets a reference to the given string and assigns it to the AvailableSupply field.
func (o *Dashboard) SetAvailableSupply(v string) {
	o.AvailableSupply = &v
}

// GetMaxSupply returns the MaxSupply field value if set, zero value otherwise.
func (o *Dashboard) GetMaxSupply() string {
	if o == nil || o.MaxSupply == nil {
		var ret string
		return ret
	}
	return *o.MaxSupply
}

// GetMaxSupplyOk returns a tuple with the MaxSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetMaxSupplyOk() (*string, bool) {
	if o == nil || o.MaxSupply == nil {
		return nil, false
	}
	return o.MaxSupply, true
}

// HasMaxSupply returns a boolean if a field has been set.
func (o *Dashboard) HasMaxSupply() bool {
	if o != nil && o.MaxSupply != nil {
		return true
	}

	return false
}

// SetMaxSupply gets a reference to the given string and assigns it to the MaxSupply field.
func (o *Dashboard) SetMaxSupply(v string) {
	o.MaxSupply = &v
}

func (o Dashboard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.DayOpen != nil {
		toSerialize["dayOpen"] = o.DayOpen
	}
	if o.DayVolume != nil {
		toSerialize["dayVolume"] = o.DayVolume
	}
	if o.DayOpenVolume != nil {
		toSerialize["dayOpenVolume"] = o.DayOpenVolume
	}
	if o.WeekOpen != nil {
		toSerialize["weekOpen"] = o.WeekOpen
	}
	if o.WeekVolume != nil {
		toSerialize["weekVolume"] = o.WeekVolume
	}
	if o.WeekOpenVolume != nil {
		toSerialize["weekOpenVolume"] = o.WeekOpenVolume
	}
	if o.MonthOpen != nil {
		toSerialize["monthOpen"] = o.MonthOpen
	}
	if o.MonthVolume != nil {
		toSerialize["monthVolume"] = o.MonthVolume
	}
	if o.MonthOpenVolume != nil {
		toSerialize["monthOpenVolume"] = o.MonthOpenVolume
	}
	if o.YearOpen != nil {
		toSerialize["yearOpen"] = o.YearOpen
	}
	if o.YearVolume != nil {
		toSerialize["yearVolume"] = o.YearVolume
	}
	if o.YearOpenVolume != nil {
		toSerialize["yearOpenVolume"] = o.YearOpenVolume
	}
	if o.Close != nil {
		toSerialize["close"] = o.Close
	}
	if o.High != nil {
		toSerialize["high"] = o.High
	}
	if o.HighTimestamp != nil {
		toSerialize["highTimestamp"] = o.HighTimestamp
	}
	if o.HighExchange != nil {
		toSerialize["highExchange"] = o.HighExchange
	}
	if o.HighQuoteCurrency != nil {
		toSerialize["highQuoteCurrency"] = o.HighQuoteCurrency
	}
	if o.AvailableSupply != nil {
		toSerialize["availableSupply"] = o.AvailableSupply
	}
	if o.MaxSupply != nil {
		toSerialize["maxSupply"] = o.MaxSupply
	}
	return json.Marshal(toSerialize)
}

type NullableDashboard struct {
	value *Dashboard
	isSet bool
}

func (v NullableDashboard) Get() *Dashboard {
	return v.value
}

func (v *NullableDashboard) Set(val *Dashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboard(val *Dashboard) *NullableDashboard {
	return &NullableDashboard{value: val, isSet: true}
}

func (v NullableDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
