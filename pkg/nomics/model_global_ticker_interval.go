/*
 * Nomics Cryptocurrency & Bitcoin API
 *
 * # Introduction  Welcome to the Nomics Cryptocurrency & Bitcoin API. To sign up for an API key please [go here](https://p.nomics.com/cryptocurrency-bitcoin-api/).  [nomics.com](https://nomics.com) is built entirely with the Nomics API. Everything we've done on [nomics.com](https://nomics.com) you can do with our API. There are no internal API endpoints.  If you need support, reach out to use at our [forums](https://forums.nomics.com/).  # General  ## API Server URL  The Nomics API runs at `https://api.nomics.com/v1`. All requests should be prefixed by the server URL.  ## JSON and CSV Support  By default, all endpoints serve data as JSON. However, by passing `format=csv` in the URL, some endpoints will return CSV data. This can be used in Google Sheets via the `IMPORTDATA` function.  CSV responses will not contain a header row, this is so that data can be easily concatenated from multiple requests. The fields will be rendered in the same order as the JSON fields. See the endpoint's documentation for an example.  Not all endpoints support CSV. Endpoints that support CSV will have the `format` parameter in the parameters section.  ## Errors  The Nomics API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.  ## Versioning  We follow Semantic Versioning. That means our API is versioned as Major.Minor.Patch. For example, Version 1.2.3 has major version 1, minor version 2, and patch version 3.  Major version changes indicate that we have altered the API significantly and it is no longer compatible with a previous version. Major versions are also used as the API URL prefix.  When we update the major version, we will not remove the previous version without notice to API customers and a deprecation period to allow everyone to smoothly update to the new version.  Minor version changes indicate that we have added new functionality without breaking any existing functionality. An API client is compatible with future minor versions. Note that a minor version update may add a new field to an existing API endpoint's response. Your API client must ignore fields it does not understand in order to be compatible with future minor versions.  Patch version changes indicate we fixed a bug or security vulnerability. Patch versions don't add new functionality.  ## Cross Origin Resource Sharing (CORS)  This API supports Cross Origin Resource Sharing, which allows you to make API requests directly from your user's browser.  To use CORS, you must provide Nomics with the domains on which your application will run so that we can whitelist them for CORS access.  Requests from `localhost`, `127.0.0.1`, and `0.0.0.0` will always succeed to aid in development.  ## Demo Application  A demo application using the Nomics API, CORS, and React is available on Glitch.com. This can help you get started using the Nomics API. Keep in mind it uses the demo key, which is rotated frequently. You should get your own API key before deploying an app to production. Check it out:  <div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\">   <iframe src=\"https://glitch.com/embed/#!/embed/nomics-api-demo?path=README.md\" alt=\"nomics-api-demo on glitch\" style=\"height: 100%; width: 100%; border: 0;\"></iframe> </div>  ## Demo Spreadsheet  Here is a demo of using the Nomics API with Google Sheets.  <iframe width=\"100%\" height=\"400px\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vShn2iWjvqQ0ueBa9l9g1UBYVM92OZSgZ4nmp0rWuykvHPrvyMyMeSN4r0Orj0ACEIIKdCz6cc5abCw/pubhtml?widget=true&amp;headers=false\"></iframe>  ### Formulas  * A2: `=IMPORTDATA(\"https://api.nomics.com/v1/prices?key=your-key-here&format=csv\")` * Column F: `=LOOKUP(D2,A:A,B:B)` finds D2 (BTC) in column A and pulls the price from column B * Column G: `=E2*F2` * Column H: `=G2/I$2` * Column I: `=SUM(G:G)`  # SDKs and Libraries  ## By Nomics - [Nomics JavaScript Client](https://github.com/nomics-crypto/nomics-javascript)  ## Community Submissions - [Nomics.com Swift SDK](https://forums.nomics.com/t/swift-sdk-supporting-ios-macos-tvos-and-watchos/) by Nick DiZazzo - [Nomics Node.js Library](https://forums.nomics.com/t/i-made-a-library-for-node-js/) by mikunimaru - [Nomics Python Wrapper](https://forums.nomics.com/t/python-package-for-nomics-api/119) by Taylor Facen - [Python Wrapper for Nomics](https://github.com/AviFelman/py-nomics) by Avi Felman  We love watching developers explore new use-cases with our API. Whether you're tinkering on a small side project or building an open-source resource, please share what you're up to in our [forums](https://forums.nomics.com/).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nomics

import (
	"encoding/json"
)

// GlobalTickerInterval struct for GlobalTickerInterval
type GlobalTickerInterval struct {
	// Amount of market cap change for the given interval
	MarketCapChange *string `json:"market_cap_change,omitempty"`
	// Percent change of market cap for the given interval
	MarketCapChangePct *string `json:"market_cap_change_pct,omitempty"`
	// Amount of transparent market cap change for the given interval
	TransparentMarketCapChange *string `json:"transparent_market_cap_change,omitempty"`
	// Percent change of transparent market cap for the given interval
	TransparentMarketCapChangePct *string `json:"transparent_market_cap_change_pct,omitempty"`
	// Total volume (spot + derivative volume) for the given interval
	Volume *string `json:"volume,omitempty"`
	// Amount of volume change for the given interval
	VolumeChange *string `json:"volume_change,omitempty"`
	// Percent change of volume for the given interval
	VolumeChangePct *string `json:"volume_change_pct,omitempty"`
	// Total spot market volume for the given interval
	SpotVolume *string `json:"spot_volume,omitempty"`
	// Amount of spot volume change for the given interval
	SpotVolumeChange *string `json:"spot_volume_change,omitempty"`
	// Percent change of spot volume for the given interval
	SpotVolumeChangePct *string `json:"spot_volume_change_pct,omitempty"`
	// Total derivative market volume for the given interval
	DerivativeVolume *string `json:"derivative_volume,omitempty"`
	// Amount of derivative volume change for the given interval
	DerivativeVolumeChange *string `json:"derivative_volume_change,omitempty"`
	// Percent change of derivative volume for the given interval
	DerivativeVolumeChangePct *string `json:"derivative_volume_change_pct,omitempty"`
	// Total transparent volume for the given interval
	TransparentVolume *string `json:"transparent_volume,omitempty"`
	// Amount of transparent volume change for the given interval
	TransparentVolumeChange *string `json:"transparent_volume_change,omitempty"`
	// Percent change of transparent volume for the given interval
	TransparentVolumeChangePct *string `json:"transparent_volume_change_pct,omitempty"`
	// Total transparent spot market volume for the given interval
	TransparentSpotVolume *string `json:"transparent_spot_volume,omitempty"`
	// Amount of transparent spot market volume change for the given interval
	TransparentSpotVolumeChange *string `json:"transparent_spot_volume_change,omitempty"`
	// Percent change of transparent spot market volume for the given interval
	TransparentSpotVolumeChangePct *string `json:"transparent_spot_volume_change_pct,omitempty"`
	// Total transparent derivative market volume for the given interval
	TransparentDerivativeVolume *string `json:"transparent_derivative_volume,omitempty"`
	// Amount of transparent derivative market volume change for the given interval
	TransparentDerivativeVolumeChange *string `json:"transparent_derivative_volume_change,omitempty"`
	// Percent change of transparent derivative market volume for the given interval
	TransparentDerivativeVolumeChangePct *string `json:"transparent_derivative_volume_change_pct,omitempty"`
	// An array of `volume`, `volume_change` and `volume_change_pct` by exchange grade for the given interval
	VolumeTransparency *[]map[string]interface{} `json:"volume_transparency,omitempty"`
}

// NewGlobalTickerInterval instantiates a new GlobalTickerInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalTickerInterval() *GlobalTickerInterval {
	this := GlobalTickerInterval{}
	return &this
}

// NewGlobalTickerIntervalWithDefaults instantiates a new GlobalTickerInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalTickerIntervalWithDefaults() *GlobalTickerInterval {
	this := GlobalTickerInterval{}
	return &this
}

// GetMarketCapChange returns the MarketCapChange field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetMarketCapChange() string {
	if o == nil || o.MarketCapChange == nil {
		var ret string
		return ret
	}
	return *o.MarketCapChange
}

// GetMarketCapChangeOk returns a tuple with the MarketCapChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetMarketCapChangeOk() (*string, bool) {
	if o == nil || o.MarketCapChange == nil {
		return nil, false
	}
	return o.MarketCapChange, true
}

// HasMarketCapChange returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasMarketCapChange() bool {
	if o != nil && o.MarketCapChange != nil {
		return true
	}

	return false
}

// SetMarketCapChange gets a reference to the given string and assigns it to the MarketCapChange field.
func (o *GlobalTickerInterval) SetMarketCapChange(v string) {
	o.MarketCapChange = &v
}

// GetMarketCapChangePct returns the MarketCapChangePct field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetMarketCapChangePct() string {
	if o == nil || o.MarketCapChangePct == nil {
		var ret string
		return ret
	}
	return *o.MarketCapChangePct
}

// GetMarketCapChangePctOk returns a tuple with the MarketCapChangePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetMarketCapChangePctOk() (*string, bool) {
	if o == nil || o.MarketCapChangePct == nil {
		return nil, false
	}
	return o.MarketCapChangePct, true
}

// HasMarketCapChangePct returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasMarketCapChangePct() bool {
	if o != nil && o.MarketCapChangePct != nil {
		return true
	}

	return false
}

// SetMarketCapChangePct gets a reference to the given string and assigns it to the MarketCapChangePct field.
func (o *GlobalTickerInterval) SetMarketCapChangePct(v string) {
	o.MarketCapChangePct = &v
}

// GetTransparentMarketCapChange returns the TransparentMarketCapChange field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentMarketCapChange() string {
	if o == nil || o.TransparentMarketCapChange == nil {
		var ret string
		return ret
	}
	return *o.TransparentMarketCapChange
}

// GetTransparentMarketCapChangeOk returns a tuple with the TransparentMarketCapChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentMarketCapChangeOk() (*string, bool) {
	if o == nil || o.TransparentMarketCapChange == nil {
		return nil, false
	}
	return o.TransparentMarketCapChange, true
}

// HasTransparentMarketCapChange returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentMarketCapChange() bool {
	if o != nil && o.TransparentMarketCapChange != nil {
		return true
	}

	return false
}

// SetTransparentMarketCapChange gets a reference to the given string and assigns it to the TransparentMarketCapChange field.
func (o *GlobalTickerInterval) SetTransparentMarketCapChange(v string) {
	o.TransparentMarketCapChange = &v
}

// GetTransparentMarketCapChangePct returns the TransparentMarketCapChangePct field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentMarketCapChangePct() string {
	if o == nil || o.TransparentMarketCapChangePct == nil {
		var ret string
		return ret
	}
	return *o.TransparentMarketCapChangePct
}

// GetTransparentMarketCapChangePctOk returns a tuple with the TransparentMarketCapChangePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentMarketCapChangePctOk() (*string, bool) {
	if o == nil || o.TransparentMarketCapChangePct == nil {
		return nil, false
	}
	return o.TransparentMarketCapChangePct, true
}

// HasTransparentMarketCapChangePct returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentMarketCapChangePct() bool {
	if o != nil && o.TransparentMarketCapChangePct != nil {
		return true
	}

	return false
}

// SetTransparentMarketCapChangePct gets a reference to the given string and assigns it to the TransparentMarketCapChangePct field.
func (o *GlobalTickerInterval) SetTransparentMarketCapChangePct(v string) {
	o.TransparentMarketCapChangePct = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetVolume() string {
	if o == nil || o.Volume == nil {
		var ret string
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetVolumeOk() (*string, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given string and assigns it to the Volume field.
func (o *GlobalTickerInterval) SetVolume(v string) {
	o.Volume = &v
}

// GetVolumeChange returns the VolumeChange field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetVolumeChange() string {
	if o == nil || o.VolumeChange == nil {
		var ret string
		return ret
	}
	return *o.VolumeChange
}

// GetVolumeChangeOk returns a tuple with the VolumeChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetVolumeChangeOk() (*string, bool) {
	if o == nil || o.VolumeChange == nil {
		return nil, false
	}
	return o.VolumeChange, true
}

// HasVolumeChange returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasVolumeChange() bool {
	if o != nil && o.VolumeChange != nil {
		return true
	}

	return false
}

// SetVolumeChange gets a reference to the given string and assigns it to the VolumeChange field.
func (o *GlobalTickerInterval) SetVolumeChange(v string) {
	o.VolumeChange = &v
}

// GetVolumeChangePct returns the VolumeChangePct field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetVolumeChangePct() string {
	if o == nil || o.VolumeChangePct == nil {
		var ret string
		return ret
	}
	return *o.VolumeChangePct
}

// GetVolumeChangePctOk returns a tuple with the VolumeChangePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetVolumeChangePctOk() (*string, bool) {
	if o == nil || o.VolumeChangePct == nil {
		return nil, false
	}
	return o.VolumeChangePct, true
}

// HasVolumeChangePct returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasVolumeChangePct() bool {
	if o != nil && o.VolumeChangePct != nil {
		return true
	}

	return false
}

// SetVolumeChangePct gets a reference to the given string and assigns it to the VolumeChangePct field.
func (o *GlobalTickerInterval) SetVolumeChangePct(v string) {
	o.VolumeChangePct = &v
}

// GetSpotVolume returns the SpotVolume field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetSpotVolume() string {
	if o == nil || o.SpotVolume == nil {
		var ret string
		return ret
	}
	return *o.SpotVolume
}

// GetSpotVolumeOk returns a tuple with the SpotVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetSpotVolumeOk() (*string, bool) {
	if o == nil || o.SpotVolume == nil {
		return nil, false
	}
	return o.SpotVolume, true
}

// HasSpotVolume returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasSpotVolume() bool {
	if o != nil && o.SpotVolume != nil {
		return true
	}

	return false
}

// SetSpotVolume gets a reference to the given string and assigns it to the SpotVolume field.
func (o *GlobalTickerInterval) SetSpotVolume(v string) {
	o.SpotVolume = &v
}

// GetSpotVolumeChange returns the SpotVolumeChange field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetSpotVolumeChange() string {
	if o == nil || o.SpotVolumeChange == nil {
		var ret string
		return ret
	}
	return *o.SpotVolumeChange
}

// GetSpotVolumeChangeOk returns a tuple with the SpotVolumeChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetSpotVolumeChangeOk() (*string, bool) {
	if o == nil || o.SpotVolumeChange == nil {
		return nil, false
	}
	return o.SpotVolumeChange, true
}

// HasSpotVolumeChange returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasSpotVolumeChange() bool {
	if o != nil && o.SpotVolumeChange != nil {
		return true
	}

	return false
}

// SetSpotVolumeChange gets a reference to the given string and assigns it to the SpotVolumeChange field.
func (o *GlobalTickerInterval) SetSpotVolumeChange(v string) {
	o.SpotVolumeChange = &v
}

// GetSpotVolumeChangePct returns the SpotVolumeChangePct field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetSpotVolumeChangePct() string {
	if o == nil || o.SpotVolumeChangePct == nil {
		var ret string
		return ret
	}
	return *o.SpotVolumeChangePct
}

// GetSpotVolumeChangePctOk returns a tuple with the SpotVolumeChangePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetSpotVolumeChangePctOk() (*string, bool) {
	if o == nil || o.SpotVolumeChangePct == nil {
		return nil, false
	}
	return o.SpotVolumeChangePct, true
}

// HasSpotVolumeChangePct returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasSpotVolumeChangePct() bool {
	if o != nil && o.SpotVolumeChangePct != nil {
		return true
	}

	return false
}

// SetSpotVolumeChangePct gets a reference to the given string and assigns it to the SpotVolumeChangePct field.
func (o *GlobalTickerInterval) SetSpotVolumeChangePct(v string) {
	o.SpotVolumeChangePct = &v
}

// GetDerivativeVolume returns the DerivativeVolume field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetDerivativeVolume() string {
	if o == nil || o.DerivativeVolume == nil {
		var ret string
		return ret
	}
	return *o.DerivativeVolume
}

// GetDerivativeVolumeOk returns a tuple with the DerivativeVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetDerivativeVolumeOk() (*string, bool) {
	if o == nil || o.DerivativeVolume == nil {
		return nil, false
	}
	return o.DerivativeVolume, true
}

// HasDerivativeVolume returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasDerivativeVolume() bool {
	if o != nil && o.DerivativeVolume != nil {
		return true
	}

	return false
}

// SetDerivativeVolume gets a reference to the given string and assigns it to the DerivativeVolume field.
func (o *GlobalTickerInterval) SetDerivativeVolume(v string) {
	o.DerivativeVolume = &v
}

// GetDerivativeVolumeChange returns the DerivativeVolumeChange field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetDerivativeVolumeChange() string {
	if o == nil || o.DerivativeVolumeChange == nil {
		var ret string
		return ret
	}
	return *o.DerivativeVolumeChange
}

// GetDerivativeVolumeChangeOk returns a tuple with the DerivativeVolumeChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetDerivativeVolumeChangeOk() (*string, bool) {
	if o == nil || o.DerivativeVolumeChange == nil {
		return nil, false
	}
	return o.DerivativeVolumeChange, true
}

// HasDerivativeVolumeChange returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasDerivativeVolumeChange() bool {
	if o != nil && o.DerivativeVolumeChange != nil {
		return true
	}

	return false
}

// SetDerivativeVolumeChange gets a reference to the given string and assigns it to the DerivativeVolumeChange field.
func (o *GlobalTickerInterval) SetDerivativeVolumeChange(v string) {
	o.DerivativeVolumeChange = &v
}

// GetDerivativeVolumeChangePct returns the DerivativeVolumeChangePct field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetDerivativeVolumeChangePct() string {
	if o == nil || o.DerivativeVolumeChangePct == nil {
		var ret string
		return ret
	}
	return *o.DerivativeVolumeChangePct
}

// GetDerivativeVolumeChangePctOk returns a tuple with the DerivativeVolumeChangePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetDerivativeVolumeChangePctOk() (*string, bool) {
	if o == nil || o.DerivativeVolumeChangePct == nil {
		return nil, false
	}
	return o.DerivativeVolumeChangePct, true
}

// HasDerivativeVolumeChangePct returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasDerivativeVolumeChangePct() bool {
	if o != nil && o.DerivativeVolumeChangePct != nil {
		return true
	}

	return false
}

// SetDerivativeVolumeChangePct gets a reference to the given string and assigns it to the DerivativeVolumeChangePct field.
func (o *GlobalTickerInterval) SetDerivativeVolumeChangePct(v string) {
	o.DerivativeVolumeChangePct = &v
}

// GetTransparentVolume returns the TransparentVolume field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentVolume() string {
	if o == nil || o.TransparentVolume == nil {
		var ret string
		return ret
	}
	return *o.TransparentVolume
}

// GetTransparentVolumeOk returns a tuple with the TransparentVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentVolumeOk() (*string, bool) {
	if o == nil || o.TransparentVolume == nil {
		return nil, false
	}
	return o.TransparentVolume, true
}

// HasTransparentVolume returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentVolume() bool {
	if o != nil && o.TransparentVolume != nil {
		return true
	}

	return false
}

// SetTransparentVolume gets a reference to the given string and assigns it to the TransparentVolume field.
func (o *GlobalTickerInterval) SetTransparentVolume(v string) {
	o.TransparentVolume = &v
}

// GetTransparentVolumeChange returns the TransparentVolumeChange field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentVolumeChange() string {
	if o == nil || o.TransparentVolumeChange == nil {
		var ret string
		return ret
	}
	return *o.TransparentVolumeChange
}

// GetTransparentVolumeChangeOk returns a tuple with the TransparentVolumeChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentVolumeChangeOk() (*string, bool) {
	if o == nil || o.TransparentVolumeChange == nil {
		return nil, false
	}
	return o.TransparentVolumeChange, true
}

// HasTransparentVolumeChange returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentVolumeChange() bool {
	if o != nil && o.TransparentVolumeChange != nil {
		return true
	}

	return false
}

// SetTransparentVolumeChange gets a reference to the given string and assigns it to the TransparentVolumeChange field.
func (o *GlobalTickerInterval) SetTransparentVolumeChange(v string) {
	o.TransparentVolumeChange = &v
}

// GetTransparentVolumeChangePct returns the TransparentVolumeChangePct field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentVolumeChangePct() string {
	if o == nil || o.TransparentVolumeChangePct == nil {
		var ret string
		return ret
	}
	return *o.TransparentVolumeChangePct
}

// GetTransparentVolumeChangePctOk returns a tuple with the TransparentVolumeChangePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentVolumeChangePctOk() (*string, bool) {
	if o == nil || o.TransparentVolumeChangePct == nil {
		return nil, false
	}
	return o.TransparentVolumeChangePct, true
}

// HasTransparentVolumeChangePct returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentVolumeChangePct() bool {
	if o != nil && o.TransparentVolumeChangePct != nil {
		return true
	}

	return false
}

// SetTransparentVolumeChangePct gets a reference to the given string and assigns it to the TransparentVolumeChangePct field.
func (o *GlobalTickerInterval) SetTransparentVolumeChangePct(v string) {
	o.TransparentVolumeChangePct = &v
}

// GetTransparentSpotVolume returns the TransparentSpotVolume field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentSpotVolume() string {
	if o == nil || o.TransparentSpotVolume == nil {
		var ret string
		return ret
	}
	return *o.TransparentSpotVolume
}

// GetTransparentSpotVolumeOk returns a tuple with the TransparentSpotVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentSpotVolumeOk() (*string, bool) {
	if o == nil || o.TransparentSpotVolume == nil {
		return nil, false
	}
	return o.TransparentSpotVolume, true
}

// HasTransparentSpotVolume returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentSpotVolume() bool {
	if o != nil && o.TransparentSpotVolume != nil {
		return true
	}

	return false
}

// SetTransparentSpotVolume gets a reference to the given string and assigns it to the TransparentSpotVolume field.
func (o *GlobalTickerInterval) SetTransparentSpotVolume(v string) {
	o.TransparentSpotVolume = &v
}

// GetTransparentSpotVolumeChange returns the TransparentSpotVolumeChange field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentSpotVolumeChange() string {
	if o == nil || o.TransparentSpotVolumeChange == nil {
		var ret string
		return ret
	}
	return *o.TransparentSpotVolumeChange
}

// GetTransparentSpotVolumeChangeOk returns a tuple with the TransparentSpotVolumeChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentSpotVolumeChangeOk() (*string, bool) {
	if o == nil || o.TransparentSpotVolumeChange == nil {
		return nil, false
	}
	return o.TransparentSpotVolumeChange, true
}

// HasTransparentSpotVolumeChange returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentSpotVolumeChange() bool {
	if o != nil && o.TransparentSpotVolumeChange != nil {
		return true
	}

	return false
}

// SetTransparentSpotVolumeChange gets a reference to the given string and assigns it to the TransparentSpotVolumeChange field.
func (o *GlobalTickerInterval) SetTransparentSpotVolumeChange(v string) {
	o.TransparentSpotVolumeChange = &v
}

// GetTransparentSpotVolumeChangePct returns the TransparentSpotVolumeChangePct field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentSpotVolumeChangePct() string {
	if o == nil || o.TransparentSpotVolumeChangePct == nil {
		var ret string
		return ret
	}
	return *o.TransparentSpotVolumeChangePct
}

// GetTransparentSpotVolumeChangePctOk returns a tuple with the TransparentSpotVolumeChangePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentSpotVolumeChangePctOk() (*string, bool) {
	if o == nil || o.TransparentSpotVolumeChangePct == nil {
		return nil, false
	}
	return o.TransparentSpotVolumeChangePct, true
}

// HasTransparentSpotVolumeChangePct returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentSpotVolumeChangePct() bool {
	if o != nil && o.TransparentSpotVolumeChangePct != nil {
		return true
	}

	return false
}

// SetTransparentSpotVolumeChangePct gets a reference to the given string and assigns it to the TransparentSpotVolumeChangePct field.
func (o *GlobalTickerInterval) SetTransparentSpotVolumeChangePct(v string) {
	o.TransparentSpotVolumeChangePct = &v
}

// GetTransparentDerivativeVolume returns the TransparentDerivativeVolume field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentDerivativeVolume() string {
	if o == nil || o.TransparentDerivativeVolume == nil {
		var ret string
		return ret
	}
	return *o.TransparentDerivativeVolume
}

// GetTransparentDerivativeVolumeOk returns a tuple with the TransparentDerivativeVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentDerivativeVolumeOk() (*string, bool) {
	if o == nil || o.TransparentDerivativeVolume == nil {
		return nil, false
	}
	return o.TransparentDerivativeVolume, true
}

// HasTransparentDerivativeVolume returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentDerivativeVolume() bool {
	if o != nil && o.TransparentDerivativeVolume != nil {
		return true
	}

	return false
}

// SetTransparentDerivativeVolume gets a reference to the given string and assigns it to the TransparentDerivativeVolume field.
func (o *GlobalTickerInterval) SetTransparentDerivativeVolume(v string) {
	o.TransparentDerivativeVolume = &v
}

// GetTransparentDerivativeVolumeChange returns the TransparentDerivativeVolumeChange field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentDerivativeVolumeChange() string {
	if o == nil || o.TransparentDerivativeVolumeChange == nil {
		var ret string
		return ret
	}
	return *o.TransparentDerivativeVolumeChange
}

// GetTransparentDerivativeVolumeChangeOk returns a tuple with the TransparentDerivativeVolumeChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentDerivativeVolumeChangeOk() (*string, bool) {
	if o == nil || o.TransparentDerivativeVolumeChange == nil {
		return nil, false
	}
	return o.TransparentDerivativeVolumeChange, true
}

// HasTransparentDerivativeVolumeChange returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentDerivativeVolumeChange() bool {
	if o != nil && o.TransparentDerivativeVolumeChange != nil {
		return true
	}

	return false
}

// SetTransparentDerivativeVolumeChange gets a reference to the given string and assigns it to the TransparentDerivativeVolumeChange field.
func (o *GlobalTickerInterval) SetTransparentDerivativeVolumeChange(v string) {
	o.TransparentDerivativeVolumeChange = &v
}

// GetTransparentDerivativeVolumeChangePct returns the TransparentDerivativeVolumeChangePct field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetTransparentDerivativeVolumeChangePct() string {
	if o == nil || o.TransparentDerivativeVolumeChangePct == nil {
		var ret string
		return ret
	}
	return *o.TransparentDerivativeVolumeChangePct
}

// GetTransparentDerivativeVolumeChangePctOk returns a tuple with the TransparentDerivativeVolumeChangePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetTransparentDerivativeVolumeChangePctOk() (*string, bool) {
	if o == nil || o.TransparentDerivativeVolumeChangePct == nil {
		return nil, false
	}
	return o.TransparentDerivativeVolumeChangePct, true
}

// HasTransparentDerivativeVolumeChangePct returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasTransparentDerivativeVolumeChangePct() bool {
	if o != nil && o.TransparentDerivativeVolumeChangePct != nil {
		return true
	}

	return false
}

// SetTransparentDerivativeVolumeChangePct gets a reference to the given string and assigns it to the TransparentDerivativeVolumeChangePct field.
func (o *GlobalTickerInterval) SetTransparentDerivativeVolumeChangePct(v string) {
	o.TransparentDerivativeVolumeChangePct = &v
}

// GetVolumeTransparency returns the VolumeTransparency field value if set, zero value otherwise.
func (o *GlobalTickerInterval) GetVolumeTransparency() []map[string]interface{} {
	if o == nil || o.VolumeTransparency == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.VolumeTransparency
}

// GetVolumeTransparencyOk returns a tuple with the VolumeTransparency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalTickerInterval) GetVolumeTransparencyOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.VolumeTransparency == nil {
		return nil, false
	}
	return o.VolumeTransparency, true
}

// HasVolumeTransparency returns a boolean if a field has been set.
func (o *GlobalTickerInterval) HasVolumeTransparency() bool {
	if o != nil && o.VolumeTransparency != nil {
		return true
	}

	return false
}

// SetVolumeTransparency gets a reference to the given []map[string]interface{} and assigns it to the VolumeTransparency field.
func (o *GlobalTickerInterval) SetVolumeTransparency(v []map[string]interface{}) {
	o.VolumeTransparency = &v
}

func (o GlobalTickerInterval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MarketCapChange != nil {
		toSerialize["market_cap_change"] = o.MarketCapChange
	}
	if o.MarketCapChangePct != nil {
		toSerialize["market_cap_change_pct"] = o.MarketCapChangePct
	}
	if o.TransparentMarketCapChange != nil {
		toSerialize["transparent_market_cap_change"] = o.TransparentMarketCapChange
	}
	if o.TransparentMarketCapChangePct != nil {
		toSerialize["transparent_market_cap_change_pct"] = o.TransparentMarketCapChangePct
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	if o.VolumeChange != nil {
		toSerialize["volume_change"] = o.VolumeChange
	}
	if o.VolumeChangePct != nil {
		toSerialize["volume_change_pct"] = o.VolumeChangePct
	}
	if o.SpotVolume != nil {
		toSerialize["spot_volume"] = o.SpotVolume
	}
	if o.SpotVolumeChange != nil {
		toSerialize["spot_volume_change"] = o.SpotVolumeChange
	}
	if o.SpotVolumeChangePct != nil {
		toSerialize["spot_volume_change_pct"] = o.SpotVolumeChangePct
	}
	if o.DerivativeVolume != nil {
		toSerialize["derivative_volume"] = o.DerivativeVolume
	}
	if o.DerivativeVolumeChange != nil {
		toSerialize["derivative_volume_change"] = o.DerivativeVolumeChange
	}
	if o.DerivativeVolumeChangePct != nil {
		toSerialize["derivative_volume_change_pct"] = o.DerivativeVolumeChangePct
	}
	if o.TransparentVolume != nil {
		toSerialize["transparent_volume"] = o.TransparentVolume
	}
	if o.TransparentVolumeChange != nil {
		toSerialize["transparent_volume_change"] = o.TransparentVolumeChange
	}
	if o.TransparentVolumeChangePct != nil {
		toSerialize["transparent_volume_change_pct"] = o.TransparentVolumeChangePct
	}
	if o.TransparentSpotVolume != nil {
		toSerialize["transparent_spot_volume"] = o.TransparentSpotVolume
	}
	if o.TransparentSpotVolumeChange != nil {
		toSerialize["transparent_spot_volume_change"] = o.TransparentSpotVolumeChange
	}
	if o.TransparentSpotVolumeChangePct != nil {
		toSerialize["transparent_spot_volume_change_pct"] = o.TransparentSpotVolumeChangePct
	}
	if o.TransparentDerivativeVolume != nil {
		toSerialize["transparent_derivative_volume"] = o.TransparentDerivativeVolume
	}
	if o.TransparentDerivativeVolumeChange != nil {
		toSerialize["transparent_derivative_volume_change"] = o.TransparentDerivativeVolumeChange
	}
	if o.TransparentDerivativeVolumeChangePct != nil {
		toSerialize["transparent_derivative_volume_change_pct"] = o.TransparentDerivativeVolumeChangePct
	}
	if o.VolumeTransparency != nil {
		toSerialize["volume_transparency"] = o.VolumeTransparency
	}
	return json.Marshal(toSerialize)
}

type NullableGlobalTickerInterval struct {
	value *GlobalTickerInterval
	isSet bool
}

func (v NullableGlobalTickerInterval) Get() *GlobalTickerInterval {
	return v.value
}

func (v *NullableGlobalTickerInterval) Set(val *GlobalTickerInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalTickerInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalTickerInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalTickerInterval(val *GlobalTickerInterval) *NullableGlobalTickerInterval {
	return &NullableGlobalTickerInterval{value: val, isSet: true}
}

func (v NullableGlobalTickerInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalTickerInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
