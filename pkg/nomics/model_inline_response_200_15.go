/*
 * Nomics Cryptocurrency & Bitcoin API
 *
 * # Introduction  Welcome to the Nomics Cryptocurrency & Bitcoin API. To sign up for an API key please [go here](https://p.nomics.com/cryptocurrency-bitcoin-api/).  [nomics.com](https://nomics.com) is built entirely with the Nomics API. Everything we've done on [nomics.com](https://nomics.com) you can do with our API. There are no internal API endpoints.  If you need support, reach out to use at our [forums](https://forums.nomics.com/).  # General  ## API Server URL  The Nomics API runs at `https://api.nomics.com/v1`. All requests should be prefixed by the server URL.  ## JSON and CSV Support  By default, all endpoints serve data as JSON. However, by passing `format=csv` in the URL, some endpoints will return CSV data. This can be used in Google Sheets via the `IMPORTDATA` function.  CSV responses will not contain a header row, this is so that data can be easily concatenated from multiple requests. The fields will be rendered in the same order as the JSON fields. See the endpoint's documentation for an example.  Not all endpoints support CSV. Endpoints that support CSV will have the `format` parameter in the parameters section.  ## Errors  The Nomics API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.  ## Versioning  We follow Semantic Versioning. That means our API is versioned as Major.Minor.Patch. For example, Version 1.2.3 has major version 1, minor version 2, and patch version 3.  Major version changes indicate that we have altered the API significantly and it is no longer compatible with a previous version. Major versions are also used as the API URL prefix.  When we update the major version, we will not remove the previous version without notice to API customers and a deprecation period to allow everyone to smoothly update to the new version.  Minor version changes indicate that we have added new functionality without breaking any existing functionality. An API client is compatible with future minor versions. Note that a minor version update may add a new field to an existing API endpoint's response. Your API client must ignore fields it does not understand in order to be compatible with future minor versions.  Patch version changes indicate we fixed a bug or security vulnerability. Patch versions don't add new functionality.  ## Cross Origin Resource Sharing (CORS)  This API supports Cross Origin Resource Sharing, which allows you to make API requests directly from your user's browser.  To use CORS, you must provide Nomics with the domains on which your application will run so that we can whitelist them for CORS access.  Requests from `localhost`, `127.0.0.1`, and `0.0.0.0` will always succeed to aid in development.  ## Demo Application  A demo application using the Nomics API, CORS, and React is available on Glitch.com. This can help you get started using the Nomics API. Keep in mind it uses the demo key, which is rotated frequently. You should get your own API key before deploying an app to production. Check it out:  <div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\">   <iframe src=\"https://glitch.com/embed/#!/embed/nomics-api-demo?path=README.md\" alt=\"nomics-api-demo on glitch\" style=\"height: 100%; width: 100%; border: 0;\"></iframe> </div>  ## Demo Spreadsheet  Here is a demo of using the Nomics API with Google Sheets.  <iframe width=\"100%\" height=\"400px\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vShn2iWjvqQ0ueBa9l9g1UBYVM92OZSgZ4nmp0rWuykvHPrvyMyMeSN4r0Orj0ACEIIKdCz6cc5abCw/pubhtml?widget=true&amp;headers=false\"></iframe>  ### Formulas  * A2: `=IMPORTDATA(\"https://api.nomics.com/v1/prices?key=your-key-here&format=csv\")` * Column F: `=LOOKUP(D2,A:A,B:B)` finds D2 (BTC) in column A and pulls the price from column B * Column G: `=E2*F2` * Column H: `=G2/I$2` * Column I: `=SUM(G:G)`  # SDKs and Libraries  ## By Nomics - [Nomics JavaScript Client](https://github.com/nomics-crypto/nomics-javascript)  ## Community Submissions - [Nomics.com Swift SDK](https://forums.nomics.com/t/swift-sdk-supporting-ios-macos-tvos-and-watchos/) by Nick DiZazzo - [Nomics Node.js Library](https://forums.nomics.com/t/i-made-a-library-for-node-js/) by mikunimaru - [Nomics Python Wrapper](https://forums.nomics.com/t/python-package-for-nomics-api/119) by Taylor Facen - [Python Wrapper for Nomics](https://github.com/AviFelman/py-nomics) by Avi Felman  We love watching developers explore new use-cases with our API. Whether you're tinkering on a small side project or building an open-source resource, please share what you're up to in our [forums](https://forums.nomics.com/).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nomics

import (
	"encoding/json"
)

// InlineResponse20015 struct for InlineResponse20015
type InlineResponse20015 struct {
	// Start time of the candle in RFC3339
	Timestamp *string `json:"timestamp,omitempty"`
	// First trade price in USD
	Open *string `json:"open,omitempty"`
	// Highest price in USD
	High *string `json:"high,omitempty"`
	// Lowest price in USD
	Low *string `json:"low,omitempty"`
	// Last trade price in USD
	Close *string `json:"close,omitempty"`
	// Volume in USD
	Volume *string `json:"volume,omitempty"`
	// First transparent trade price in USD
	TransparentOpen *string `json:"transparent_open,omitempty"`
	// Highest transparent price in USD
	TransparentHigh *string `json:"transparent_high,omitempty"`
	// Lowest transparent price in USD
	TransparentLow *string `json:"transparent_low,omitempty"`
	// Last transparent trade price in USD
	TransparentClose *string `json:"transparent_close,omitempty"`
	// Transparent volume in USD
	TransparentVolume  *string                    `json:"transparent_volume,omitempty"`
	VolumeTransparency *CandlesVolumeTransparency `json:"volume_transparency,omitempty"`
}

// NewInlineResponse20015 instantiates a new InlineResponse20015 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20015() *InlineResponse20015 {
	this := InlineResponse20015{}
	return &this
}

// NewInlineResponse20015WithDefaults instantiates a new InlineResponse20015 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20015WithDefaults() *InlineResponse20015 {
	this := InlineResponse20015{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *InlineResponse20015) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *InlineResponse20015) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *InlineResponse20015) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *InlineResponse20015) GetOpen() string {
	if o == nil || o.Open == nil {
		var ret string
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetOpenOk() (*string, bool) {
	if o == nil || o.Open == nil {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *InlineResponse20015) HasOpen() bool {
	if o != nil && o.Open != nil {
		return true
	}

	return false
}

// SetOpen gets a reference to the given string and assigns it to the Open field.
func (o *InlineResponse20015) SetOpen(v string) {
	o.Open = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *InlineResponse20015) GetHigh() string {
	if o == nil || o.High == nil {
		var ret string
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetHighOk() (*string, bool) {
	if o == nil || o.High == nil {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *InlineResponse20015) HasHigh() bool {
	if o != nil && o.High != nil {
		return true
	}

	return false
}

// SetHigh gets a reference to the given string and assigns it to the High field.
func (o *InlineResponse20015) SetHigh(v string) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *InlineResponse20015) GetLow() string {
	if o == nil || o.Low == nil {
		var ret string
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetLowOk() (*string, bool) {
	if o == nil || o.Low == nil {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *InlineResponse20015) HasLow() bool {
	if o != nil && o.Low != nil {
		return true
	}

	return false
}

// SetLow gets a reference to the given string and assigns it to the Low field.
func (o *InlineResponse20015) SetLow(v string) {
	o.Low = &v
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *InlineResponse20015) GetClose() string {
	if o == nil || o.Close == nil {
		var ret string
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetCloseOk() (*string, bool) {
	if o == nil || o.Close == nil {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *InlineResponse20015) HasClose() bool {
	if o != nil && o.Close != nil {
		return true
	}

	return false
}

// SetClose gets a reference to the given string and assigns it to the Close field.
func (o *InlineResponse20015) SetClose(v string) {
	o.Close = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *InlineResponse20015) GetVolume() string {
	if o == nil || o.Volume == nil {
		var ret string
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetVolumeOk() (*string, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *InlineResponse20015) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given string and assigns it to the Volume field.
func (o *InlineResponse20015) SetVolume(v string) {
	o.Volume = &v
}

// GetTransparentOpen returns the TransparentOpen field value if set, zero value otherwise.
func (o *InlineResponse20015) GetTransparentOpen() string {
	if o == nil || o.TransparentOpen == nil {
		var ret string
		return ret
	}
	return *o.TransparentOpen
}

// GetTransparentOpenOk returns a tuple with the TransparentOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetTransparentOpenOk() (*string, bool) {
	if o == nil || o.TransparentOpen == nil {
		return nil, false
	}
	return o.TransparentOpen, true
}

// HasTransparentOpen returns a boolean if a field has been set.
func (o *InlineResponse20015) HasTransparentOpen() bool {
	if o != nil && o.TransparentOpen != nil {
		return true
	}

	return false
}

// SetTransparentOpen gets a reference to the given string and assigns it to the TransparentOpen field.
func (o *InlineResponse20015) SetTransparentOpen(v string) {
	o.TransparentOpen = &v
}

// GetTransparentHigh returns the TransparentHigh field value if set, zero value otherwise.
func (o *InlineResponse20015) GetTransparentHigh() string {
	if o == nil || o.TransparentHigh == nil {
		var ret string
		return ret
	}
	return *o.TransparentHigh
}

// GetTransparentHighOk returns a tuple with the TransparentHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetTransparentHighOk() (*string, bool) {
	if o == nil || o.TransparentHigh == nil {
		return nil, false
	}
	return o.TransparentHigh, true
}

// HasTransparentHigh returns a boolean if a field has been set.
func (o *InlineResponse20015) HasTransparentHigh() bool {
	if o != nil && o.TransparentHigh != nil {
		return true
	}

	return false
}

// SetTransparentHigh gets a reference to the given string and assigns it to the TransparentHigh field.
func (o *InlineResponse20015) SetTransparentHigh(v string) {
	o.TransparentHigh = &v
}

// GetTransparentLow returns the TransparentLow field value if set, zero value otherwise.
func (o *InlineResponse20015) GetTransparentLow() string {
	if o == nil || o.TransparentLow == nil {
		var ret string
		return ret
	}
	return *o.TransparentLow
}

// GetTransparentLowOk returns a tuple with the TransparentLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetTransparentLowOk() (*string, bool) {
	if o == nil || o.TransparentLow == nil {
		return nil, false
	}
	return o.TransparentLow, true
}

// HasTransparentLow returns a boolean if a field has been set.
func (o *InlineResponse20015) HasTransparentLow() bool {
	if o != nil && o.TransparentLow != nil {
		return true
	}

	return false
}

// SetTransparentLow gets a reference to the given string and assigns it to the TransparentLow field.
func (o *InlineResponse20015) SetTransparentLow(v string) {
	o.TransparentLow = &v
}

// GetTransparentClose returns the TransparentClose field value if set, zero value otherwise.
func (o *InlineResponse20015) GetTransparentClose() string {
	if o == nil || o.TransparentClose == nil {
		var ret string
		return ret
	}
	return *o.TransparentClose
}

// GetTransparentCloseOk returns a tuple with the TransparentClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetTransparentCloseOk() (*string, bool) {
	if o == nil || o.TransparentClose == nil {
		return nil, false
	}
	return o.TransparentClose, true
}

// HasTransparentClose returns a boolean if a field has been set.
func (o *InlineResponse20015) HasTransparentClose() bool {
	if o != nil && o.TransparentClose != nil {
		return true
	}

	return false
}

// SetTransparentClose gets a reference to the given string and assigns it to the TransparentClose field.
func (o *InlineResponse20015) SetTransparentClose(v string) {
	o.TransparentClose = &v
}

// GetTransparentVolume returns the TransparentVolume field value if set, zero value otherwise.
func (o *InlineResponse20015) GetTransparentVolume() string {
	if o == nil || o.TransparentVolume == nil {
		var ret string
		return ret
	}
	return *o.TransparentVolume
}

// GetTransparentVolumeOk returns a tuple with the TransparentVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetTransparentVolumeOk() (*string, bool) {
	if o == nil || o.TransparentVolume == nil {
		return nil, false
	}
	return o.TransparentVolume, true
}

// HasTransparentVolume returns a boolean if a field has been set.
func (o *InlineResponse20015) HasTransparentVolume() bool {
	if o != nil && o.TransparentVolume != nil {
		return true
	}

	return false
}

// SetTransparentVolume gets a reference to the given string and assigns it to the TransparentVolume field.
func (o *InlineResponse20015) SetTransparentVolume(v string) {
	o.TransparentVolume = &v
}

// GetVolumeTransparency returns the VolumeTransparency field value if set, zero value otherwise.
func (o *InlineResponse20015) GetVolumeTransparency() CandlesVolumeTransparency {
	if o == nil || o.VolumeTransparency == nil {
		var ret CandlesVolumeTransparency
		return ret
	}
	return *o.VolumeTransparency
}

// GetVolumeTransparencyOk returns a tuple with the VolumeTransparency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetVolumeTransparencyOk() (*CandlesVolumeTransparency, bool) {
	if o == nil || o.VolumeTransparency == nil {
		return nil, false
	}
	return o.VolumeTransparency, true
}

// HasVolumeTransparency returns a boolean if a field has been set.
func (o *InlineResponse20015) HasVolumeTransparency() bool {
	if o != nil && o.VolumeTransparency != nil {
		return true
	}

	return false
}

// SetVolumeTransparency gets a reference to the given CandlesVolumeTransparency and assigns it to the VolumeTransparency field.
func (o *InlineResponse20015) SetVolumeTransparency(v CandlesVolumeTransparency) {
	o.VolumeTransparency = &v
}

func (o InlineResponse20015) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Open != nil {
		toSerialize["open"] = o.Open
	}
	if o.High != nil {
		toSerialize["high"] = o.High
	}
	if o.Low != nil {
		toSerialize["low"] = o.Low
	}
	if o.Close != nil {
		toSerialize["close"] = o.Close
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	if o.TransparentOpen != nil {
		toSerialize["transparent_open"] = o.TransparentOpen
	}
	if o.TransparentHigh != nil {
		toSerialize["transparent_high"] = o.TransparentHigh
	}
	if o.TransparentLow != nil {
		toSerialize["transparent_low"] = o.TransparentLow
	}
	if o.TransparentClose != nil {
		toSerialize["transparent_close"] = o.TransparentClose
	}
	if o.TransparentVolume != nil {
		toSerialize["transparent_volume"] = o.TransparentVolume
	}
	if o.VolumeTransparency != nil {
		toSerialize["volume_transparency"] = o.VolumeTransparency
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20015 struct {
	value *InlineResponse20015
	isSet bool
}

func (v NullableInlineResponse20015) Get() *InlineResponse20015 {
	return v.value
}

func (v *NullableInlineResponse20015) Set(val *InlineResponse20015) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20015) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20015) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20015(val *InlineResponse20015) *NullableInlineResponse20015 {
	return &NullableInlineResponse20015{value: val, isSet: true}
}

func (v NullableInlineResponse20015) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20015) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
