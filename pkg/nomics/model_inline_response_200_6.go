/*
 * Nomics Cryptocurrency & Bitcoin API
 *
 * # Introduction  Welcome to the Nomics Cryptocurrency & Bitcoin API. To sign up for an API key please [go here](https://p.nomics.com/cryptocurrency-bitcoin-api/).  [nomics.com](https://nomics.com) is built entirely with the Nomics API. Everything we've done on [nomics.com](https://nomics.com) you can do with our API. There are no internal API endpoints.  If you need support, reach out to use at our [forums](https://forums.nomics.com/).  # General  ## API Server URL  The Nomics API runs at `https://api.nomics.com/v1`. All requests should be prefixed by the server URL.  ## JSON and CSV Support  By default, all endpoints serve data as JSON. However, by passing `format=csv` in the URL, some endpoints will return CSV data. This can be used in Google Sheets via the `IMPORTDATA` function.  CSV responses will not contain a header row, this is so that data can be easily concatenated from multiple requests. The fields will be rendered in the same order as the JSON fields. See the endpoint's documentation for an example.  Not all endpoints support CSV. Endpoints that support CSV will have the `format` parameter in the parameters section.  ## Errors  The Nomics API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.  ## Versioning  We follow Semantic Versioning. That means our API is versioned as Major.Minor.Patch. For example, Version 1.2.3 has major version 1, minor version 2, and patch version 3.  Major version changes indicate that we have altered the API significantly and it is no longer compatible with a previous version. Major versions are also used as the API URL prefix.  When we update the major version, we will not remove the previous version without notice to API customers and a deprecation period to allow everyone to smoothly update to the new version.  Minor version changes indicate that we have added new functionality without breaking any existing functionality. An API client is compatible with future minor versions. Note that a minor version update may add a new field to an existing API endpoint's response. Your API client must ignore fields it does not understand in order to be compatible with future minor versions.  Patch version changes indicate we fixed a bug or security vulnerability. Patch versions don't add new functionality.  ## Cross Origin Resource Sharing (CORS)  This API supports Cross Origin Resource Sharing, which allows you to make API requests directly from your user's browser.  To use CORS, you must provide Nomics with the domains on which your application will run so that we can whitelist them for CORS access.  Requests from `localhost`, `127.0.0.1`, and `0.0.0.0` will always succeed to aid in development.  ## Demo Application  A demo application using the Nomics API, CORS, and React is available on Glitch.com. This can help you get started using the Nomics API. Keep in mind it uses the demo key, which is rotated frequently. You should get your own API key before deploying an app to production. Check it out:  <div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\">   <iframe src=\"https://glitch.com/embed/#!/embed/nomics-api-demo?path=README.md\" alt=\"nomics-api-demo on glitch\" style=\"height: 100%; width: 100%; border: 0;\"></iframe> </div>  ## Demo Spreadsheet  Here is a demo of using the Nomics API with Google Sheets.  <iframe width=\"100%\" height=\"400px\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vShn2iWjvqQ0ueBa9l9g1UBYVM92OZSgZ4nmp0rWuykvHPrvyMyMeSN4r0Orj0ACEIIKdCz6cc5abCw/pubhtml?widget=true&amp;headers=false\"></iframe>  ### Formulas  * A2: `=IMPORTDATA(\"https://api.nomics.com/v1/prices?key=your-key-here&format=csv\")` * Column F: `=LOOKUP(D2,A:A,B:B)` finds D2 (BTC) in column A and pulls the price from column B * Column G: `=E2*F2` * Column H: `=G2/I$2` * Column I: `=SUM(G:G)`  # SDKs and Libraries  ## By Nomics - [Nomics JavaScript Client](https://github.com/nomics-crypto/nomics-javascript)  ## Community Submissions - [Nomics.com Swift SDK](https://forums.nomics.com/t/swift-sdk-supporting-ios-macos-tvos-and-watchos/) by Nick DiZazzo - [Nomics Node.js Library](https://forums.nomics.com/t/i-made-a-library-for-node-js/) by mikunimaru - [Nomics Python Wrapper](https://forums.nomics.com/t/python-package-for-nomics-api/119) by Taylor Facen - [Python Wrapper for Nomics](https://github.com/AviFelman/py-nomics) by Avi Felman  We love watching developers explore new use-cases with our API. Whether you're tinkering on a small side project or building an open-source resource, please share what you're up to in our [forums](https://forums.nomics.com/).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nomics

import (
	"encoding/json"
)

// InlineResponse2006 struct for InlineResponse2006
type InlineResponse2006 struct {
	// Nomics ID of the exchange
	Id *string `json:"id,omitempty"`
	// Name of the exchange
	Name *string `json:"name,omitempty"`
	// URL to logo of the exchange
	LogoUrl *string `json:"logo_url,omitempty"`
	// Rank of the exchange relative to other exchanges after the `status` and `type` filters are applied
	Rank *string `json:"rank,omitempty"`
	// Transparency grade of the exchange
	TransparencyGrade *string `json:"transparency_grade,omitempty"`
	// Coverage type of the exchange (trades, candles, tickers)
	CoverageType *string `json:"coverage_type,omitempty"`
	// Indicates if order books are available
	OrderBooks *bool `json:"order_books,omitempty"`
	// Date of the first trade available
	FirstTrade *string `json:"first_trade,omitempty"`
	// Date of the first candle available
	FirstCandle *string `json:"first_candle,omitempty"`
	// Date of the first order book available
	FirstOrderBook *string `json:"first_order_book,omitempty"`
	// Timestamp of the last update of data
	LastUpdated *string `json:"last_updated,omitempty"`
	// List of fiat currencies available
	FiatCurrencies *[]string `json:"fiat_currencies,omitempty"`
	// Number of currency pairs (markets) available
	NumPairs *string `json:"num_pairs,omitempty"`
	// Number of currency pairs (markets) that we know about, but are not yet available
	NumPairsUnmapped *string `json:"num_pairs_unmapped,omitempty"`
	// Whether or not the exchange is centralized
	Centralized *bool `json:"centralized,omitempty"`
	// Whether or not the exchange is decentralized
	Decentralized *bool                    `json:"decentralized,omitempty"`
	Interval      *ExchangesTickerInterval `json:"interval,omitempty"`
}

// NewInlineResponse2006 instantiates a new InlineResponse2006 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2006() *InlineResponse2006 {
	this := InlineResponse2006{}
	return &this
}

// NewInlineResponse2006WithDefaults instantiates a new InlineResponse2006 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2006WithDefaults() *InlineResponse2006 {
	this := InlineResponse2006{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse2006) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse2006) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineResponse2006) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse2006) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse2006) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse2006) SetName(v string) {
	o.Name = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *InlineResponse2006) GetLogoUrl() string {
	if o == nil || o.LogoUrl == nil {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetLogoUrlOk() (*string, bool) {
	if o == nil || o.LogoUrl == nil {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *InlineResponse2006) HasLogoUrl() bool {
	if o != nil && o.LogoUrl != nil {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *InlineResponse2006) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *InlineResponse2006) GetRank() string {
	if o == nil || o.Rank == nil {
		var ret string
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetRankOk() (*string, bool) {
	if o == nil || o.Rank == nil {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *InlineResponse2006) HasRank() bool {
	if o != nil && o.Rank != nil {
		return true
	}

	return false
}

// SetRank gets a reference to the given string and assigns it to the Rank field.
func (o *InlineResponse2006) SetRank(v string) {
	o.Rank = &v
}

// GetTransparencyGrade returns the TransparencyGrade field value if set, zero value otherwise.
func (o *InlineResponse2006) GetTransparencyGrade() string {
	if o == nil || o.TransparencyGrade == nil {
		var ret string
		return ret
	}
	return *o.TransparencyGrade
}

// GetTransparencyGradeOk returns a tuple with the TransparencyGrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetTransparencyGradeOk() (*string, bool) {
	if o == nil || o.TransparencyGrade == nil {
		return nil, false
	}
	return o.TransparencyGrade, true
}

// HasTransparencyGrade returns a boolean if a field has been set.
func (o *InlineResponse2006) HasTransparencyGrade() bool {
	if o != nil && o.TransparencyGrade != nil {
		return true
	}

	return false
}

// SetTransparencyGrade gets a reference to the given string and assigns it to the TransparencyGrade field.
func (o *InlineResponse2006) SetTransparencyGrade(v string) {
	o.TransparencyGrade = &v
}

// GetCoverageType returns the CoverageType field value if set, zero value otherwise.
func (o *InlineResponse2006) GetCoverageType() string {
	if o == nil || o.CoverageType == nil {
		var ret string
		return ret
	}
	return *o.CoverageType
}

// GetCoverageTypeOk returns a tuple with the CoverageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetCoverageTypeOk() (*string, bool) {
	if o == nil || o.CoverageType == nil {
		return nil, false
	}
	return o.CoverageType, true
}

// HasCoverageType returns a boolean if a field has been set.
func (o *InlineResponse2006) HasCoverageType() bool {
	if o != nil && o.CoverageType != nil {
		return true
	}

	return false
}

// SetCoverageType gets a reference to the given string and assigns it to the CoverageType field.
func (o *InlineResponse2006) SetCoverageType(v string) {
	o.CoverageType = &v
}

// GetOrderBooks returns the OrderBooks field value if set, zero value otherwise.
func (o *InlineResponse2006) GetOrderBooks() bool {
	if o == nil || o.OrderBooks == nil {
		var ret bool
		return ret
	}
	return *o.OrderBooks
}

// GetOrderBooksOk returns a tuple with the OrderBooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetOrderBooksOk() (*bool, bool) {
	if o == nil || o.OrderBooks == nil {
		return nil, false
	}
	return o.OrderBooks, true
}

// HasOrderBooks returns a boolean if a field has been set.
func (o *InlineResponse2006) HasOrderBooks() bool {
	if o != nil && o.OrderBooks != nil {
		return true
	}

	return false
}

// SetOrderBooks gets a reference to the given bool and assigns it to the OrderBooks field.
func (o *InlineResponse2006) SetOrderBooks(v bool) {
	o.OrderBooks = &v
}

// GetFirstTrade returns the FirstTrade field value if set, zero value otherwise.
func (o *InlineResponse2006) GetFirstTrade() string {
	if o == nil || o.FirstTrade == nil {
		var ret string
		return ret
	}
	return *o.FirstTrade
}

// GetFirstTradeOk returns a tuple with the FirstTrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetFirstTradeOk() (*string, bool) {
	if o == nil || o.FirstTrade == nil {
		return nil, false
	}
	return o.FirstTrade, true
}

// HasFirstTrade returns a boolean if a field has been set.
func (o *InlineResponse2006) HasFirstTrade() bool {
	if o != nil && o.FirstTrade != nil {
		return true
	}

	return false
}

// SetFirstTrade gets a reference to the given string and assigns it to the FirstTrade field.
func (o *InlineResponse2006) SetFirstTrade(v string) {
	o.FirstTrade = &v
}

// GetFirstCandle returns the FirstCandle field value if set, zero value otherwise.
func (o *InlineResponse2006) GetFirstCandle() string {
	if o == nil || o.FirstCandle == nil {
		var ret string
		return ret
	}
	return *o.FirstCandle
}

// GetFirstCandleOk returns a tuple with the FirstCandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetFirstCandleOk() (*string, bool) {
	if o == nil || o.FirstCandle == nil {
		return nil, false
	}
	return o.FirstCandle, true
}

// HasFirstCandle returns a boolean if a field has been set.
func (o *InlineResponse2006) HasFirstCandle() bool {
	if o != nil && o.FirstCandle != nil {
		return true
	}

	return false
}

// SetFirstCandle gets a reference to the given string and assigns it to the FirstCandle field.
func (o *InlineResponse2006) SetFirstCandle(v string) {
	o.FirstCandle = &v
}

// GetFirstOrderBook returns the FirstOrderBook field value if set, zero value otherwise.
func (o *InlineResponse2006) GetFirstOrderBook() string {
	if o == nil || o.FirstOrderBook == nil {
		var ret string
		return ret
	}
	return *o.FirstOrderBook
}

// GetFirstOrderBookOk returns a tuple with the FirstOrderBook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetFirstOrderBookOk() (*string, bool) {
	if o == nil || o.FirstOrderBook == nil {
		return nil, false
	}
	return o.FirstOrderBook, true
}

// HasFirstOrderBook returns a boolean if a field has been set.
func (o *InlineResponse2006) HasFirstOrderBook() bool {
	if o != nil && o.FirstOrderBook != nil {
		return true
	}

	return false
}

// SetFirstOrderBook gets a reference to the given string and assigns it to the FirstOrderBook field.
func (o *InlineResponse2006) SetFirstOrderBook(v string) {
	o.FirstOrderBook = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *InlineResponse2006) GetLastUpdated() string {
	if o == nil || o.LastUpdated == nil {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetLastUpdatedOk() (*string, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *InlineResponse2006) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *InlineResponse2006) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetFiatCurrencies returns the FiatCurrencies field value if set, zero value otherwise.
func (o *InlineResponse2006) GetFiatCurrencies() []string {
	if o == nil || o.FiatCurrencies == nil {
		var ret []string
		return ret
	}
	return *o.FiatCurrencies
}

// GetFiatCurrenciesOk returns a tuple with the FiatCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetFiatCurrenciesOk() (*[]string, bool) {
	if o == nil || o.FiatCurrencies == nil {
		return nil, false
	}
	return o.FiatCurrencies, true
}

// HasFiatCurrencies returns a boolean if a field has been set.
func (o *InlineResponse2006) HasFiatCurrencies() bool {
	if o != nil && o.FiatCurrencies != nil {
		return true
	}

	return false
}

// SetFiatCurrencies gets a reference to the given []string and assigns it to the FiatCurrencies field.
func (o *InlineResponse2006) SetFiatCurrencies(v []string) {
	o.FiatCurrencies = &v
}

// GetNumPairs returns the NumPairs field value if set, zero value otherwise.
func (o *InlineResponse2006) GetNumPairs() string {
	if o == nil || o.NumPairs == nil {
		var ret string
		return ret
	}
	return *o.NumPairs
}

// GetNumPairsOk returns a tuple with the NumPairs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetNumPairsOk() (*string, bool) {
	if o == nil || o.NumPairs == nil {
		return nil, false
	}
	return o.NumPairs, true
}

// HasNumPairs returns a boolean if a field has been set.
func (o *InlineResponse2006) HasNumPairs() bool {
	if o != nil && o.NumPairs != nil {
		return true
	}

	return false
}

// SetNumPairs gets a reference to the given string and assigns it to the NumPairs field.
func (o *InlineResponse2006) SetNumPairs(v string) {
	o.NumPairs = &v
}

// GetNumPairsUnmapped returns the NumPairsUnmapped field value if set, zero value otherwise.
func (o *InlineResponse2006) GetNumPairsUnmapped() string {
	if o == nil || o.NumPairsUnmapped == nil {
		var ret string
		return ret
	}
	return *o.NumPairsUnmapped
}

// GetNumPairsUnmappedOk returns a tuple with the NumPairsUnmapped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetNumPairsUnmappedOk() (*string, bool) {
	if o == nil || o.NumPairsUnmapped == nil {
		return nil, false
	}
	return o.NumPairsUnmapped, true
}

// HasNumPairsUnmapped returns a boolean if a field has been set.
func (o *InlineResponse2006) HasNumPairsUnmapped() bool {
	if o != nil && o.NumPairsUnmapped != nil {
		return true
	}

	return false
}

// SetNumPairsUnmapped gets a reference to the given string and assigns it to the NumPairsUnmapped field.
func (o *InlineResponse2006) SetNumPairsUnmapped(v string) {
	o.NumPairsUnmapped = &v
}

// GetCentralized returns the Centralized field value if set, zero value otherwise.
func (o *InlineResponse2006) GetCentralized() bool {
	if o == nil || o.Centralized == nil {
		var ret bool
		return ret
	}
	return *o.Centralized
}

// GetCentralizedOk returns a tuple with the Centralized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetCentralizedOk() (*bool, bool) {
	if o == nil || o.Centralized == nil {
		return nil, false
	}
	return o.Centralized, true
}

// HasCentralized returns a boolean if a field has been set.
func (o *InlineResponse2006) HasCentralized() bool {
	if o != nil && o.Centralized != nil {
		return true
	}

	return false
}

// SetCentralized gets a reference to the given bool and assigns it to the Centralized field.
func (o *InlineResponse2006) SetCentralized(v bool) {
	o.Centralized = &v
}

// GetDecentralized returns the Decentralized field value if set, zero value otherwise.
func (o *InlineResponse2006) GetDecentralized() bool {
	if o == nil || o.Decentralized == nil {
		var ret bool
		return ret
	}
	return *o.Decentralized
}

// GetDecentralizedOk returns a tuple with the Decentralized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetDecentralizedOk() (*bool, bool) {
	if o == nil || o.Decentralized == nil {
		return nil, false
	}
	return o.Decentralized, true
}

// HasDecentralized returns a boolean if a field has been set.
func (o *InlineResponse2006) HasDecentralized() bool {
	if o != nil && o.Decentralized != nil {
		return true
	}

	return false
}

// SetDecentralized gets a reference to the given bool and assigns it to the Decentralized field.
func (o *InlineResponse2006) SetDecentralized(v bool) {
	o.Decentralized = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *InlineResponse2006) GetInterval() ExchangesTickerInterval {
	if o == nil || o.Interval == nil {
		var ret ExchangesTickerInterval
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2006) GetIntervalOk() (*ExchangesTickerInterval, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *InlineResponse2006) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given ExchangesTickerInterval and assigns it to the Interval field.
func (o *InlineResponse2006) SetInterval(v ExchangesTickerInterval) {
	o.Interval = &v
}

func (o InlineResponse2006) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.LogoUrl != nil {
		toSerialize["logo_url"] = o.LogoUrl
	}
	if o.Rank != nil {
		toSerialize["rank"] = o.Rank
	}
	if o.TransparencyGrade != nil {
		toSerialize["transparency_grade"] = o.TransparencyGrade
	}
	if o.CoverageType != nil {
		toSerialize["coverage_type"] = o.CoverageType
	}
	if o.OrderBooks != nil {
		toSerialize["order_books"] = o.OrderBooks
	}
	if o.FirstTrade != nil {
		toSerialize["first_trade"] = o.FirstTrade
	}
	if o.FirstCandle != nil {
		toSerialize["first_candle"] = o.FirstCandle
	}
	if o.FirstOrderBook != nil {
		toSerialize["first_order_book"] = o.FirstOrderBook
	}
	if o.LastUpdated != nil {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if o.FiatCurrencies != nil {
		toSerialize["fiat_currencies"] = o.FiatCurrencies
	}
	if o.NumPairs != nil {
		toSerialize["num_pairs"] = o.NumPairs
	}
	if o.NumPairsUnmapped != nil {
		toSerialize["num_pairs_unmapped"] = o.NumPairsUnmapped
	}
	if o.Centralized != nil {
		toSerialize["centralized"] = o.Centralized
	}
	if o.Decentralized != nil {
		toSerialize["decentralized"] = o.Decentralized
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2006 struct {
	value *InlineResponse2006
	isSet bool
}

func (v NullableInlineResponse2006) Get() *InlineResponse2006 {
	return v.value
}

func (v *NullableInlineResponse2006) Set(val *InlineResponse2006) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2006) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2006) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2006(val *InlineResponse2006) *NullableInlineResponse2006 {
	return &NullableInlineResponse2006{value: val, isSet: true}
}

func (v NullableInlineResponse2006) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2006) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
