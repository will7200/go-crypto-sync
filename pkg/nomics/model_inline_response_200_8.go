/*
 * Nomics Cryptocurrency & Bitcoin API
 *
 * # Introduction  Welcome to the Nomics Cryptocurrency & Bitcoin API. To sign up for an API key please [go here](https://p.nomics.com/cryptocurrency-bitcoin-api/).  [nomics.com](https://nomics.com) is built entirely with the Nomics API. Everything we've done on [nomics.com](https://nomics.com) you can do with our API. There are no internal API endpoints.  If you need support, reach out to use at our [forums](https://forums.nomics.com/).  # General  ## API Server URL  The Nomics API runs at `https://api.nomics.com/v1`. All requests should be prefixed by the server URL.  ## JSON and CSV Support  By default, all endpoints serve data as JSON. However, by passing `format=csv` in the URL, some endpoints will return CSV data. This can be used in Google Sheets via the `IMPORTDATA` function.  CSV responses will not contain a header row, this is so that data can be easily concatenated from multiple requests. The fields will be rendered in the same order as the JSON fields. See the endpoint's documentation for an example.  Not all endpoints support CSV. Endpoints that support CSV will have the `format` parameter in the parameters section.  ## Errors  The Nomics API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.  ## Versioning  We follow Semantic Versioning. That means our API is versioned as Major.Minor.Patch. For example, Version 1.2.3 has major version 1, minor version 2, and patch version 3.  Major version changes indicate that we have altered the API significantly and it is no longer compatible with a previous version. Major versions are also used as the API URL prefix.  When we update the major version, we will not remove the previous version without notice to API customers and a deprecation period to allow everyone to smoothly update to the new version.  Minor version changes indicate that we have added new functionality without breaking any existing functionality. An API client is compatible with future minor versions. Note that a minor version update may add a new field to an existing API endpoint's response. Your API client must ignore fields it does not understand in order to be compatible with future minor versions.  Patch version changes indicate we fixed a bug or security vulnerability. Patch versions don't add new functionality.  ## Cross Origin Resource Sharing (CORS)  This API supports Cross Origin Resource Sharing, which allows you to make API requests directly from your user's browser.  To use CORS, you must provide Nomics with the domains on which your application will run so that we can whitelist them for CORS access.  Requests from `localhost`, `127.0.0.1`, and `0.0.0.0` will always succeed to aid in development.  ## Demo Application  A demo application using the Nomics API, CORS, and React is available on Glitch.com. This can help you get started using the Nomics API. Keep in mind it uses the demo key, which is rotated frequently. You should get your own API key before deploying an app to production. Check it out:  <div class=\"glitch-embed-wrap\" style=\"height: 420px; width: 100%;\">   <iframe src=\"https://glitch.com/embed/#!/embed/nomics-api-demo?path=README.md\" alt=\"nomics-api-demo on glitch\" style=\"height: 100%; width: 100%; border: 0;\"></iframe> </div>  ## Demo Spreadsheet  Here is a demo of using the Nomics API with Google Sheets.  <iframe width=\"100%\" height=\"400px\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vShn2iWjvqQ0ueBa9l9g1UBYVM92OZSgZ4nmp0rWuykvHPrvyMyMeSN4r0Orj0ACEIIKdCz6cc5abCw/pubhtml?widget=true&amp;headers=false\"></iframe>  ### Formulas  * A2: `=IMPORTDATA(\"https://api.nomics.com/v1/prices?key=your-key-here&format=csv\")` * Column F: `=LOOKUP(D2,A:A,B:B)` finds D2 (BTC) in column A and pulls the price from column B * Column G: `=E2*F2` * Column H: `=G2/I$2` * Column I: `=SUM(G:G)`  # SDKs and Libraries  ## By Nomics - [Nomics JavaScript Client](https://github.com/nomics-crypto/nomics-javascript)  ## Community Submissions - [Nomics.com Swift SDK](https://forums.nomics.com/t/swift-sdk-supporting-ios-macos-tvos-and-watchos/) by Nick DiZazzo - [Nomics Node.js Library](https://forums.nomics.com/t/i-made-a-library-for-node-js/) by mikunimaru - [Nomics Python Wrapper](https://forums.nomics.com/t/python-package-for-nomics-api/119) by Taylor Facen - [Python Wrapper for Nomics](https://github.com/AviFelman/py-nomics) by Avi Felman  We love watching developers explore new use-cases with our API. Whether you're tinkering on a small side project or building an open-source resource, please share what you're up to in our [forums](https://forums.nomics.com/).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nomics

import (
	"encoding/json"
)

// InlineResponse2008 struct for InlineResponse2008
type InlineResponse2008 struct {
	// Nomics Exchange ID
	Id *string `json:"id,omitempty"`
	// Flag that determines if the exchange provides markets data
	CapabilityMarkets *bool `json:"capability_markets,omitempty"`
	// Flag that determines if the exchange provides trades data
	CapabilityTrades *bool `json:"capability_trades,omitempty"`
	// Flag that determines if the exchange provides trades by timestamp data
	CapabilityTradesByTimestamp *bool `json:"capability_trades_by_timestamp,omitempty"`
	// Flag that determines if the exchange provides recent-only trades data
	CapabilityTradesSnapshot *bool `json:"capability_trades_snapshot,omitempty"`
	// Flag that determines if the exchange provides orderbook snapshot data
	CapabilityOrdersSnapshot *bool `json:"capability_orders_snapshot,omitempty"`
	// Flag that determines if the exchange provides OHLCV candle data
	CapabilityCandles *bool `json:"capability_candles,omitempty"`
	// Flag that determines if the exchange provides 24h ticker data
	CapabilityTicker *bool `json:"capability_ticker,omitempty"`
	// Flag that determines if the exchange has completed a [Nomics Deep Data Integration](https://nomicsintegration.com)
	Integrated *bool `json:"integrated,omitempty"`
	// Exchange Name
	Name *string `json:"name,omitempty"`
	// Exchange description
	Description *string `json:"description,omitempty"`
	// Primary exchange location country
	Location *string `json:"location,omitempty"`
	// Exchange logo URL
	LogoUrl *string `json:"logo_url,omitempty"`
	// Exchange website URL
	WebsiteUrl *string `json:"website_url,omitempty"`
	// Exchange fees URL
	FeesUrl *string `json:"fees_url,omitempty"`
	// Exchange Twitter URL
	TwitterUrl *string `json:"twitter_url,omitempty"`
	// Exchange Facebook URL
	FacebookUrl *string `json:"facebook_url,omitempty"`
	// Exchange Reddit URL
	RedditUrl *string `json:"reddit_url,omitempty"`
	// Exchange chat URL
	ChatUrl *string `json:"chat_url,omitempty"`
	// Exchange blog URL
	BlogUrl *string `json:"blog_url,omitempty"`
	// Year exchange became active
	Year *string `json:"year,omitempty"`
	// The [Nomics Transparency Rating](https://blog.nomics.com/essays/transparency-ratings/) for the exchange
	TransparencyGrade *string `json:"transparency_grade,omitempty"`
	// The maximum frequency (in milliseconds) at which order book snapshots are taken for this exchange
	OrderBooksInterval *float32 `json:"order_books_interval,omitempty"`
	// Whether or not the exchange is centralized
	Centralized *bool `json:"centralized,omitempty"`
	// Whether or not the exchange is decentralized
	Decentralized *bool `json:"decentralized,omitempty"`
}

// NewInlineResponse2008 instantiates a new InlineResponse2008 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2008() *InlineResponse2008 {
	this := InlineResponse2008{}
	return &this
}

// NewInlineResponse2008WithDefaults instantiates a new InlineResponse2008 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2008WithDefaults() *InlineResponse2008 {
	this := InlineResponse2008{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse2008) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse2008) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InlineResponse2008) SetId(v string) {
	o.Id = &v
}

// GetCapabilityMarkets returns the CapabilityMarkets field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCapabilityMarkets() bool {
	if o == nil || o.CapabilityMarkets == nil {
		var ret bool
		return ret
	}
	return *o.CapabilityMarkets
}

// GetCapabilityMarketsOk returns a tuple with the CapabilityMarkets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCapabilityMarketsOk() (*bool, bool) {
	if o == nil || o.CapabilityMarkets == nil {
		return nil, false
	}
	return o.CapabilityMarkets, true
}

// HasCapabilityMarkets returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCapabilityMarkets() bool {
	if o != nil && o.CapabilityMarkets != nil {
		return true
	}

	return false
}

// SetCapabilityMarkets gets a reference to the given bool and assigns it to the CapabilityMarkets field.
func (o *InlineResponse2008) SetCapabilityMarkets(v bool) {
	o.CapabilityMarkets = &v
}

// GetCapabilityTrades returns the CapabilityTrades field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCapabilityTrades() bool {
	if o == nil || o.CapabilityTrades == nil {
		var ret bool
		return ret
	}
	return *o.CapabilityTrades
}

// GetCapabilityTradesOk returns a tuple with the CapabilityTrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCapabilityTradesOk() (*bool, bool) {
	if o == nil || o.CapabilityTrades == nil {
		return nil, false
	}
	return o.CapabilityTrades, true
}

// HasCapabilityTrades returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCapabilityTrades() bool {
	if o != nil && o.CapabilityTrades != nil {
		return true
	}

	return false
}

// SetCapabilityTrades gets a reference to the given bool and assigns it to the CapabilityTrades field.
func (o *InlineResponse2008) SetCapabilityTrades(v bool) {
	o.CapabilityTrades = &v
}

// GetCapabilityTradesByTimestamp returns the CapabilityTradesByTimestamp field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCapabilityTradesByTimestamp() bool {
	if o == nil || o.CapabilityTradesByTimestamp == nil {
		var ret bool
		return ret
	}
	return *o.CapabilityTradesByTimestamp
}

// GetCapabilityTradesByTimestampOk returns a tuple with the CapabilityTradesByTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCapabilityTradesByTimestampOk() (*bool, bool) {
	if o == nil || o.CapabilityTradesByTimestamp == nil {
		return nil, false
	}
	return o.CapabilityTradesByTimestamp, true
}

// HasCapabilityTradesByTimestamp returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCapabilityTradesByTimestamp() bool {
	if o != nil && o.CapabilityTradesByTimestamp != nil {
		return true
	}

	return false
}

// SetCapabilityTradesByTimestamp gets a reference to the given bool and assigns it to the CapabilityTradesByTimestamp field.
func (o *InlineResponse2008) SetCapabilityTradesByTimestamp(v bool) {
	o.CapabilityTradesByTimestamp = &v
}

// GetCapabilityTradesSnapshot returns the CapabilityTradesSnapshot field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCapabilityTradesSnapshot() bool {
	if o == nil || o.CapabilityTradesSnapshot == nil {
		var ret bool
		return ret
	}
	return *o.CapabilityTradesSnapshot
}

// GetCapabilityTradesSnapshotOk returns a tuple with the CapabilityTradesSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCapabilityTradesSnapshotOk() (*bool, bool) {
	if o == nil || o.CapabilityTradesSnapshot == nil {
		return nil, false
	}
	return o.CapabilityTradesSnapshot, true
}

// HasCapabilityTradesSnapshot returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCapabilityTradesSnapshot() bool {
	if o != nil && o.CapabilityTradesSnapshot != nil {
		return true
	}

	return false
}

// SetCapabilityTradesSnapshot gets a reference to the given bool and assigns it to the CapabilityTradesSnapshot field.
func (o *InlineResponse2008) SetCapabilityTradesSnapshot(v bool) {
	o.CapabilityTradesSnapshot = &v
}

// GetCapabilityOrdersSnapshot returns the CapabilityOrdersSnapshot field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCapabilityOrdersSnapshot() bool {
	if o == nil || o.CapabilityOrdersSnapshot == nil {
		var ret bool
		return ret
	}
	return *o.CapabilityOrdersSnapshot
}

// GetCapabilityOrdersSnapshotOk returns a tuple with the CapabilityOrdersSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCapabilityOrdersSnapshotOk() (*bool, bool) {
	if o == nil || o.CapabilityOrdersSnapshot == nil {
		return nil, false
	}
	return o.CapabilityOrdersSnapshot, true
}

// HasCapabilityOrdersSnapshot returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCapabilityOrdersSnapshot() bool {
	if o != nil && o.CapabilityOrdersSnapshot != nil {
		return true
	}

	return false
}

// SetCapabilityOrdersSnapshot gets a reference to the given bool and assigns it to the CapabilityOrdersSnapshot field.
func (o *InlineResponse2008) SetCapabilityOrdersSnapshot(v bool) {
	o.CapabilityOrdersSnapshot = &v
}

// GetCapabilityCandles returns the CapabilityCandles field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCapabilityCandles() bool {
	if o == nil || o.CapabilityCandles == nil {
		var ret bool
		return ret
	}
	return *o.CapabilityCandles
}

// GetCapabilityCandlesOk returns a tuple with the CapabilityCandles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCapabilityCandlesOk() (*bool, bool) {
	if o == nil || o.CapabilityCandles == nil {
		return nil, false
	}
	return o.CapabilityCandles, true
}

// HasCapabilityCandles returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCapabilityCandles() bool {
	if o != nil && o.CapabilityCandles != nil {
		return true
	}

	return false
}

// SetCapabilityCandles gets a reference to the given bool and assigns it to the CapabilityCandles field.
func (o *InlineResponse2008) SetCapabilityCandles(v bool) {
	o.CapabilityCandles = &v
}

// GetCapabilityTicker returns the CapabilityTicker field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCapabilityTicker() bool {
	if o == nil || o.CapabilityTicker == nil {
		var ret bool
		return ret
	}
	return *o.CapabilityTicker
}

// GetCapabilityTickerOk returns a tuple with the CapabilityTicker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCapabilityTickerOk() (*bool, bool) {
	if o == nil || o.CapabilityTicker == nil {
		return nil, false
	}
	return o.CapabilityTicker, true
}

// HasCapabilityTicker returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCapabilityTicker() bool {
	if o != nil && o.CapabilityTicker != nil {
		return true
	}

	return false
}

// SetCapabilityTicker gets a reference to the given bool and assigns it to the CapabilityTicker field.
func (o *InlineResponse2008) SetCapabilityTicker(v bool) {
	o.CapabilityTicker = &v
}

// GetIntegrated returns the Integrated field value if set, zero value otherwise.
func (o *InlineResponse2008) GetIntegrated() bool {
	if o == nil || o.Integrated == nil {
		var ret bool
		return ret
	}
	return *o.Integrated
}

// GetIntegratedOk returns a tuple with the Integrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetIntegratedOk() (*bool, bool) {
	if o == nil || o.Integrated == nil {
		return nil, false
	}
	return o.Integrated, true
}

// HasIntegrated returns a boolean if a field has been set.
func (o *InlineResponse2008) HasIntegrated() bool {
	if o != nil && o.Integrated != nil {
		return true
	}

	return false
}

// SetIntegrated gets a reference to the given bool and assigns it to the Integrated field.
func (o *InlineResponse2008) SetIntegrated(v bool) {
	o.Integrated = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse2008) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse2008) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse2008) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InlineResponse2008) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InlineResponse2008) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InlineResponse2008) SetDescription(v string) {
	o.Description = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *InlineResponse2008) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *InlineResponse2008) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *InlineResponse2008) SetLocation(v string) {
	o.Location = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *InlineResponse2008) GetLogoUrl() string {
	if o == nil || o.LogoUrl == nil {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetLogoUrlOk() (*string, bool) {
	if o == nil || o.LogoUrl == nil {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *InlineResponse2008) HasLogoUrl() bool {
	if o != nil && o.LogoUrl != nil {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *InlineResponse2008) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetWebsiteUrl returns the WebsiteUrl field value if set, zero value otherwise.
func (o *InlineResponse2008) GetWebsiteUrl() string {
	if o == nil || o.WebsiteUrl == nil {
		var ret string
		return ret
	}
	return *o.WebsiteUrl
}

// GetWebsiteUrlOk returns a tuple with the WebsiteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetWebsiteUrlOk() (*string, bool) {
	if o == nil || o.WebsiteUrl == nil {
		return nil, false
	}
	return o.WebsiteUrl, true
}

// HasWebsiteUrl returns a boolean if a field has been set.
func (o *InlineResponse2008) HasWebsiteUrl() bool {
	if o != nil && o.WebsiteUrl != nil {
		return true
	}

	return false
}

// SetWebsiteUrl gets a reference to the given string and assigns it to the WebsiteUrl field.
func (o *InlineResponse2008) SetWebsiteUrl(v string) {
	o.WebsiteUrl = &v
}

// GetFeesUrl returns the FeesUrl field value if set, zero value otherwise.
func (o *InlineResponse2008) GetFeesUrl() string {
	if o == nil || o.FeesUrl == nil {
		var ret string
		return ret
	}
	return *o.FeesUrl
}

// GetFeesUrlOk returns a tuple with the FeesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetFeesUrlOk() (*string, bool) {
	if o == nil || o.FeesUrl == nil {
		return nil, false
	}
	return o.FeesUrl, true
}

// HasFeesUrl returns a boolean if a field has been set.
func (o *InlineResponse2008) HasFeesUrl() bool {
	if o != nil && o.FeesUrl != nil {
		return true
	}

	return false
}

// SetFeesUrl gets a reference to the given string and assigns it to the FeesUrl field.
func (o *InlineResponse2008) SetFeesUrl(v string) {
	o.FeesUrl = &v
}

// GetTwitterUrl returns the TwitterUrl field value if set, zero value otherwise.
func (o *InlineResponse2008) GetTwitterUrl() string {
	if o == nil || o.TwitterUrl == nil {
		var ret string
		return ret
	}
	return *o.TwitterUrl
}

// GetTwitterUrlOk returns a tuple with the TwitterUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetTwitterUrlOk() (*string, bool) {
	if o == nil || o.TwitterUrl == nil {
		return nil, false
	}
	return o.TwitterUrl, true
}

// HasTwitterUrl returns a boolean if a field has been set.
func (o *InlineResponse2008) HasTwitterUrl() bool {
	if o != nil && o.TwitterUrl != nil {
		return true
	}

	return false
}

// SetTwitterUrl gets a reference to the given string and assigns it to the TwitterUrl field.
func (o *InlineResponse2008) SetTwitterUrl(v string) {
	o.TwitterUrl = &v
}

// GetFacebookUrl returns the FacebookUrl field value if set, zero value otherwise.
func (o *InlineResponse2008) GetFacebookUrl() string {
	if o == nil || o.FacebookUrl == nil {
		var ret string
		return ret
	}
	return *o.FacebookUrl
}

// GetFacebookUrlOk returns a tuple with the FacebookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetFacebookUrlOk() (*string, bool) {
	if o == nil || o.FacebookUrl == nil {
		return nil, false
	}
	return o.FacebookUrl, true
}

// HasFacebookUrl returns a boolean if a field has been set.
func (o *InlineResponse2008) HasFacebookUrl() bool {
	if o != nil && o.FacebookUrl != nil {
		return true
	}

	return false
}

// SetFacebookUrl gets a reference to the given string and assigns it to the FacebookUrl field.
func (o *InlineResponse2008) SetFacebookUrl(v string) {
	o.FacebookUrl = &v
}

// GetRedditUrl returns the RedditUrl field value if set, zero value otherwise.
func (o *InlineResponse2008) GetRedditUrl() string {
	if o == nil || o.RedditUrl == nil {
		var ret string
		return ret
	}
	return *o.RedditUrl
}

// GetRedditUrlOk returns a tuple with the RedditUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetRedditUrlOk() (*string, bool) {
	if o == nil || o.RedditUrl == nil {
		return nil, false
	}
	return o.RedditUrl, true
}

// HasRedditUrl returns a boolean if a field has been set.
func (o *InlineResponse2008) HasRedditUrl() bool {
	if o != nil && o.RedditUrl != nil {
		return true
	}

	return false
}

// SetRedditUrl gets a reference to the given string and assigns it to the RedditUrl field.
func (o *InlineResponse2008) SetRedditUrl(v string) {
	o.RedditUrl = &v
}

// GetChatUrl returns the ChatUrl field value if set, zero value otherwise.
func (o *InlineResponse2008) GetChatUrl() string {
	if o == nil || o.ChatUrl == nil {
		var ret string
		return ret
	}
	return *o.ChatUrl
}

// GetChatUrlOk returns a tuple with the ChatUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetChatUrlOk() (*string, bool) {
	if o == nil || o.ChatUrl == nil {
		return nil, false
	}
	return o.ChatUrl, true
}

// HasChatUrl returns a boolean if a field has been set.
func (o *InlineResponse2008) HasChatUrl() bool {
	if o != nil && o.ChatUrl != nil {
		return true
	}

	return false
}

// SetChatUrl gets a reference to the given string and assigns it to the ChatUrl field.
func (o *InlineResponse2008) SetChatUrl(v string) {
	o.ChatUrl = &v
}

// GetBlogUrl returns the BlogUrl field value if set, zero value otherwise.
func (o *InlineResponse2008) GetBlogUrl() string {
	if o == nil || o.BlogUrl == nil {
		var ret string
		return ret
	}
	return *o.BlogUrl
}

// GetBlogUrlOk returns a tuple with the BlogUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetBlogUrlOk() (*string, bool) {
	if o == nil || o.BlogUrl == nil {
		return nil, false
	}
	return o.BlogUrl, true
}

// HasBlogUrl returns a boolean if a field has been set.
func (o *InlineResponse2008) HasBlogUrl() bool {
	if o != nil && o.BlogUrl != nil {
		return true
	}

	return false
}

// SetBlogUrl gets a reference to the given string and assigns it to the BlogUrl field.
func (o *InlineResponse2008) SetBlogUrl(v string) {
	o.BlogUrl = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *InlineResponse2008) GetYear() string {
	if o == nil || o.Year == nil {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetYearOk() (*string, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *InlineResponse2008) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *InlineResponse2008) SetYear(v string) {
	o.Year = &v
}

// GetTransparencyGrade returns the TransparencyGrade field value if set, zero value otherwise.
func (o *InlineResponse2008) GetTransparencyGrade() string {
	if o == nil || o.TransparencyGrade == nil {
		var ret string
		return ret
	}
	return *o.TransparencyGrade
}

// GetTransparencyGradeOk returns a tuple with the TransparencyGrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetTransparencyGradeOk() (*string, bool) {
	if o == nil || o.TransparencyGrade == nil {
		return nil, false
	}
	return o.TransparencyGrade, true
}

// HasTransparencyGrade returns a boolean if a field has been set.
func (o *InlineResponse2008) HasTransparencyGrade() bool {
	if o != nil && o.TransparencyGrade != nil {
		return true
	}

	return false
}

// SetTransparencyGrade gets a reference to the given string and assigns it to the TransparencyGrade field.
func (o *InlineResponse2008) SetTransparencyGrade(v string) {
	o.TransparencyGrade = &v
}

// GetOrderBooksInterval returns the OrderBooksInterval field value if set, zero value otherwise.
func (o *InlineResponse2008) GetOrderBooksInterval() float32 {
	if o == nil || o.OrderBooksInterval == nil {
		var ret float32
		return ret
	}
	return *o.OrderBooksInterval
}

// GetOrderBooksIntervalOk returns a tuple with the OrderBooksInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetOrderBooksIntervalOk() (*float32, bool) {
	if o == nil || o.OrderBooksInterval == nil {
		return nil, false
	}
	return o.OrderBooksInterval, true
}

// HasOrderBooksInterval returns a boolean if a field has been set.
func (o *InlineResponse2008) HasOrderBooksInterval() bool {
	if o != nil && o.OrderBooksInterval != nil {
		return true
	}

	return false
}

// SetOrderBooksInterval gets a reference to the given float32 and assigns it to the OrderBooksInterval field.
func (o *InlineResponse2008) SetOrderBooksInterval(v float32) {
	o.OrderBooksInterval = &v
}

// GetCentralized returns the Centralized field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCentralized() bool {
	if o == nil || o.Centralized == nil {
		var ret bool
		return ret
	}
	return *o.Centralized
}

// GetCentralizedOk returns a tuple with the Centralized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCentralizedOk() (*bool, bool) {
	if o == nil || o.Centralized == nil {
		return nil, false
	}
	return o.Centralized, true
}

// HasCentralized returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCentralized() bool {
	if o != nil && o.Centralized != nil {
		return true
	}

	return false
}

// SetCentralized gets a reference to the given bool and assigns it to the Centralized field.
func (o *InlineResponse2008) SetCentralized(v bool) {
	o.Centralized = &v
}

// GetDecentralized returns the Decentralized field value if set, zero value otherwise.
func (o *InlineResponse2008) GetDecentralized() bool {
	if o == nil || o.Decentralized == nil {
		var ret bool
		return ret
	}
	return *o.Decentralized
}

// GetDecentralizedOk returns a tuple with the Decentralized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetDecentralizedOk() (*bool, bool) {
	if o == nil || o.Decentralized == nil {
		return nil, false
	}
	return o.Decentralized, true
}

// HasDecentralized returns a boolean if a field has been set.
func (o *InlineResponse2008) HasDecentralized() bool {
	if o != nil && o.Decentralized != nil {
		return true
	}

	return false
}

// SetDecentralized gets a reference to the given bool and assigns it to the Decentralized field.
func (o *InlineResponse2008) SetDecentralized(v bool) {
	o.Decentralized = &v
}

func (o InlineResponse2008) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CapabilityMarkets != nil {
		toSerialize["capability_markets"] = o.CapabilityMarkets
	}
	if o.CapabilityTrades != nil {
		toSerialize["capability_trades"] = o.CapabilityTrades
	}
	if o.CapabilityTradesByTimestamp != nil {
		toSerialize["capability_trades_by_timestamp"] = o.CapabilityTradesByTimestamp
	}
	if o.CapabilityTradesSnapshot != nil {
		toSerialize["capability_trades_snapshot"] = o.CapabilityTradesSnapshot
	}
	if o.CapabilityOrdersSnapshot != nil {
		toSerialize["capability_orders_snapshot"] = o.CapabilityOrdersSnapshot
	}
	if o.CapabilityCandles != nil {
		toSerialize["capability_candles"] = o.CapabilityCandles
	}
	if o.CapabilityTicker != nil {
		toSerialize["capability_ticker"] = o.CapabilityTicker
	}
	if o.Integrated != nil {
		toSerialize["integrated"] = o.Integrated
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.LogoUrl != nil {
		toSerialize["logo_url"] = o.LogoUrl
	}
	if o.WebsiteUrl != nil {
		toSerialize["website_url"] = o.WebsiteUrl
	}
	if o.FeesUrl != nil {
		toSerialize["fees_url"] = o.FeesUrl
	}
	if o.TwitterUrl != nil {
		toSerialize["twitter_url"] = o.TwitterUrl
	}
	if o.FacebookUrl != nil {
		toSerialize["facebook_url"] = o.FacebookUrl
	}
	if o.RedditUrl != nil {
		toSerialize["reddit_url"] = o.RedditUrl
	}
	if o.ChatUrl != nil {
		toSerialize["chat_url"] = o.ChatUrl
	}
	if o.BlogUrl != nil {
		toSerialize["blog_url"] = o.BlogUrl
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.TransparencyGrade != nil {
		toSerialize["transparency_grade"] = o.TransparencyGrade
	}
	if o.OrderBooksInterval != nil {
		toSerialize["order_books_interval"] = o.OrderBooksInterval
	}
	if o.Centralized != nil {
		toSerialize["centralized"] = o.Centralized
	}
	if o.Decentralized != nil {
		toSerialize["decentralized"] = o.Decentralized
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2008 struct {
	value *InlineResponse2008
	isSet bool
}

func (v NullableInlineResponse2008) Get() *InlineResponse2008 {
	return v.value
}

func (v *NullableInlineResponse2008) Set(val *InlineResponse2008) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2008) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2008) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2008(val *InlineResponse2008) *NullableInlineResponse2008 {
	return &NullableInlineResponse2008{value: val, isSet: true}
}

func (v NullableInlineResponse2008) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2008) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
