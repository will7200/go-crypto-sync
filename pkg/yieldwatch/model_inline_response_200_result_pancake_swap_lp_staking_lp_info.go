/*
 * Yieldwatch API
 *
 * Yieldwatch doesn't have a openapi docs sadville
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yieldwatch

import (
	"encoding/json"
)

// InlineResponse200ResultPancakeSwapLPStakingLPInfo struct for InlineResponse200ResultPancakeSwapLPStakingLPInfo
type InlineResponse200ResultPancakeSwapLPStakingLPInfo struct {
	CompactSessions    *[]map[string]interface{} `json:"compactSessions,omitempty"`
	SymbolToken0       *string                   `json:"symbolToken0,omitempty"`
	SymbolToken1       *string                   `json:"symbolToken1,omitempty"`
	DepositToken0      *float32                  `json:"depositToken0,omitempty"`
	DepositToken1      *float32                  `json:"depositToken1,omitempty"`
	PriceInUSDToken0   *float32                  `json:"priceInUSDToken0,omitempty"`
	PriceInUSDToken1   *float32                  `json:"priceInUSDToken1,omitempty"`
	ChangeToken0       *float32                  `json:"changeToken0,omitempty"`
	ChangeToken1       *float32                  `json:"changeToken1,omitempty"`
	FeesEarnedInToken0 *float32                  `json:"feesEarnedInToken0,omitempty"`
	FeesEarnedInToken1 *float32                  `json:"feesEarnedInToken1,omitempty"`
	CurrentToken0      *float32                  `json:"currentToken0,omitempty"`
	CurrentToken1      *float32                  `json:"currentToken1,omitempty"`
	PoolToken0         *float32                  `json:"poolToken0,omitempty"`
	PoolToken1         *float32                  `json:"poolToken1,omitempty"`
	ActPrice           *float32                  `json:"actPrice,omitempty"`
	HodlInToken1       *float32                  `json:"hodlInToken1,omitempty"`
	ActInToken1        *float32                  `json:"actInToken1,omitempty"`
	ILInToken1         *float32                  `json:"ILInToken1,omitempty"`
	FaktorIL           *float32                  `json:"faktorIL,omitempty"`
	DepositPrice       *float32                  `json:"depositPrice,omitempty"`
}

// NewInlineResponse200ResultPancakeSwapLPStakingLPInfo instantiates a new InlineResponse200ResultPancakeSwapLPStakingLPInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200ResultPancakeSwapLPStakingLPInfo() *InlineResponse200ResultPancakeSwapLPStakingLPInfo {
	this := InlineResponse200ResultPancakeSwapLPStakingLPInfo{}
	return &this
}

// NewInlineResponse200ResultPancakeSwapLPStakingLPInfoWithDefaults instantiates a new InlineResponse200ResultPancakeSwapLPStakingLPInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200ResultPancakeSwapLPStakingLPInfoWithDefaults() *InlineResponse200ResultPancakeSwapLPStakingLPInfo {
	this := InlineResponse200ResultPancakeSwapLPStakingLPInfo{}
	return &this
}

// GetCompactSessions returns the CompactSessions field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetCompactSessions() []map[string]interface{} {
	if o == nil || o.CompactSessions == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.CompactSessions
}

// GetCompactSessionsOk returns a tuple with the CompactSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetCompactSessionsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.CompactSessions == nil {
		return nil, false
	}
	return o.CompactSessions, true
}

// HasCompactSessions returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasCompactSessions() bool {
	if o != nil && o.CompactSessions != nil {
		return true
	}

	return false
}

// SetCompactSessions gets a reference to the given []map[string]interface{} and assigns it to the CompactSessions field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetCompactSessions(v []map[string]interface{}) {
	o.CompactSessions = &v
}

// GetSymbolToken0 returns the SymbolToken0 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetSymbolToken0() string {
	if o == nil || o.SymbolToken0 == nil {
		var ret string
		return ret
	}
	return *o.SymbolToken0
}

// GetSymbolToken0Ok returns a tuple with the SymbolToken0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetSymbolToken0Ok() (*string, bool) {
	if o == nil || o.SymbolToken0 == nil {
		return nil, false
	}
	return o.SymbolToken0, true
}

// HasSymbolToken0 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasSymbolToken0() bool {
	if o != nil && o.SymbolToken0 != nil {
		return true
	}

	return false
}

// SetSymbolToken0 gets a reference to the given string and assigns it to the SymbolToken0 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetSymbolToken0(v string) {
	o.SymbolToken0 = &v
}

// GetSymbolToken1 returns the SymbolToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetSymbolToken1() string {
	if o == nil || o.SymbolToken1 == nil {
		var ret string
		return ret
	}
	return *o.SymbolToken1
}

// GetSymbolToken1Ok returns a tuple with the SymbolToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetSymbolToken1Ok() (*string, bool) {
	if o == nil || o.SymbolToken1 == nil {
		return nil, false
	}
	return o.SymbolToken1, true
}

// HasSymbolToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasSymbolToken1() bool {
	if o != nil && o.SymbolToken1 != nil {
		return true
	}

	return false
}

// SetSymbolToken1 gets a reference to the given string and assigns it to the SymbolToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetSymbolToken1(v string) {
	o.SymbolToken1 = &v
}

// GetDepositToken0 returns the DepositToken0 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetDepositToken0() float32 {
	if o == nil || o.DepositToken0 == nil {
		var ret float32
		return ret
	}
	return *o.DepositToken0
}

// GetDepositToken0Ok returns a tuple with the DepositToken0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetDepositToken0Ok() (*float32, bool) {
	if o == nil || o.DepositToken0 == nil {
		return nil, false
	}
	return o.DepositToken0, true
}

// HasDepositToken0 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasDepositToken0() bool {
	if o != nil && o.DepositToken0 != nil {
		return true
	}

	return false
}

// SetDepositToken0 gets a reference to the given float32 and assigns it to the DepositToken0 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetDepositToken0(v float32) {
	o.DepositToken0 = &v
}

// GetDepositToken1 returns the DepositToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetDepositToken1() float32 {
	if o == nil || o.DepositToken1 == nil {
		var ret float32
		return ret
	}
	return *o.DepositToken1
}

// GetDepositToken1Ok returns a tuple with the DepositToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetDepositToken1Ok() (*float32, bool) {
	if o == nil || o.DepositToken1 == nil {
		return nil, false
	}
	return o.DepositToken1, true
}

// HasDepositToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasDepositToken1() bool {
	if o != nil && o.DepositToken1 != nil {
		return true
	}

	return false
}

// SetDepositToken1 gets a reference to the given float32 and assigns it to the DepositToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetDepositToken1(v float32) {
	o.DepositToken1 = &v
}

// GetPriceInUSDToken0 returns the PriceInUSDToken0 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetPriceInUSDToken0() float32 {
	if o == nil || o.PriceInUSDToken0 == nil {
		var ret float32
		return ret
	}
	return *o.PriceInUSDToken0
}

// GetPriceInUSDToken0Ok returns a tuple with the PriceInUSDToken0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetPriceInUSDToken0Ok() (*float32, bool) {
	if o == nil || o.PriceInUSDToken0 == nil {
		return nil, false
	}
	return o.PriceInUSDToken0, true
}

// HasPriceInUSDToken0 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasPriceInUSDToken0() bool {
	if o != nil && o.PriceInUSDToken0 != nil {
		return true
	}

	return false
}

// SetPriceInUSDToken0 gets a reference to the given float32 and assigns it to the PriceInUSDToken0 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetPriceInUSDToken0(v float32) {
	o.PriceInUSDToken0 = &v
}

// GetPriceInUSDToken1 returns the PriceInUSDToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetPriceInUSDToken1() float32 {
	if o == nil || o.PriceInUSDToken1 == nil {
		var ret float32
		return ret
	}
	return *o.PriceInUSDToken1
}

// GetPriceInUSDToken1Ok returns a tuple with the PriceInUSDToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetPriceInUSDToken1Ok() (*float32, bool) {
	if o == nil || o.PriceInUSDToken1 == nil {
		return nil, false
	}
	return o.PriceInUSDToken1, true
}

// HasPriceInUSDToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasPriceInUSDToken1() bool {
	if o != nil && o.PriceInUSDToken1 != nil {
		return true
	}

	return false
}

// SetPriceInUSDToken1 gets a reference to the given float32 and assigns it to the PriceInUSDToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetPriceInUSDToken1(v float32) {
	o.PriceInUSDToken1 = &v
}

// GetChangeToken0 returns the ChangeToken0 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetChangeToken0() float32 {
	if o == nil || o.ChangeToken0 == nil {
		var ret float32
		return ret
	}
	return *o.ChangeToken0
}

// GetChangeToken0Ok returns a tuple with the ChangeToken0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetChangeToken0Ok() (*float32, bool) {
	if o == nil || o.ChangeToken0 == nil {
		return nil, false
	}
	return o.ChangeToken0, true
}

// HasChangeToken0 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasChangeToken0() bool {
	if o != nil && o.ChangeToken0 != nil {
		return true
	}

	return false
}

// SetChangeToken0 gets a reference to the given float32 and assigns it to the ChangeToken0 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetChangeToken0(v float32) {
	o.ChangeToken0 = &v
}

// GetChangeToken1 returns the ChangeToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetChangeToken1() float32 {
	if o == nil || o.ChangeToken1 == nil {
		var ret float32
		return ret
	}
	return *o.ChangeToken1
}

// GetChangeToken1Ok returns a tuple with the ChangeToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetChangeToken1Ok() (*float32, bool) {
	if o == nil || o.ChangeToken1 == nil {
		return nil, false
	}
	return o.ChangeToken1, true
}

// HasChangeToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasChangeToken1() bool {
	if o != nil && o.ChangeToken1 != nil {
		return true
	}

	return false
}

// SetChangeToken1 gets a reference to the given float32 and assigns it to the ChangeToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetChangeToken1(v float32) {
	o.ChangeToken1 = &v
}

// GetFeesEarnedInToken0 returns the FeesEarnedInToken0 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetFeesEarnedInToken0() float32 {
	if o == nil || o.FeesEarnedInToken0 == nil {
		var ret float32
		return ret
	}
	return *o.FeesEarnedInToken0
}

// GetFeesEarnedInToken0Ok returns a tuple with the FeesEarnedInToken0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetFeesEarnedInToken0Ok() (*float32, bool) {
	if o == nil || o.FeesEarnedInToken0 == nil {
		return nil, false
	}
	return o.FeesEarnedInToken0, true
}

// HasFeesEarnedInToken0 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasFeesEarnedInToken0() bool {
	if o != nil && o.FeesEarnedInToken0 != nil {
		return true
	}

	return false
}

// SetFeesEarnedInToken0 gets a reference to the given float32 and assigns it to the FeesEarnedInToken0 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetFeesEarnedInToken0(v float32) {
	o.FeesEarnedInToken0 = &v
}

// GetFeesEarnedInToken1 returns the FeesEarnedInToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetFeesEarnedInToken1() float32 {
	if o == nil || o.FeesEarnedInToken1 == nil {
		var ret float32
		return ret
	}
	return *o.FeesEarnedInToken1
}

// GetFeesEarnedInToken1Ok returns a tuple with the FeesEarnedInToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetFeesEarnedInToken1Ok() (*float32, bool) {
	if o == nil || o.FeesEarnedInToken1 == nil {
		return nil, false
	}
	return o.FeesEarnedInToken1, true
}

// HasFeesEarnedInToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasFeesEarnedInToken1() bool {
	if o != nil && o.FeesEarnedInToken1 != nil {
		return true
	}

	return false
}

// SetFeesEarnedInToken1 gets a reference to the given float32 and assigns it to the FeesEarnedInToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetFeesEarnedInToken1(v float32) {
	o.FeesEarnedInToken1 = &v
}

// GetCurrentToken0 returns the CurrentToken0 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetCurrentToken0() float32 {
	if o == nil || o.CurrentToken0 == nil {
		var ret float32
		return ret
	}
	return *o.CurrentToken0
}

// GetCurrentToken0Ok returns a tuple with the CurrentToken0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetCurrentToken0Ok() (*float32, bool) {
	if o == nil || o.CurrentToken0 == nil {
		return nil, false
	}
	return o.CurrentToken0, true
}

// HasCurrentToken0 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasCurrentToken0() bool {
	if o != nil && o.CurrentToken0 != nil {
		return true
	}

	return false
}

// SetCurrentToken0 gets a reference to the given float32 and assigns it to the CurrentToken0 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetCurrentToken0(v float32) {
	o.CurrentToken0 = &v
}

// GetCurrentToken1 returns the CurrentToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetCurrentToken1() float32 {
	if o == nil || o.CurrentToken1 == nil {
		var ret float32
		return ret
	}
	return *o.CurrentToken1
}

// GetCurrentToken1Ok returns a tuple with the CurrentToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetCurrentToken1Ok() (*float32, bool) {
	if o == nil || o.CurrentToken1 == nil {
		return nil, false
	}
	return o.CurrentToken1, true
}

// HasCurrentToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasCurrentToken1() bool {
	if o != nil && o.CurrentToken1 != nil {
		return true
	}

	return false
}

// SetCurrentToken1 gets a reference to the given float32 and assigns it to the CurrentToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetCurrentToken1(v float32) {
	o.CurrentToken1 = &v
}

// GetPoolToken0 returns the PoolToken0 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetPoolToken0() float32 {
	if o == nil || o.PoolToken0 == nil {
		var ret float32
		return ret
	}
	return *o.PoolToken0
}

// GetPoolToken0Ok returns a tuple with the PoolToken0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetPoolToken0Ok() (*float32, bool) {
	if o == nil || o.PoolToken0 == nil {
		return nil, false
	}
	return o.PoolToken0, true
}

// HasPoolToken0 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasPoolToken0() bool {
	if o != nil && o.PoolToken0 != nil {
		return true
	}

	return false
}

// SetPoolToken0 gets a reference to the given float32 and assigns it to the PoolToken0 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetPoolToken0(v float32) {
	o.PoolToken0 = &v
}

// GetPoolToken1 returns the PoolToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetPoolToken1() float32 {
	if o == nil || o.PoolToken1 == nil {
		var ret float32
		return ret
	}
	return *o.PoolToken1
}

// GetPoolToken1Ok returns a tuple with the PoolToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetPoolToken1Ok() (*float32, bool) {
	if o == nil || o.PoolToken1 == nil {
		return nil, false
	}
	return o.PoolToken1, true
}

// HasPoolToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasPoolToken1() bool {
	if o != nil && o.PoolToken1 != nil {
		return true
	}

	return false
}

// SetPoolToken1 gets a reference to the given float32 and assigns it to the PoolToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetPoolToken1(v float32) {
	o.PoolToken1 = &v
}

// GetActPrice returns the ActPrice field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetActPrice() float32 {
	if o == nil || o.ActPrice == nil {
		var ret float32
		return ret
	}
	return *o.ActPrice
}

// GetActPriceOk returns a tuple with the ActPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetActPriceOk() (*float32, bool) {
	if o == nil || o.ActPrice == nil {
		return nil, false
	}
	return o.ActPrice, true
}

// HasActPrice returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasActPrice() bool {
	if o != nil && o.ActPrice != nil {
		return true
	}

	return false
}

// SetActPrice gets a reference to the given float32 and assigns it to the ActPrice field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetActPrice(v float32) {
	o.ActPrice = &v
}

// GetHodlInToken1 returns the HodlInToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetHodlInToken1() float32 {
	if o == nil || o.HodlInToken1 == nil {
		var ret float32
		return ret
	}
	return *o.HodlInToken1
}

// GetHodlInToken1Ok returns a tuple with the HodlInToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetHodlInToken1Ok() (*float32, bool) {
	if o == nil || o.HodlInToken1 == nil {
		return nil, false
	}
	return o.HodlInToken1, true
}

// HasHodlInToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasHodlInToken1() bool {
	if o != nil && o.HodlInToken1 != nil {
		return true
	}

	return false
}

// SetHodlInToken1 gets a reference to the given float32 and assigns it to the HodlInToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetHodlInToken1(v float32) {
	o.HodlInToken1 = &v
}

// GetActInToken1 returns the ActInToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetActInToken1() float32 {
	if o == nil || o.ActInToken1 == nil {
		var ret float32
		return ret
	}
	return *o.ActInToken1
}

// GetActInToken1Ok returns a tuple with the ActInToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetActInToken1Ok() (*float32, bool) {
	if o == nil || o.ActInToken1 == nil {
		return nil, false
	}
	return o.ActInToken1, true
}

// HasActInToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasActInToken1() bool {
	if o != nil && o.ActInToken1 != nil {
		return true
	}

	return false
}

// SetActInToken1 gets a reference to the given float32 and assigns it to the ActInToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetActInToken1(v float32) {
	o.ActInToken1 = &v
}

// GetILInToken1 returns the ILInToken1 field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetILInToken1() float32 {
	if o == nil || o.ILInToken1 == nil {
		var ret float32
		return ret
	}
	return *o.ILInToken1
}

// GetILInToken1Ok returns a tuple with the ILInToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetILInToken1Ok() (*float32, bool) {
	if o == nil || o.ILInToken1 == nil {
		return nil, false
	}
	return o.ILInToken1, true
}

// HasILInToken1 returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasILInToken1() bool {
	if o != nil && o.ILInToken1 != nil {
		return true
	}

	return false
}

// SetILInToken1 gets a reference to the given float32 and assigns it to the ILInToken1 field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetILInToken1(v float32) {
	o.ILInToken1 = &v
}

// GetFaktorIL returns the FaktorIL field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetFaktorIL() float32 {
	if o == nil || o.FaktorIL == nil {
		var ret float32
		return ret
	}
	return *o.FaktorIL
}

// GetFaktorILOk returns a tuple with the FaktorIL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetFaktorILOk() (*float32, bool) {
	if o == nil || o.FaktorIL == nil {
		return nil, false
	}
	return o.FaktorIL, true
}

// HasFaktorIL returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasFaktorIL() bool {
	if o != nil && o.FaktorIL != nil {
		return true
	}

	return false
}

// SetFaktorIL gets a reference to the given float32 and assigns it to the FaktorIL field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetFaktorIL(v float32) {
	o.FaktorIL = &v
}

// GetDepositPrice returns the DepositPrice field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetDepositPrice() float32 {
	if o == nil || o.DepositPrice == nil {
		var ret float32
		return ret
	}
	return *o.DepositPrice
}

// GetDepositPriceOk returns a tuple with the DepositPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) GetDepositPriceOk() (*float32, bool) {
	if o == nil || o.DepositPrice == nil {
		return nil, false
	}
	return o.DepositPrice, true
}

// HasDepositPrice returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) HasDepositPrice() bool {
	if o != nil && o.DepositPrice != nil {
		return true
	}

	return false
}

// SetDepositPrice gets a reference to the given float32 and assigns it to the DepositPrice field.
func (o *InlineResponse200ResultPancakeSwapLPStakingLPInfo) SetDepositPrice(v float32) {
	o.DepositPrice = &v
}

func (o InlineResponse200ResultPancakeSwapLPStakingLPInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompactSessions != nil {
		toSerialize["compactSessions"] = o.CompactSessions
	}
	if o.SymbolToken0 != nil {
		toSerialize["symbolToken0"] = o.SymbolToken0
	}
	if o.SymbolToken1 != nil {
		toSerialize["symbolToken1"] = o.SymbolToken1
	}
	if o.DepositToken0 != nil {
		toSerialize["depositToken0"] = o.DepositToken0
	}
	if o.DepositToken1 != nil {
		toSerialize["depositToken1"] = o.DepositToken1
	}
	if o.PriceInUSDToken0 != nil {
		toSerialize["priceInUSDToken0"] = o.PriceInUSDToken0
	}
	if o.PriceInUSDToken1 != nil {
		toSerialize["priceInUSDToken1"] = o.PriceInUSDToken1
	}
	if o.ChangeToken0 != nil {
		toSerialize["changeToken0"] = o.ChangeToken0
	}
	if o.ChangeToken1 != nil {
		toSerialize["changeToken1"] = o.ChangeToken1
	}
	if o.FeesEarnedInToken0 != nil {
		toSerialize["feesEarnedInToken0"] = o.FeesEarnedInToken0
	}
	if o.FeesEarnedInToken1 != nil {
		toSerialize["feesEarnedInToken1"] = o.FeesEarnedInToken1
	}
	if o.CurrentToken0 != nil {
		toSerialize["currentToken0"] = o.CurrentToken0
	}
	if o.CurrentToken1 != nil {
		toSerialize["currentToken1"] = o.CurrentToken1
	}
	if o.PoolToken0 != nil {
		toSerialize["poolToken0"] = o.PoolToken0
	}
	if o.PoolToken1 != nil {
		toSerialize["poolToken1"] = o.PoolToken1
	}
	if o.ActPrice != nil {
		toSerialize["actPrice"] = o.ActPrice
	}
	if o.HodlInToken1 != nil {
		toSerialize["hodlInToken1"] = o.HodlInToken1
	}
	if o.ActInToken1 != nil {
		toSerialize["actInToken1"] = o.ActInToken1
	}
	if o.ILInToken1 != nil {
		toSerialize["ILInToken1"] = o.ILInToken1
	}
	if o.FaktorIL != nil {
		toSerialize["faktorIL"] = o.FaktorIL
	}
	if o.DepositPrice != nil {
		toSerialize["depositPrice"] = o.DepositPrice
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo struct {
	value *InlineResponse200ResultPancakeSwapLPStakingLPInfo
	isSet bool
}

func (v NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo) Get() *InlineResponse200ResultPancakeSwapLPStakingLPInfo {
	return v.value
}

func (v *NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo) Set(val *InlineResponse200ResultPancakeSwapLPStakingLPInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200ResultPancakeSwapLPStakingLPInfo(val *InlineResponse200ResultPancakeSwapLPStakingLPInfo) *NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo {
	return &NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo{value: val, isSet: true}
}

func (v NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200ResultPancakeSwapLPStakingLPInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
