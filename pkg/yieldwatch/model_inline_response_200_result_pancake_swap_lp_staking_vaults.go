/*
 * Yieldwatch API
 *
 * Yieldwatch doesn't have a openapi docs sadville
 *
 * API version: 2021-05-29
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yieldwatch

import (
	"encoding/json"
)

// InlineResponse200ResultPancakeSwapLPStakingVaults struct for InlineResponse200ResultPancakeSwapLPStakingVaults
type InlineResponse200ResultPancakeSwapLPStakingVaults struct {
	Type                  *string                                              `json:"type,omitempty"`
	Name                  *string                                              `json:"name,omitempty"`
	Platform              *string                                              `json:"platform,omitempty"`
	RewardToken           *string                                              `json:"rewardToken,omitempty"`
	PendingRewards        *float32                                             `json:"pendingRewards,omitempty"`
	Apy                   *float32                                             `json:"apy,omitempty"`
	PoolInfo              *InlineResponse200ResultPancakeSwapLPStakingPoolInfo `json:"poolInfo,omitempty"`
	HarvestedRewards      *float32                                             `json:"harvestedRewards,omitempty"`
	TotalRewards          *float32                                             `json:"totalRewards,omitempty"`
	PriceInUSDRewardToken *float32                                             `json:"priceInUSDRewardToken,omitempty"`
	PoolSessions          *[][]map[string]interface{}                          `json:"poolSessions,omitempty"`
	LPInfo                *InlineResponse200ResultPancakeSwapLPStakingLPInfo   `json:"LPInfo,omitempty"`
	StakingTx             *[]map[string]interface{}                            `json:"stakingTx,omitempty"`
}

// NewInlineResponse200ResultPancakeSwapLPStakingVaults instantiates a new InlineResponse200ResultPancakeSwapLPStakingVaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200ResultPancakeSwapLPStakingVaults() *InlineResponse200ResultPancakeSwapLPStakingVaults {
	this := InlineResponse200ResultPancakeSwapLPStakingVaults{}
	return &this
}

// NewInlineResponse200ResultPancakeSwapLPStakingVaultsWithDefaults instantiates a new InlineResponse200ResultPancakeSwapLPStakingVaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200ResultPancakeSwapLPStakingVaultsWithDefaults() *InlineResponse200ResultPancakeSwapLPStakingVaults {
	this := InlineResponse200ResultPancakeSwapLPStakingVaults{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetName(v string) {
	o.Name = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPlatform() string {
	if o == nil || o.Platform == nil {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPlatformOk() (*string, bool) {
	if o == nil || o.Platform == nil {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasPlatform() bool {
	if o != nil && o.Platform != nil {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetPlatform(v string) {
	o.Platform = &v
}

// GetRewardToken returns the RewardToken field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetRewardToken() string {
	if o == nil || o.RewardToken == nil {
		var ret string
		return ret
	}
	return *o.RewardToken
}

// GetRewardTokenOk returns a tuple with the RewardToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetRewardTokenOk() (*string, bool) {
	if o == nil || o.RewardToken == nil {
		return nil, false
	}
	return o.RewardToken, true
}

// HasRewardToken returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasRewardToken() bool {
	if o != nil && o.RewardToken != nil {
		return true
	}

	return false
}

// SetRewardToken gets a reference to the given string and assigns it to the RewardToken field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetRewardToken(v string) {
	o.RewardToken = &v
}

// GetPendingRewards returns the PendingRewards field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPendingRewards() float32 {
	if o == nil || o.PendingRewards == nil {
		var ret float32
		return ret
	}
	return *o.PendingRewards
}

// GetPendingRewardsOk returns a tuple with the PendingRewards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPendingRewardsOk() (*float32, bool) {
	if o == nil || o.PendingRewards == nil {
		return nil, false
	}
	return o.PendingRewards, true
}

// HasPendingRewards returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasPendingRewards() bool {
	if o != nil && o.PendingRewards != nil {
		return true
	}

	return false
}

// SetPendingRewards gets a reference to the given float32 and assigns it to the PendingRewards field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetPendingRewards(v float32) {
	o.PendingRewards = &v
}

// GetApy returns the Apy field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetApy() float32 {
	if o == nil || o.Apy == nil {
		var ret float32
		return ret
	}
	return *o.Apy
}

// GetApyOk returns a tuple with the Apy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetApyOk() (*float32, bool) {
	if o == nil || o.Apy == nil {
		return nil, false
	}
	return o.Apy, true
}

// HasApy returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasApy() bool {
	if o != nil && o.Apy != nil {
		return true
	}

	return false
}

// SetApy gets a reference to the given float32 and assigns it to the Apy field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetApy(v float32) {
	o.Apy = &v
}

// GetPoolInfo returns the PoolInfo field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPoolInfo() InlineResponse200ResultPancakeSwapLPStakingPoolInfo {
	if o == nil || o.PoolInfo == nil {
		var ret InlineResponse200ResultPancakeSwapLPStakingPoolInfo
		return ret
	}
	return *o.PoolInfo
}

// GetPoolInfoOk returns a tuple with the PoolInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPoolInfoOk() (*InlineResponse200ResultPancakeSwapLPStakingPoolInfo, bool) {
	if o == nil || o.PoolInfo == nil {
		return nil, false
	}
	return o.PoolInfo, true
}

// HasPoolInfo returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasPoolInfo() bool {
	if o != nil && o.PoolInfo != nil {
		return true
	}

	return false
}

// SetPoolInfo gets a reference to the given InlineResponse200ResultPancakeSwapLPStakingPoolInfo and assigns it to the PoolInfo field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetPoolInfo(v InlineResponse200ResultPancakeSwapLPStakingPoolInfo) {
	o.PoolInfo = &v
}

// GetHarvestedRewards returns the HarvestedRewards field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetHarvestedRewards() float32 {
	if o == nil || o.HarvestedRewards == nil {
		var ret float32
		return ret
	}
	return *o.HarvestedRewards
}

// GetHarvestedRewardsOk returns a tuple with the HarvestedRewards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetHarvestedRewardsOk() (*float32, bool) {
	if o == nil || o.HarvestedRewards == nil {
		return nil, false
	}
	return o.HarvestedRewards, true
}

// HasHarvestedRewards returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasHarvestedRewards() bool {
	if o != nil && o.HarvestedRewards != nil {
		return true
	}

	return false
}

// SetHarvestedRewards gets a reference to the given float32 and assigns it to the HarvestedRewards field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetHarvestedRewards(v float32) {
	o.HarvestedRewards = &v
}

// GetTotalRewards returns the TotalRewards field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetTotalRewards() float32 {
	if o == nil || o.TotalRewards == nil {
		var ret float32
		return ret
	}
	return *o.TotalRewards
}

// GetTotalRewardsOk returns a tuple with the TotalRewards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetTotalRewardsOk() (*float32, bool) {
	if o == nil || o.TotalRewards == nil {
		return nil, false
	}
	return o.TotalRewards, true
}

// HasTotalRewards returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasTotalRewards() bool {
	if o != nil && o.TotalRewards != nil {
		return true
	}

	return false
}

// SetTotalRewards gets a reference to the given float32 and assigns it to the TotalRewards field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetTotalRewards(v float32) {
	o.TotalRewards = &v
}

// GetPriceInUSDRewardToken returns the PriceInUSDRewardToken field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPriceInUSDRewardToken() float32 {
	if o == nil || o.PriceInUSDRewardToken == nil {
		var ret float32
		return ret
	}
	return *o.PriceInUSDRewardToken
}

// GetPriceInUSDRewardTokenOk returns a tuple with the PriceInUSDRewardToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPriceInUSDRewardTokenOk() (*float32, bool) {
	if o == nil || o.PriceInUSDRewardToken == nil {
		return nil, false
	}
	return o.PriceInUSDRewardToken, true
}

// HasPriceInUSDRewardToken returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasPriceInUSDRewardToken() bool {
	if o != nil && o.PriceInUSDRewardToken != nil {
		return true
	}

	return false
}

// SetPriceInUSDRewardToken gets a reference to the given float32 and assigns it to the PriceInUSDRewardToken field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetPriceInUSDRewardToken(v float32) {
	o.PriceInUSDRewardToken = &v
}

// GetPoolSessions returns the PoolSessions field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPoolSessions() [][]map[string]interface{} {
	if o == nil || o.PoolSessions == nil {
		var ret [][]map[string]interface{}
		return ret
	}
	return *o.PoolSessions
}

// GetPoolSessionsOk returns a tuple with the PoolSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetPoolSessionsOk() (*[][]map[string]interface{}, bool) {
	if o == nil || o.PoolSessions == nil {
		return nil, false
	}
	return o.PoolSessions, true
}

// HasPoolSessions returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasPoolSessions() bool {
	if o != nil && o.PoolSessions != nil {
		return true
	}

	return false
}

// SetPoolSessions gets a reference to the given [][]map[string]interface{} and assigns it to the PoolSessions field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetPoolSessions(v [][]map[string]interface{}) {
	o.PoolSessions = &v
}

// GetLPInfo returns the LPInfo field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetLPInfo() InlineResponse200ResultPancakeSwapLPStakingLPInfo {
	if o == nil || o.LPInfo == nil {
		var ret InlineResponse200ResultPancakeSwapLPStakingLPInfo
		return ret
	}
	return *o.LPInfo
}

// GetLPInfoOk returns a tuple with the LPInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetLPInfoOk() (*InlineResponse200ResultPancakeSwapLPStakingLPInfo, bool) {
	if o == nil || o.LPInfo == nil {
		return nil, false
	}
	return o.LPInfo, true
}

// HasLPInfo returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasLPInfo() bool {
	if o != nil && o.LPInfo != nil {
		return true
	}

	return false
}

// SetLPInfo gets a reference to the given InlineResponse200ResultPancakeSwapLPStakingLPInfo and assigns it to the LPInfo field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetLPInfo(v InlineResponse200ResultPancakeSwapLPStakingLPInfo) {
	o.LPInfo = &v
}

// GetStakingTx returns the StakingTx field value if set, zero value otherwise.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetStakingTx() []map[string]interface{} {
	if o == nil || o.StakingTx == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.StakingTx
}

// GetStakingTxOk returns a tuple with the StakingTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) GetStakingTxOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.StakingTx == nil {
		return nil, false
	}
	return o.StakingTx, true
}

// HasStakingTx returns a boolean if a field has been set.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) HasStakingTx() bool {
	if o != nil && o.StakingTx != nil {
		return true
	}

	return false
}

// SetStakingTx gets a reference to the given []map[string]interface{} and assigns it to the StakingTx field.
func (o *InlineResponse200ResultPancakeSwapLPStakingVaults) SetStakingTx(v []map[string]interface{}) {
	o.StakingTx = &v
}

func (o InlineResponse200ResultPancakeSwapLPStakingVaults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Platform != nil {
		toSerialize["platform"] = o.Platform
	}
	if o.RewardToken != nil {
		toSerialize["rewardToken"] = o.RewardToken
	}
	if o.PendingRewards != nil {
		toSerialize["pendingRewards"] = o.PendingRewards
	}
	if o.Apy != nil {
		toSerialize["apy"] = o.Apy
	}
	if o.PoolInfo != nil {
		toSerialize["poolInfo"] = o.PoolInfo
	}
	if o.HarvestedRewards != nil {
		toSerialize["harvestedRewards"] = o.HarvestedRewards
	}
	if o.TotalRewards != nil {
		toSerialize["totalRewards"] = o.TotalRewards
	}
	if o.PriceInUSDRewardToken != nil {
		toSerialize["priceInUSDRewardToken"] = o.PriceInUSDRewardToken
	}
	if o.PoolSessions != nil {
		toSerialize["poolSessions"] = o.PoolSessions
	}
	if o.LPInfo != nil {
		toSerialize["LPInfo"] = o.LPInfo
	}
	if o.StakingTx != nil {
		toSerialize["stakingTx"] = o.StakingTx
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200ResultPancakeSwapLPStakingVaults struct {
	value *InlineResponse200ResultPancakeSwapLPStakingVaults
	isSet bool
}

func (v NullableInlineResponse200ResultPancakeSwapLPStakingVaults) Get() *InlineResponse200ResultPancakeSwapLPStakingVaults {
	return v.value
}

func (v *NullableInlineResponse200ResultPancakeSwapLPStakingVaults) Set(val *InlineResponse200ResultPancakeSwapLPStakingVaults) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200ResultPancakeSwapLPStakingVaults) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200ResultPancakeSwapLPStakingVaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200ResultPancakeSwapLPStakingVaults(val *InlineResponse200ResultPancakeSwapLPStakingVaults) *NullableInlineResponse200ResultPancakeSwapLPStakingVaults {
	return &NullableInlineResponse200ResultPancakeSwapLPStakingVaults{value: val, isSet: true}
}

func (v NullableInlineResponse200ResultPancakeSwapLPStakingVaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200ResultPancakeSwapLPStakingVaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
